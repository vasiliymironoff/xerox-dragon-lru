// generated by VivioJS 22.02 build 0 : 14-Feb-22 14:28:11

"use strict"

function shakerSort(vplayer) {

	// preload fonts
	let font = new FontFace('Open Sans', 'url("../../www/fonts/open-sans-v18-latin-regular.woff")', {weight:400})
	font.load()
	document.fonts.add(font)
	font = new FontFace('Open Sans', 'url("../../www/fonts/open-sans-v18-latin-700.woff")', {weight:700})
	font.load()
	document.fonts.add(font)

	// const imports
	const ARROW60_END = vplayer.ARROW60_END
	const ARROW60_START = vplayer.ARROW60_START
	const BLACK = vplayer.BLACK
	const BLUE = vplayer.BLUE
	const BOLD = vplayer.BOLD
	const CYAN = vplayer.CYAN
	const GRAY128 = vplayer.GRAY128
	const GRAY160 = vplayer.GRAY160
	const GRAY192 = vplayer.GRAY192
	const GRAY224 = vplayer.GRAY224
	const GRAY32 = vplayer.GRAY32
	const GRAY64 = vplayer.GRAY64
	const GRAY96 = vplayer.GRAY96
	const GREEN = vplayer.GREEN
	const HCENTRE = vplayer.HCENTRE
	const HLEFT = vplayer.HLEFT
	const MAGENTA = vplayer.MAGENTA
	const MB_LEFT = vplayer.MB_LEFT
	const MB_RIGHT = vplayer.MB_RIGHT
	const PROPAGATE = vplayer.PROPAGATE
	const RED = vplayer.RED
	const ROUND_END = vplayer.ROUND_END
	const VCENTRE = vplayer.VCENTRE
	const VTOP = vplayer.VTOP
	const WHITE = vplayer.WHITE
	const YELLOW = vplayer.YELLOW

	// var imports
	var $addGlobalEventHandler = vplayer.$addGlobalEventHandler
	var $addWaitToEventQ = vplayer.$addWaitToEventQ
	var $g = vplayer.$g
	var $terminateThread = vplayer.$terminateThread
	var checkPoint = vplayer.checkPoint
	var debug = vplayer.debug
	var Ellipse = vplayer.Ellipse
	var EXTENDEDGOBJ = vplayer.EXTENDEDGOBJ
	var Font = vplayer.Font
	var getArgAsNum = vplayer.getArgAsNum
	var getTick = vplayer.getTick
	var getTPS = vplayer.getTPS
	var getURL = vplayer.getURL
	var Group = vplayer.Group
	var Line2 = vplayer.Line2
	var newArray = vplayer.newArray
	var random = vplayer.random
	var Rectangle2 = vplayer.Rectangle2
	var reset = vplayer.reset
	var rgba = vplayer.rgba
	var setArgFromNum = vplayer.setArgFromNum
	var setBgBrush = vplayer.setBgBrush
	var setTPS = vplayer.setTPS
	var setVirtualWindow = vplayer.setVirtualWindow
	var SolidBrush = vplayer.SolidBrush
	var SolidPen = vplayer.SolidPen
	var start = vplayer.start
	var stop = vplayer.stop
	var Txt = vplayer.Txt

	// const declarations
	const W=1024
	const H=640
	const SZ=60
	const GAP=20
	const Y=H/2
	const BORDER=10
	const TITLEY=5
	const TITLEH=48
	const TICKS=20
	const BGAP=6
	const BW3=90
	const BH=25
	const BW4=(3*BW3-BGAP)/4
	const BW1=3*BW3+2*BGAP
	const N=10

	var $thread = 0
	var $pc = 0
	var $fp = -1
	var $sp = -1
	var $acc = 0
	var $obj = 0
	var $stack = 0
	var $testFlag = 0

	function $call(pc, obj) {
		if (obj === undefined)
			obj = 0
		let l = arguments.length - 1
		for (let i = l; i >= 2; i--)
			$stack[++$sp] = arguments[i]
		$acc = obj
		$stack[++$sp] = $pc + 1
		$pc = pc
		return $acc
	}

	function $enter(n) {	// n = # local variables
		$stack[++$sp] = $obj
		$stack[++$sp] = $fp
		$fp = $sp
		$obj = $acc
		$sp += n
	}

	function $return(n) {	// n = # parameters to pop
		$sp = $fp
		$fp = $stack[$sp--]
		$obj = $stack[$sp--]
		$pc = $stack[$sp--]
		if ($pc == -1) {
			$terminateThread($thread)
			$thread = 0
			return
		}
		$sp -= n
	}

	function $suspendThread() {
		if ($thread == 0)
			return 0;
		$thread.pc = $pc
		$thread.fp = $fp
		$thread.sp = $sp
		$thread.acc = $acc
		$thread.obj = $obj
		return $thread
	}

	function $getCurrentThread() {
		return $thread
	}

	function $resumeThread(toThread) {
		$pc = toThread.pc
		$fp = toThread.fp
		$sp = toThread.sp
		$acc = toThread.acc
		$obj = toThread.obj
		$stack = toThread.stack
		$thread = toThread
	}

	function $switchToThread(toThread) {
		if ($thread == toThread) {
			$acc = toThread.acc
			return
		}
		$suspendThread()
		$resumeThread(toThread)
	}

	function wait(ticks) {
		$suspendThread()
		$addWaitToEventQ(ticks, $thread)	// -ve ticks for a realtime wait
		return 1
	}

	function SimpleButton($grp, x, y, w, h, _b0, _b1, p0, _p1, txtpen, _f1, _f2, txt) {
		Group.call(this, $grp, 0, ((0) | EXTENDEDGOBJ), x, y, 0, 0, w, h)
		this.$b0=_b0
		this.$b1=_b1
		this.$p1=_p1
		this.$f1=_f1
		this.$f2=_f2
		this.$enabled=1
		this.setPen(p0)
		this.setBrush(this.$b0)
		this.setTxtPen(txtpen)
		this.setFont(this.$f1)
		this.setTxt(txt)
		this.setRounded(4, 4)
		this.$buttonFG=new Rectangle2(this, 0, 0, 0, 0, 1, 1, w-2, h-2)
		this.$buttonFG.setRounded(4, 4)
		this.addEventHandler("eventEE", this, this.$eh0)
		this.addEventHandler("eventMB", this, this.$eh1)
	}
	SimpleButton.prototype = Object.create(Group.prototype)

	SimpleButton.prototype.$eh0 = function(enter, $1, $2) {
		this.setBrush(enter ? this.$b1 : this.$b0)
		return PROPAGATE
	}

	SimpleButton.prototype.$eh1 = function(down, $1, $2, $3) {
		if (this.$enabled) {
			this.setFont(down ? this.$f2 : this.$f1)
			this.$buttonFG.setPen(down ? this.$p1 : 0)
		}
		return PROPAGATE
	}

	function $eh2(down, flags, $2, $3) {
		if (down&&(flags&MB_LEFT))
		$g[51] ? stop() : start()
	}

	function $eh3(start) {
		$g[43].setTxt(start ? "stop" : "start")
		$g[51]=start ? 1 : 0
	}

	function $eh9(newtps) {
		$g[32]=newtps
		setArgFromNum("tps", $g[32])
		$g[45].setTxt("%d ticks/s", $g[32])
		setTPS($g[32])
	}

	function $eh10(down, flags, $2, $3) {
		if (down) {
			if (flags&MB_LEFT) {
				$g[32]=($g[32]>=200) ? 10 : ($g[32]+10)/10*10
			} else
			if (flags&MB_RIGHT) {
				$g[32]=($g[32]<=10) ? 200 : ($g[32]-10)/10*10
			}
			setArgFromNum("tps", $g[32])
			$g[45].setTxt("%d ticks/s", $g[32])
			setTPS($g[32])
		}
	}

	function $eh11(down, flags, $2, $3) {
		if (down&&(flags&MB_LEFT))
		getURL("../vivio.htm")
		return 0
	}

	function Limit($grp, x, y, right) {
		Group.call(this, $grp, 0, ((0) | EXTENDEDGOBJ), x, y)
		if (right) {
			new Line2(this, 0, 0, $g[33], 0, 0, 0, 4*SZ)
			this.$rightArrowPen=new SolidPen(0, 7, BLACK, ARROW60_END)
			new Line2(this, 0, 0, this.$rightArrowPen, -20, 4*SZ+10, 40, 0)
			new Txt(this, 0, 0, 0, 4*SZ+25, $g[1], $g[36], "sorted")
		} else {
			new Line2(this, 0, 0, $g[33], 0, 0, 0, 4*SZ)
			this.$leftArrowPen=new SolidPen(0, 7, BLACK, ARROW60_START)
			new Line2(this, 0, 0, this.$leftArrowPen, -20, -10, 40, 0)
			new Txt(this, 0, HCENTRE|VCENTRE, 0, -25, $g[1], $g[36], "sorted")
		}
	}
	Limit.prototype = Object.create(Group.prototype)

	function $execute(thread) {

		$switchToThread(thread);

		while (1) {
			switch ($pc) {
			case -1:
				return;		// catch thread termination
			case 0:
				$enter(0)	// start with a function call
				$g[1]=new SolidPen(0, 0, BLACK)
				$g[2]=new SolidPen(0, 0, WHITE)
				$g[3]=new SolidPen(0, 0, RED)
				$g[4]=new SolidPen(0, 0, GREEN)
				$g[5]=new SolidPen(0, 0, BLUE)
				$g[6]=new SolidPen(0, 0, YELLOW)
				$g[7]=new SolidPen(0, 0, MAGENTA)
				$g[8]=new SolidPen(0, 0, CYAN)
				$g[9]=new SolidPen(0, 0, GRAY32)
				$g[10]=new SolidPen(0, 0, GRAY64)
				$g[11]=new SolidPen(0, 0, GRAY96)
				$g[12]=new SolidPen(0, 0, GRAY128)
				$g[13]=new SolidPen(0, 0, GRAY160)
				$g[14]=new SolidPen(0, 0, GRAY192)
				$g[15]=new SolidPen(0, 0, GRAY224)
				$g[16]=new SolidBrush(BLACK)
				$g[17]=new SolidBrush(WHITE)
				$g[18]=new SolidBrush(RED)
				$g[19]=new SolidBrush(GREEN)
				$g[20]=new SolidBrush(BLUE)
				$g[21]=new SolidBrush(YELLOW)
				$g[22]=new SolidBrush(MAGENTA)
				$g[23]=new SolidBrush(CYAN)
				$g[24]=new SolidBrush(GRAY32)
				$g[25]=new SolidBrush(GRAY64)
				$g[26]=new SolidBrush(GRAY96)
				$g[27]=new SolidBrush(GRAY128)
				$g[28]=new SolidBrush(GRAY160)
				$g[29]=new SolidBrush(GRAY192)
				$g[30]=new SolidBrush(GRAY224)
				$g[31]=getArgAsNum("arg1", 0)
				$g[32]=getArgAsNum("tps", 50)
				setTPS($g[32])
				setVirtualWindow(0, 0, W, H, 1)
				$g[33]=new SolidPen(2, 0, GRAY64)
				$g[34]=new SolidPen(0, 2, GRAY64, ROUND_END)
				$g[35]=new SolidBrush(rgba(0, 0.56000000000000005, 0.16))
				$g[36]=new Font("Open Sans", 16, 0)
				$g[37]=new Font("Open Sans", 16, BOLD)
				$g[38]=new Font("Open Sans", 20, 0)
				$g[39]=new Font("Open Sans", 28, 0)
				$g[40]=new Font("Open Sans", 32, 0)
				$g[41]=new Font("Open Sans", 14, 0)
				$g[42]=new Font("Open Sans", 12, 0)
				setBgBrush($g[30])
				$g[43]=new SimpleButton($g[0], W-3*BW3-2*BGAP-10, 10, BW3, BH, $g[17], $g[30], $g[34], $g[12], $g[1], $g[41], $g[42], "start")
				$g[44]=new SimpleButton($g[0], W-2*BW3-BGAP-10, 10, BW3, BH, $g[17], $g[30], $g[34], $g[12], $g[1], $g[41], $g[42], "reset")
				$g[45]=new SimpleButton($g[0], W-BW3-10, 10, BW3, BH, $g[17], $g[30], $g[34], $g[12], $g[1], $g[41], $g[42], "speed")
				$g[45].setTxt("%d ticks/s", $g[32])
				$g[46]=new SimpleButton($g[0], W-4*BW4-3*BGAP-10, 10+BH+BGAP, BW4, BH, $g[17], $g[30], $g[34], $g[12], $g[1], $g[41], $g[42], "in order")
				$g[47]=new SimpleButton($g[0], W-3*BW4-2*BGAP-10, 10+BH+BGAP, BW4, BH, $g[17], $g[30], $g[34], $g[12], $g[1], $g[41], $g[42], "reverse")
				$g[48]=new SimpleButton($g[0], W-2*BW4-BGAP-10, 10+BH+BGAP, BW4, BH, $g[17], $g[30], $g[34], $g[12], $g[1], $g[41], $g[42], "equal")
				$g[49]=new SimpleButton($g[0], W-BW4-10, 10+BH+BGAP, BW4, BH, $g[17], $g[30], $g[34], $g[12], $g[1], $g[41], $g[42], "random")
				$g[50]=new SimpleButton($g[0], W-BW1-10, 10+2*(BH+BGAP), BW1, BH, $g[17], $g[30], $g[34], $g[12], $g[1], $g[41], $g[42], "vivio help")
				$g[51]=0
				$g[53]=newArray(N)
				$g[54]=newArray(N)
				if (!($g[31]==0)) {
					$pc = 1
					continue
				}
				$g[53][0]=6
				$g[53][1]=3
				$g[53][2]=5
				$g[53][3]=9
				$g[53][4]=1
				$g[53][5]=0
				$g[53][6]=4
				$g[53][7]=2
				$g[53][8]=7
				$g[53][9]=8
				$pc = 21
				continue
			case 1:
				if (!($g[31]==1)) {
					$pc = 5
					continue
				}
				$g[52]=0
				$pc = 2
			case 2:
				if (!($g[52]<N)) {
					$pc = 4
					continue
				}
				$g[53][$g[52]]=$g[52]
				$pc = 3
			case 3:
				$g[52]++
				$pc = 2
				continue
			case 4:
				$pc = 20
				continue
			case 5:
				if (!($g[31]==2)) {
					$pc = 9
					continue
				}
				$g[52]=0
				$pc = 6
			case 6:
				if (!($g[52]<N)) {
					$pc = 8
					continue
				}
				$g[53][$g[52]]=N-1-$g[52]
				$pc = 7
			case 7:
				$g[52]++
				$pc = 6
				continue
			case 8:
				$pc = 19
				continue
			case 9:
				if (!($g[31]==3)) {
					$pc = 13
					continue
				}
				$g[52]=0
				$pc = 10
			case 10:
				if (!($g[52]<N)) {
					$pc = 12
					continue
				}
				$g[53][$g[52]]=3
				$pc = 11
			case 11:
				$g[52]++
				$pc = 10
				continue
			case 12:
				$pc = 18
				continue
			case 13:
				if (!($g[31]==4)) {
					$pc = 17
					continue
				}
				$g[52]=0
				$pc = 14
			case 14:
				if (!($g[52]<N)) {
					$pc = 16
					continue
				}
				$g[53][$g[52]]=random()*N|0
				$pc = 15
			case 15:
				$g[52]++
				$pc = 14
				continue
			case 16:
				$pc = 17
			case 17:
				$pc = 18
			case 18:
				$pc = 19
			case 19:
				$pc = 20
			case 20:
				$pc = 21
			case 21:
				$g[43].addEventHandler("eventMB", $obj, $eh2)
				$addGlobalEventHandler("eventStartStop", 0, $eh3)
				$g[44].addEventHandler("eventMB", $obj, 29)
				$g[46].addEventHandler("eventMB", $obj, 31)
				$g[47].addEventHandler("eventMB", $obj, 33)
				$g[48].addEventHandler("eventMB", $obj, 35)
				$g[49].addEventHandler("eventMB", $obj, 37)
				$addGlobalEventHandler("eventSetTPS", 0, $eh9)
				$g[45].addEventHandler("eventMB", $obj, $eh10)
				$g[50].addEventHandler("eventMB", $obj, $eh11)
				$g[55]=new Rectangle2($g[0], 0, HCENTRE, 0, $g[35], BORDER, TITLEY, W/2, TITLEH, $g[2], $g[40], "Shaker Sort")
				$g[55].setRounded(5, 5)
				$g[55].setTxtOff(0, 2)
				$g[55].setPt(1, $g[55].getTxtW()+16, TITLEH)
				$g[56]=(W-N*SZ-(N-1)*GAP)/2
				$g[52]=0
				$pc = 22
			case 22:
				if (!($g[52]<N)) {
					$pc = 24
					continue
				}
				$g[54][$g[52]]=new Ellipse($g[0], 0, 0, $g[3], $g[18], $g[56]+$g[52]*(SZ+GAP)+SZ/2, Y, -SZ/2, -SZ/2, SZ, SZ, $g[1], $g[39], "%d", $g[53][$g[52]])
				$pc = 23
			case 23:
				$g[52]++
				$pc = 22
				continue
			case 24:
				$g[57]=new Limit($g[0], $g[56]-GAP/2, Y-2*SZ, 0)
				$g[57].setOpacity(0)
				$g[58]=new Limit($g[0], $g[56]+N*(SZ+GAP)-GAP/2, Y-2*SZ, 1)
				$g[58].setOpacity(0)
				$g[59]=new SolidPen(0, 6, rgba(0, 0.40000000000000002, 0), ARROW60_START)
				$g[60]=new Line2($g[0], 0, 0, $g[59], $g[56]+(N-1)*(SZ+GAP)-GAP/2, Y+SZ, 0, 40)
				$g[60].setOpacity(0)
				$g[61]=0
				$g[62]=new Txt($g[0], 0, HLEFT|VTOP, BORDER, H-140, $g[5], $g[38], "comparisons: 0")
				$g[63]=0
				$g[64]=new Txt($g[0], 0, HLEFT|VTOP, BORDER, H-120, $g[5], $g[38], "exchanges: 0")
				$g[65]=new Txt($g[0], 0, HLEFT|VTOP, BORDER, H-SZ, $g[1], $g[39], "CLICK \"start\" to sort list into ascending order")
				$pc = 25
				if (wait(1)) {
					return
				}
			case 25:
				$call(54, $obj, 1)
				continue
			case 26:
				$call(56, $obj)
				continue
			case 27:
				$g[65].setTxt("List now in ascending order")
				$call(54, $obj, 0)
				continue
			case 28:
				debug("FINISHED tick=%d", getTick())
				$return(0)
				continue
			case 29:
				$enter(0);	// $eh4
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT))) {
					$pc = 30
					continue
				}
				reset()
				return
			case 30:
				$return(4)
				continue
			case 31:
				$enter(0);	// $eh5
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT))) {
					$pc = 32
					continue
				}
				setArgFromNum("arg1", 1)
				reset()
				return
			case 32:
				$return(4)
				continue
			case 33:
				$enter(0);	// $eh6
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT))) {
					$pc = 34
					continue
				}
				setArgFromNum("arg1", 2)
				reset()
				return
			case 34:
				$return(4)
				continue
			case 35:
				$enter(0);	// $eh7
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT))) {
					$pc = 36
					continue
				}
				setArgFromNum("arg1", 3)
				reset()
				return
			case 36:
				$return(4)
				continue
			case 37:
				$enter(0);	// $eh8
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT))) {
					$pc = 38
					continue
				}
				setArgFromNum("arg1", 4)
				reset()
				return
			case 38:
				$return(4)
				continue
			case 39:
				$enter(0);	// flash
				$pc = 40
				if ($g[60].setPos($g[56]+($stack[$fp-3]+1)*(SZ+GAP)-GAP/2, Y+SZ, TICKS, 1)) {
					return
				}
			case 40:
				$g[54][$stack[$fp-3]].toggleBrushAndPens($g[21], $g[54][$stack[$fp-3]].getPen(), $g[54][$stack[$fp-3]].getTxtPen(), 5, getTPS()/4, 0)
				$pc = 41
				if ($g[54][$stack[$fp-3]+1].toggleBrushAndPens($g[21], $g[54][$stack[$fp-3]+1].getPen(), $g[54][$stack[$fp-3]+1].getTxtPen(), 5, getTPS()/4, 1)) {
					return
				}
			case 41:
				$return(1)
				continue
			case 42:
				$enter(0);	// trackExchange
				$g[54][$stack[$fp-3]].setBrush($g[19])
				$g[54][$stack[$fp-3]+1].setBrush($g[19])
				$g[54][$stack[$fp-3]].translate(0, -100, TICKS, 0)
				$pc = 43
				if ($g[54][$stack[$fp-3]+1].translate(0, -80, TICKS, 1)) {
					return
				}
			case 43:
				$g[54][$stack[$fp-3]].translate((SZ+GAP), 0, TICKS, 0)
				$pc = 44
				if ($g[54][$stack[$fp-3]+1].translate(-(SZ+GAP), 0, TICKS, 1)) {
					return
				}
			case 44:
				$g[54][$stack[$fp-3]].translate(0, 100, TICKS, 0)
				$pc = 45
				if ($g[54][$stack[$fp-3]+1].translate(0, 80, TICKS, 1)) {
					return
				}
			case 45:
				$g[54][$stack[$fp-3]].setTxt("%d", $g[53][$stack[$fp-3]])
				$g[54][$stack[$fp-3]].setPos($g[56]+$stack[$fp-3]*(SZ+GAP)+SZ/2, Y)
				$g[54][$stack[$fp-3]].setBrush($g[18])
				$g[54][$stack[$fp-3]+1].setTxt("%d", $g[53][$stack[$fp-3]+1])
				$g[54][$stack[$fp-3]+1].setPos($g[56]+($stack[$fp-3]+1)*(SZ+GAP)+SZ/2, Y)
				$g[54][$stack[$fp-3]+1].setBrush($g[18])
				$return(1)
				continue
			case 46:
				$enter(0);	// moveLimit
				$g[65].setTxt("Move limit to where last swap took place on previous pass")
				$pc = 47
				if ($g[60].setOpacity(0, TICKS, 1)) {
					return
				}
			case 47:
				$g[60].setPos($g[56]+($stack[$fp-5]+1)*(SZ+GAP)-GAP/2, Y+SZ)
				$pc = 48
				if ($stack[$fp-3].setPos($g[56]+$stack[$fp-4]*(SZ+GAP)-GAP/2, Y-2*SZ, TICKS, 1)) {
					return
				}
			case 48:
				$pc = 49
				if ($g[60].setOpacity(1, TICKS, 1)) {
					return
				}
			case 49:
				$return(3)
				continue
			case 50:
				$enter(0);	// compare
				$g[65].setTxt("Compare adjacent elements and swap if NOT in ascending order")
				$call(39, $obj, $stack[$fp-3])
				continue
			case 51:
				$g[61]++
				$g[62].setTxt("comparisons: %d", $g[61])
				$return(2)
				continue
			case 52:
				$enter(1);	// exchange
				$stack[$fp+1]=$g[53][$stack[$fp-3]]
				$g[53][$stack[$fp-3]]=$g[53][$stack[$fp-4]]
				$g[53][$stack[$fp-4]]=$stack[$fp+1]
				$call(42, $obj, $stack[$fp-3])
				continue
			case 53:
				$g[63]+=1
				$g[64].setTxt("exchanges: %d", $g[63])
				$return(2)
				continue
			case 54:
				$enter(0);	// setOpacity
				$g[57].setOpacity($stack[$fp-3], TICKS, 0)
				$g[58].setOpacity($stack[$fp-3], TICKS, 0)
				$pc = 55
				if ($g[60].setOpacity($stack[$fp-3], TICKS, 1)) {
					return
				}
			case 55:
				$return(1)
				continue
			case 56:
				$enter(5);	// shakerSort
				$stack[$fp+1]=0
				$stack[$fp+2]=N-2
				$stack[$fp+3]=N
				$pc = 57
			case 57:
				$stack[$fp+5]=$stack[$fp+2]
				$pc = 58
			case 58:
				if (!($stack[$fp+5]>=$stack[$fp+1])) {
					$pc = 63
					continue
				}
				$call(50, $obj, $stack[$fp+5], $stack[$fp+5]+1)
				continue
			case 59:
				if (!($g[53][$stack[$fp+5]]>$g[53][$stack[$fp+5]+1])) {
					$pc = 61
					continue
				}
				$call(52, $obj, $stack[$fp+5], $stack[$fp+5]+1)
				continue
			case 60:
				$stack[$fp+3]=$stack[$fp+5]
				$pc = 61
			case 61:
				$pc = 62
			case 62:
				$stack[$fp+5]--
				$pc = 58
				continue
			case 63:
				$stack[$fp+1]=$stack[$fp+3]+1
				$call(46, $obj, $g[57], $stack[$fp+1], $stack[$fp+1])
				continue
			case 64:
				checkPoint()
				$stack[$fp+5]=$stack[$fp+1]
				$pc = 65
			case 65:
				if (!($stack[$fp+5]<=$stack[$fp+2])) {
					$pc = 70
					continue
				}
				$call(50, $obj, $stack[$fp+5], $stack[$fp+5]+1)
				continue
			case 66:
				if (!($g[53][$stack[$fp+5]]>$g[53][$stack[$fp+5]+1])) {
					$pc = 68
					continue
				}
				$call(52, $obj, $stack[$fp+5], $stack[$fp+5]+1)
				continue
			case 67:
				$stack[$fp+3]=$stack[$fp+5]
				$pc = 68
			case 68:
				$pc = 69
			case 69:
				$stack[$fp+5]++
				$pc = 65
				continue
			case 70:
				$stack[$fp+2]=$stack[$fp+3]-1
				$call(46, $obj, $g[58], $stack[$fp+2]+2, $stack[$fp+2])
				continue
			case 71:
				checkPoint()
				if($stack[$fp+1]<=$stack[$fp+2]) {
					$pc = 57
					continue
				}
				$pc = 72
			case 72:
				$return(0)
				continue
			}
		}
	}

	this.$getCurrentThread = $getCurrentThread
	this.$execute = $execute
	this.$resumeThread = $resumeThread
	this.$suspendThread = $suspendThread
	this.$switchToThread = $switchToThread
	this.$testFlag = $testFlag

}

// eof
