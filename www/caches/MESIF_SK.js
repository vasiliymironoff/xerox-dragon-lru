// generated by VivioJS 20.12 30-Dec-2020

"use strict"

function MESIF_SK(vplayer) {

	const ABSOLUTE = vplayer.ABSOLUTE
	const BLACK = vplayer.BLACK
	const BLUE = vplayer.BLUE
	const CYAN = vplayer.CYAN
	const GRAY128 = vplayer.GRAY128
	const GRAY160 = vplayer.GRAY160
	const GRAY192 = vplayer.GRAY192
	const GRAY224 = vplayer.GRAY224
	const GRAY32 = vplayer.GRAY32
	const GRAY64 = vplayer.GRAY64
	const GRAY96 = vplayer.GRAY96
	const GREEN = vplayer.GREEN
	const HLEFT = vplayer.HLEFT
	const HRIGHT = vplayer.HRIGHT
	const MAGENTA = vplayer.MAGENTA
	const MB_LEFT = vplayer.MB_LEFT
	const PROPAGATE = vplayer.PROPAGATE
	const RED = vplayer.RED
	const VBOTTOM = vplayer.VBOTTOM
	const VCENTRE = vplayer.VCENTRE
	const VTOP = vplayer.VTOP
	const WHITE = vplayer.WHITE
	const YELLOW = vplayer.YELLOW

	var $addWaitToEventQ = vplayer.$addWaitToEventQ
	var $g = vplayer.$g
	var $terminateThread = vplayer.$terminateThread
	var checkPoint = vplayer.checkPoint
	var debug = vplayer.debug
	var Ellipse = vplayer.Ellipse
	var EXTENDEDGOBJ = vplayer.EXTENDEDGOBJ
	var Font = vplayer.Font
	var fork = vplayer.fork
	var Group = vplayer.Group
	var newArray = vplayer.newArray
	var Polygon = vplayer.Polygon
	var Rectangle2 = vplayer.Rectangle2
	var reset = vplayer.reset
	var rgba = vplayer.rgba
	var setBgBrush = vplayer.setBgBrush
	var setTPS = vplayer.setTPS
	var setVirtualWindow = vplayer.setVirtualWindow
	var SolidBrush = vplayer.SolidBrush
	var SolidPen = vplayer.SolidPen
	var sprintf = vplayer.sprintf
	var start = vplayer.start
	var Txt = vplayer.Txt
	var VObj = vplayer.VObj

	const W=3200
	const H=2100
	const NCPU=5
	const TICKS=20
	const INVALID=0
	const SHARED=1
	const EXCLUSIVE=2
	const MODIFIED=3
	const FORWARD=4

	var $thread = 0
	var $pc = 0
	var $fp = -1
	var $sp = -1
	var $acc = 0
	var $obj = 0
	var $stack = 0

	function $call(pc, obj) {
		if (obj === undefined)
			obj = 0
		let l = arguments.length - 1
		for (let i = l; i >= 2; i--)
			$stack[++$sp] = arguments[i]
		$acc = obj
		$stack[++$sp] = $pc + 1
		$pc = pc
		return $acc
	}

	function $enter(n) {	// n = # local variables
		$stack[++$sp] = $obj
		$stack[++$sp] = $fp
		$fp = $sp
		$obj = $acc
		$sp += n
	}

	function $return(n) {	// n = # parameters to pop
		$sp = $fp
		$fp = $stack[$sp--]
		$obj = $stack[$sp--]
		$pc = $stack[$sp--]
		if ($pc == -1) {
			$terminateThread($thread)
			$thread = 0
			return
		}
		$sp -= n
	}

	function $suspendThread() {
		if ($thread == 0)
			return 0;
		$thread.pc = $pc
		$thread.fp = $fp
		$thread.sp = $sp
		$thread.acc = $acc
		$thread.obj = $obj
		return $thread
	}

	function $getCurrentThread() {
		return $thread
	}

	function $resumeThread(toThread) {
		$pc = toThread.pc
		$fp = toThread.fp
		$sp = toThread.sp
		$acc = toThread.acc
		$obj = toThread.obj
		$stack = toThread.stack
		$thread = toThread
	}

	function $switchToThread(toThread) {
		$acc = toThread.acc
		if ($thread == toThread)
			return
		$suspendThread()
		$resumeThread(toThread)
	}

	function wait(ticks) {
		$suspendThread()
		$addWaitToEventQ(ticks, $thread)	// -ve ticks for a realtime wait
		return 1
	}

	function SimpleButton($grp, x, y, w, h, _b0, _b1, p0, _p1, txtpen, _f1, _f2, txt) {
		Group.call(this, $grp, 0, ((0) | EXTENDEDGOBJ), x, y, 0, 0, w, h)
		this.$b0=_b0
		this.$b1=_b1
		this.$p1=_p1
		this.$f1=_f1
		this.$f2=_f2
		this.$enabled=1
		this.setPen(p0)
		this.setBrush(this.$b0)
		this.setTxtPen(txtpen)
		this.setFont(this.$f1)
		this.setTxt(txt)
		this.setRounded(4, 4)
		this.$buttonFG=new Rectangle2(this, 0, 0, 0, 0, 1, 1, w-2, h-2)
		this.$buttonFG.setRounded(4, 4)
		this.addEventHandler("eventEE", this, this.$eh0)
		this.addEventHandler("eventMB", this, this.$eh1)
	}
	SimpleButton.prototype = Object.create(Group.prototype)

	SimpleButton.prototype.$eh0 = function(enter, $1, $2) {
		this.setBrush(enter ? this.$b1 : this.$b0)
		return PROPAGATE
	}

	SimpleButton.prototype.$eh1 = function(down, $1, $2, $3) {
		if (this.$enabled) {
			this.setFont(down ? this.$f2 : this.$f1)
			this.$buttonFG.setPen(down ? this.$p1 : 0)
		}
		return PROPAGATE
	}

	function Queue() {
		VObj.call(this)
		this.$endPosition=0
		this.$queue=newArray(5)
		this.$queueActive=0
		for (this.$i=0; this.$i<5; this.$i++)
		this.$queue[this.$i]=-1
	}
	Queue.prototype = Object.create(VObj.prototype)

	Queue.prototype.$addProcess = function(cpuNo) {
		this.$queue[this.$endPosition]=cpuNo
		this.$queueActive=1
		this.$endPosition++
		if (this.$endPosition==5)
		this.$endPosition--
	}

	Queue.prototype.$removeProcess = function() {
		for (this.$i=0; this.$i<4; this.$i++)
		this.$queue[this.$i]=this.$queue[this.$i+1]
		this.$endPosition--
		if (this.$endPosition==0)
		this.$queueActive=0
		if (this.$endPosition==-1)
		this.$endPosition=0
	}

	Queue.prototype.$checkProcess = function(cpuNo) {
		for (this.$i=0; this.$i<this.$endPosition; this.$i++) {
			if (this.$queue[this.$i]==cpuNo)
			return 1
		}
		return 0
	}

	Queue.prototype.$emptyQueue = function() {
		this.$endPosition=0
		this.$queueActive=0
	}

	Queue.prototype.$deleteProcess = function(cpuNo) {
		for (this.$i=0; this.$i<this.$endPosition; this.$i++) {
			if (this.$queue[this.$i]==cpuNo) {
				for ($g[44]=this.$i; $g[44]<this.$endPosition; $g[44]++)
				this.$queue[$g[44]]=this.$queue[$g[44]+1]
				this.$endPosition--
				if (this.$endPosition==0)
				this.$queueActive=0
				if (this.$endPosition==-1)
				this.$endPosition=0
			}
		}
	}

	Queue.prototype.$returnProcess = function() {
		return this.$queue[0]
	}

	Queue.prototype.$isQueueEmpty = function() {
		return this.$queueActive
	}

	function p2pLink(_Ax, _Ay, _l, _cpuA, _cpuB, _orientation, _linkNo) {
		VObj.call(this)
		this.$Ax=_Ax
		this.$Ay=_Ay
		this.$l=_l
		this.$cpuA=_cpuA
		this.$cpuB=_cpuB
		this.$orientation=_orientation
		this.$linkNo=_linkNo
		this.$currentPacketUpNo=0
		this.$currentPacketDownNo=0
		this.$waitingU=0
		this.$waitingDown=0
		this.$packageW=120
		this.$packageH=40
		this.$arrowH=15
		this.$arrowW=30
		this.$xGap=200
		this.$yGap=105
		this.$boxOffsetX=20
		this.$boxOffsetY=15
		this.$lock=newArray(5)
		this.$httUp
		this.$httDown
		this.$pUpB=newArray(5)
		this.$pUp=newArray(5)
		this.$pDownB=newArray(5)
		this.$pDown=newArray(5)
		for (this.$i=0; this.$i<5; this.$i++)
		this.$lock[this.$i]=0
		if (this.$orientation==0) {
			this.$httUp=new Polygon($g[0], 0, ABSOLUTE, $g[1], $g[29], this.$Ax, this.$Ay-5, 0, 0, this.$l-this.$arrowW, 0, this.$l-this.$arrowW, -this.$arrowH, this.$l, this.$arrowH/2, this.$l-this.$arrowW, this.$arrowH*2, this.$l-this.$arrowW, this.$arrowH, 0, this.$arrowH)
			this.$httDown=new Polygon($g[0], 0, ABSOLUTE, $g[1], $g[29], this.$Ax, this.$Ay+this.$yGap-5, 0, this.$arrowH/2, this.$arrowW, -this.$arrowH, this.$arrowW, 0, this.$l, 0, this.$l, this.$arrowH, this.$arrowW, this.$arrowH, this.$arrowW, this.$arrowH*2)
			for (this.$i=0; this.$i<5; this.$i++) {
				this.$pUpB[this.$i]=new Ellipse($g[0], 0, 0, $g[3], $g[29], this.$Ax, this.$Ay+10, 0, 0, this.$packageW+(this.$boxOffsetX*2), this.$packageH+(this.$boxOffsetY*2))
				this.$pUp[this.$i]=new Rectangle2($g[0], 0, 0, $g[3], $g[29], this.$Ax+15, this.$Ay, this.$packageW, this.$packageH, $g[1], $g[37], 0)
				this.$pDownB[this.$i]=new Ellipse($g[0], 0, 0, $g[3], $g[29], this.$Ax, this.$Ay+50, 0, 0, this.$packageW+(this.$boxOffsetX*2), this.$packageH+(this.$boxOffsetY*2))
				this.$pDown[this.$i]=new Rectangle2($g[0], 0, 0, $g[3], $g[29], this.$Ax, this.$Ay+50, this.$packageW, this.$packageH, $g[1], $g[37], 0)
				this.$pUpB[this.$i].setOpacity(0)
				this.$pDownB[this.$i].setOpacity(0)
				this.$pUp[this.$i].setOpacity(0)
				this.$pDown[this.$i].setOpacity(0)
			}
		} else {
			this.$httUp=new Polygon($g[0], 0, ABSOLUTE, $g[1], $g[29], this.$Ax+55, this.$Ay, 0, 0, this.$arrowH, 0, this.$arrowH, this.$l-this.$arrowW, this.$arrowH*2, this.$l-this.$arrowW, this.$arrowH/2, this.$l, -this.$arrowH, this.$l-this.$arrowW, 0, this.$l-this.$arrowW)
			this.$httDown=new Polygon($g[0], 0, ABSOLUTE, $g[1], $g[29], this.$Ax+52+this.$xGap, this.$Ay, this.$arrowH/2, 0, this.$arrowH*2, this.$arrowW, this.$arrowH, this.$arrowW, this.$arrowH, this.$l, 0, this.$l, 0, this.$arrowW, -this.$arrowH, this.$arrowW)
			for (this.$i=0; this.$i<5; this.$i++) {
				this.$pUpB[this.$i]=new Ellipse($g[0], 0, 0, $g[3], $g[29], this.$Ax, this.$Ay, 0, 0, this.$packageW+(this.$boxOffsetX*2), this.$packageH+(this.$boxOffsetY*2))
				this.$pUp[this.$i]=new Rectangle2($g[0], 0, 0, $g[3], $g[29], this.$Ax, this.$Ay, this.$packageW, this.$packageH, $g[1], $g[37], 0)
				this.$pDownB[this.$i]=new Ellipse($g[0], 0, 0, $g[3], $g[29], this.$Ax+80, this.$Ay, 0, 0, this.$packageW+(this.$boxOffsetX*2), this.$packageH+(this.$boxOffsetY*2))
				this.$pDown[this.$i]=new Rectangle2($g[0], 0, 0, $g[3], $g[29], this.$Ax+80, this.$Ay, this.$packageW, this.$packageH, $g[1], $g[37], 0)
				this.$pUpB[this.$i].setOpacity(0)
				this.$pDownB[this.$i].setOpacity(0)
				this.$pUp[this.$i].setOpacity(0)
				this.$pDown[this.$i].setOpacity(0)
			}
		}
	}
	p2pLink.prototype = Object.create(VObj.prototype)

	function CPU(_x, _y, _cpuNo) {
		VObj.call(this)
		this.$x=_x
		this.$y=_y
		this.$cpuNo=_cpuNo
		this.$w=400
		this.$gap=15
		this.$h=700
		this.$h2=this.$h/17
		this.$w2=this.$w-(2*this.$gap)
		this.$cacheLineFound=-1
		this.$repliesReturned=0
		this.$memoryAccessComplete=0
		this.$cancelMemoryAccess=0
		this.$cpuLock=0
		this.$tempQueue=new Queue()
		this.$cpuMemory
		this.$cpuCache
		this.$cpuDataLines
		this.$cpuDataLines2
		this.$cpuDialogBox
		this.$READ=0
		this.$WRITE=1
		this.$ReadOrWrite=this.$READ
		this.$brushTemp=new SolidBrush(rgba(1, 1, 150/255))
		this.$r=new Rectangle2($g[0], 0, 0, $g[1], this.$brushTemp, this.$x-20, this.$y, this.$w+40, this.$h+80)
		this.$invalidating=-1
		this.$cpuRestart=0
		this.$mesifUpdateMemory=0
		this.$currentProcess=-1
		this.$writeConflictQueue=newArray(2)
		this.$writeConflictQueue[0]=new Queue()
		this.$writeConflictQueue[1]=new Queue()
		this.$conflictQueue=newArray(2)
		this.$conflictQueue[0]=new Queue()
		this.$conflictQueue[1]=new Queue()
		this.$readCycle=-1
		this.$probeCycle=-1
		this.$readConflict=-1
		this.$probeConflict=-1
		this.$waitingOnHomeNodeAck=newArray(20)
		this.$mesifWrite=0
		this.$conflict=0
		this.$isCpuWriting=0
		this.$lineModified=0
		this.$conflicts=""
		for ($g[65]=0; $g[65]<20; $g[65]++) {
			this.$waitingOnHomeNodeAck[$g[65]]=0
		}
		this.$t=new Txt($g[0], 0, HLEFT|VTOP, this.$x-140, this.$y-80, $g[3], $g[36], "CPU %d", this.$cpuNo)
		this.$cpuMemory=new this.$Memory(this)
		this.$cpuCache=new this.$Cache(this)
		this.$cpuDataLines=new this.$DataLines(this, this.$x+this.$w2*0.29999999999999999, this.$y+this.$h*0.42099999999999999)
		this.$cpuDataLines2=new this.$DataLines(this, this.$x+this.$w2*0.29999999999999999, this.$y+this.$h*0.68000000000000005)
		this.$cpuDialogBox=new this.$DialogBox(this)
		this.$r=new Rectangle2($g[0], 0, 0, $g[1], $g[29], this.$x+this.$gap, this.$y+this.$h*0.68400000000000005, this.$w2, this.$h*0.40000000000000002)
		this.$tempAddress=0
		for ($g[65]=0; $g[65]<4; $g[65]++) {
			for (this.$j=0; this.$j<NCPU; this.$j++) {
				new this.$RWButton(this, this.$x+this.$gap*2.5+this.$j*(this.$h2*1.25+this.$gap), this.$y+this.$h*0.68400000000000005+this.$gap+$g[65]*(this.$h2*1.25+this.$gap), this.$h2*1.25, this.$h2*1.25, this.$tempAddress)
				this.$tempAddress++
			}
		}
	}
	CPU.prototype = Object.create(VObj.prototype)

	CPU.prototype.$Memory = function($parent) {
		this.parent = $parent
		VObj.call(this)
		this.$mem=newArray(4)
		this.$stale=newArray(4)
		this.$r=new Rectangle2($g[0], 0, 0, $g[1], $g[29], this.parent.$x+this.parent.$gap, this.parent.$y+this.parent.$gap, this.parent.$w2, this.parent.$gap+this.parent.$h2*4.75)
		this.$memR=newArray(4)
		this.$memRTxt=newArray(4)
		for (this.$i=0; this.$i<4; this.$i++) {
			this.parent = $parent
			this.$mem[this.$i]=0
			this.$memR[this.$i]=new Rectangle2($g[0], 0, 0, $g[1], $g[40][this.parent.$cpuNo], this.parent.$x+2*this.parent.$gap, this.parent.$y+2*this.parent.$gap+(this.parent.$h2+this.parent.$gap/2)*this.$i, this.parent.$w2-this.parent.$gap*2, this.parent.$h2)
			this.$memRTxt[this.$i]=new Rectangle2($g[0], 0, 0, 0, 0, this.parent.$x+2*this.parent.$gap, this.parent.$y+2*this.parent.$gap+(this.parent.$h2+this.parent.$gap/2)*this.$i, this.parent.$w2-this.parent.$gap*2, this.parent.$h2, $g[1], $g[38], "addr:a%d data:%d", this.parent.$cpuNo+this.$i*5, this.$mem[this.$i])
		}
	}
	CPU.prototype.$Memory.prototype = Object.create(VObj.prototype)

	CPU.prototype.$Memory.prototype.$highlight = function(addr, flag) {
		this.$memR[addr].setBrush((flag) ? $g[40][this.parent.$cpuNo] : $g[41][this.parent.$cpuNo])
	}

	CPU.prototype.$Memory.prototype.$reset = function() {
		for (let i=0; i<4; i++) {
			this.$mem[i]=0
			this.$stale[i]=0
		}
	}

	CPU.prototype.$Cache = function($parent) {
		this.parent = $parent
		VObj.call(this)
		this.$state=newArray(2)
		this.$content=newArray(2)
		this.$addr=newArray(2)
		this.$stateR=newArray(2)
		this.$stateRTxt=newArray(2)
		this.$aR=newArray(2)
		this.$aRTxt=newArray(2)
		this.$dR=newArray(2)
		this.$dRTxt=newArray(2)
		this.$r=new Rectangle2($g[0], 0, 0, $g[1], $g[29], this.parent.$x+this.parent.$gap, this.parent.$y+this.parent.$h*0.42099999999999999, this.parent.$w2, (this.parent.$h2+this.parent.$gap)*2)
		for (this.$i=0; this.$i<2; this.$i++) {
			this.parent = $parent
			this.$state[this.$i]=INVALID
			this.$content[this.$i]=0
			this.$addr[this.$i]=-1
			this.$stateR[this.$i]=new Rectangle2($g[0], 0, 0, $g[1], $g[17], this.parent.$x+this.parent.$gap*2, this.parent.$y+this.parent.$h*0.42099999999999999+this.parent.$gap+this.$i*this.parent.$h2, this.parent.$w2*0.10000000000000001, this.parent.$h2)
			this.$stateRTxt[this.$i]=new Rectangle2($g[0], 0, 0, 0, 0, this.parent.$x+this.parent.$gap*2, this.parent.$y+this.parent.$h*0.42099999999999999+this.parent.$gap+this.$i*this.parent.$h2, this.parent.$w2*0.10000000000000001, this.parent.$h2, $g[1], $g[38], "I")
			this.$aR[this.$i]=new Rectangle2($g[0], 0, 0, $g[1], $g[17], this.parent.$x+this.parent.$gap*2+this.parent.$w2*0.10000000000000001, this.parent.$y+this.parent.$h*0.42099999999999999+this.parent.$gap+this.$i*this.parent.$h2, this.parent.$w2*0.40999999999999998, this.parent.$h2)
			this.$aRTxt[this.$i]=new Rectangle2($g[0], 0, 0, 0, 0, this.parent.$x+this.parent.$gap*2+this.parent.$w2*0.10000000000000001, this.parent.$y+this.parent.$h*0.42099999999999999+this.parent.$gap+this.$i*this.parent.$h2, this.parent.$w2*0.40999999999999998, this.parent.$h2, $g[1], $g[31], "")
			this.$dR[this.$i]=new Rectangle2($g[0], 0, 0, $g[1], $g[17], this.parent.$x+this.parent.$gap*2+this.parent.$w2*0.51000000000000001, this.parent.$y+this.parent.$h*0.42099999999999999+this.parent.$gap+this.$i*this.parent.$h2, this.parent.$w2*0.40999999999999998, this.parent.$h2)
			this.$dRTxt[this.$i]=new Rectangle2($g[0], 0, 0, 0, 0, this.parent.$x+this.parent.$gap*2+this.parent.$w2*0.51000000000000001, this.parent.$y+this.parent.$h*0.42099999999999999+this.parent.$gap+this.$i*this.parent.$h2, this.parent.$w2*0.40999999999999998, this.parent.$h2, $g[1], $g[31], "")
		}
	}
	CPU.prototype.$Cache.prototype = Object.create(VObj.prototype)

	CPU.prototype.$Cache.prototype.$highlight = function(cacheLine, flag) {
		this.$stateR[cacheLine].setBrush((flag) ? $g[17] : $g[19])
		this.$aR[cacheLine].setBrush((flag) ? $g[17] : $g[19])
		this.$dR[cacheLine].setBrush((flag) ? $g[17] : $g[19])
	}

	CPU.prototype.$Cache.prototype.$reset = function() {
		for (let i=0; i<2; i++) {
			this.$state[i]=INVALID
			this.$content[i]=0
			this.$addr[i]=-1
		}
	}

	CPU.prototype.$DataLines = function($parent, _xpos, _ypos) {
		this.parent = $parent
		VObj.call(this)
		this.$xpos=_xpos
		this.$ypos=_ypos
		this.$bodyWidth=5
		this.$aWidth=12
		this.$l=60
		this.$arrow1=new Polygon($g[0], 0, ABSOLUTE, 0, $g[16], this.$xpos, this.$ypos, 0, 0, -this.$aWidth, -this.$aWidth, -this.$bodyWidth, -this.$aWidth, -this.$bodyWidth, -this.$l, -this.$aWidth, -this.$l, 0, -this.$l-this.$aWidth, this.$aWidth, -this.$l, this.$bodyWidth, -this.$l, this.$bodyWidth, -this.$aWidth, this.$aWidth, -this.$aWidth)
		this.$arrow2=new Polygon($g[0], 0, ABSOLUTE, 0, $g[16], this.$xpos+this.parent.$h2*4, this.$ypos, 0, 0, -this.$aWidth, -this.$aWidth, -this.$bodyWidth, -this.$aWidth, -this.$bodyWidth, -this.$l, -this.$aWidth, -this.$l, 0, -this.$l-this.$aWidth, this.$aWidth, -this.$l, this.$bodyWidth, -this.$l, this.$bodyWidth, -this.$aWidth, this.$aWidth, -this.$aWidth)
		this.$body1=new Rectangle2($g[0], 0, 0, 0, $g[20], this.$xpos-this.$bodyWidth, this.$ypos, 2*this.$bodyWidth, -this.$l)
		this.$body2=new Rectangle2($g[0], 0, 0, 0, $g[18], this.$xpos-this.$bodyWidth+this.parent.$h2*4, this.$ypos-this.$aWidth, 2*this.$bodyWidth, -this.$l)
		this.$up=new Polygon($g[0], 0, ABSOLUTE, 0, $g[20], this.$xpos-this.$aWidth, this.$ypos, 0, 0, this.$aWidth, -10, 2*this.$aWidth, 0)
		this.$down=new Polygon($g[0], 0, ABSOLUTE, 0, $g[18], this.$xpos+this.parent.$h2*4, this.$ypos-this.$l, 0, 0, -this.$aWidth, -10, this.$aWidth, -10)
		this.$up.setOpacity(0)
		this.$down.setOpacity(0)
		this.$body1.setOpacity(0)
		this.$body2.setOpacity(0)
	}
	CPU.prototype.$DataLines.prototype = Object.create(VObj.prototype)

	CPU.prototype.$DataLines.prototype.$reset = function() {
		this.$up.setOpacity(0)
		this.$body1.setOpacity(0)
		this.$down.setOpacity(0)
		this.$body2.setOpacity(0)
		this.$arrow1.setOpacity(255)
		this.$arrow2.setOpacity(255)
	}

	CPU.prototype.$DialogBox = function($parent) {
		this.parent = $parent
		VObj.call(this)
		this.$x1=this.parent.$x-20
		this.$x2=this.$x1+440
		this.$y1=this.parent.$y+570
		this.$w=420
		this.$h=150
		this.$h2=40
		this.$boxLock=0
		this.$t1x=50
		this.$t1y=this.$y1-135
		this.$t2x=40
		this.$t2y=this.$y1-40
		this.$processTxtBox1=new Rectangle2($g[0], 0, 0, $g[1], $g[30], this.$t1x+this.$x1, this.$t1y, this.$w-70, this.$h-80, $g[1], $g[38], "")
		this.$processTxtBox1.moveToBack()
		this.$processTxtBox2=new Rectangle2($g[0], 0, 0, $g[1], $g[30], this.$t2x+this.$x1, this.$t2y, this.$w-40, this.$h+65, $g[1], $g[39], "")
		this.$processTxtBox2.moveToBack()
		this.$processContainer=new Polygon($g[0], 0, 0, $g[1], $g[29], this.$x1, this.$y1, 0, 0, 20, 0, 0, -this.$h, this.$w, 0, 0, this.$h*2+this.$h2, -this.$w, 0, 0, -this.$h, -20, 0)
		this.$processContainer.moveToBack()
		this.$ticksLocal=TICKS
		this.$boxOut=0
		this.$processContainer.addEventHandler("eventEE", this, this.$eh2)
		this.$processContainer.addEventHandler("eventMB", this, 118)
	}
	CPU.prototype.$DialogBox.prototype = Object.create(VObj.prototype)

	CPU.prototype.$DialogBox.prototype.$eh2 = function(enter, $1, $2) {
		if (this.$boxOut==1) {
			this.$processContainer.setBrush(enter ? $g[27] : $g[29])
			this.$processTxtBox1.setBrush(enter ? $g[29] : $g[30])
			this.$processTxtBox2.setBrush(enter ? $g[29] : $g[30])
		}
	}

	CPU.prototype.$DialogBox.prototype.$setCurrentTask = function(msg) {
		this.$processTxtBox2.setTxt(msg)
	}

	CPU.prototype.$DialogBox.prototype.$setTitle = function(msg) {
		this.$processTxtBox1.setTxt(msg)
	}

	CPU.prototype.$RWButton = function($parent, _x, _y, _w, _h, _addr) {
		this.parent = $parent
		VObj.call(this)
		this.$x=_x
		this.$y=_y
		this.$w=_w
		this.$h=_h
		this.$addr=_addr
		this.$background=new Rectangle2($g[0], 0, 0, $g[1], $g[40][this.$addr%NCPU], this.$x, this.$y, this.$w, this.$h, $g[1], 0)
		this.$buttonTxt=new Txt($g[0], 0, 0, this.$x+this.$w/2, this.$y+this.$h/2, $g[1], 0, "A%d", this.$addr)
		this.$readButton=new Polygon($g[0], 0, ABSOLUTE, $g[1], $g[40][this.$addr%NCPU], this.$x, this.$y, 0, 0, this.$w, 0, 0, this.$h)
		this.$writeButton=new Polygon($g[0], 0, ABSOLUTE, $g[1], $g[40][this.$addr%NCPU], this.$x, this.$y+this.$h, 0, 0, this.$w, 0, this.$w, -this.$h)
		this.$rtxt=new Txt($g[0], 0, HLEFT|VTOP, this.$x, this.$y, $g[1], 0, "R")
		this.$wtxt=new Txt($g[0], 0, HRIGHT|VBOTTOM, this.$x+this.$w, this.$y+this.$h, $g[1], 0, "W")
		this.$readButton.setOpacity(0)
		this.$writeButton.setOpacity(0)
		this.$wtxt.setOpacity(0)
		this.$rtxt.setOpacity(0)
		this.$inUse=0
		this.$background.addEventHandler("eventEE", this, this.$eh4)
		this.$readButton.addEventHandler("eventEE", this, this.$eh5)
		this.$writeButton.addEventHandler("eventEE", this, this.$eh6)
		this.$readButton.addEventHandler("eventMB", this, 241)
		this.$writeButton.addEventHandler("eventMB", this, 244)
	}
	CPU.prototype.$RWButton.prototype = Object.create(VObj.prototype)

	CPU.prototype.$RWButton.prototype.$eh4 = function(enter, $1, $2) {
		if (this.$inUse==0) {
			this.$readButton.setOpacity(enter ? 1 : 0)
			this.$writeButton.setOpacity(enter ? 1 : 0)
			this.$rtxt.setOpacity(enter ? 1 : 0)
			this.$wtxt.setOpacity(enter ? 1 : 0)
		}
	}

	CPU.prototype.$RWButton.prototype.$eh5 = function(enter, $1, $2) {
		if (this.$inUse==0) {
			this.$readButton.setBrush(enter ? $g[41][this.$addr%NCPU] : $g[40][this.$addr%NCPU])
		}
	}

	CPU.prototype.$RWButton.prototype.$eh6 = function(enter, $1, $2) {
		if (this.$inUse==0) {
			this.$writeButton.setBrush(enter ? $g[41][this.$addr%NCPU] : $g[40][this.$addr%NCPU])
		}
	}

	function $execute(thread) {

		$switchToThread(thread);

		while (1) {
			switch ($pc) {
			case -1:
				return;		// catch thread termination
			case 0:
				$enter(0)	// start with a function call
				$g[1]=new SolidPen(0, 0, BLACK)
				$g[2]=new SolidPen(0, 0, WHITE)
				$g[3]=new SolidPen(0, 0, RED)
				$g[4]=new SolidPen(0, 0, GREEN)
				$g[5]=new SolidPen(0, 0, BLUE)
				$g[6]=new SolidPen(0, 0, YELLOW)
				$g[7]=new SolidPen(0, 0, MAGENTA)
				$g[8]=new SolidPen(0, 0, CYAN)
				$g[9]=new SolidPen(0, 0, GRAY32)
				$g[10]=new SolidPen(0, 0, GRAY64)
				$g[11]=new SolidPen(0, 0, GRAY96)
				$g[12]=new SolidPen(0, 0, GRAY128)
				$g[13]=new SolidPen(0, 0, GRAY160)
				$g[14]=new SolidPen(0, 0, GRAY192)
				$g[15]=new SolidPen(0, 0, GRAY224)
				$g[16]=new SolidBrush(BLACK)
				$g[17]=new SolidBrush(WHITE)
				$g[18]=new SolidBrush(RED)
				$g[19]=new SolidBrush(GREEN)
				$g[20]=new SolidBrush(BLUE)
				$g[21]=new SolidBrush(YELLOW)
				$g[22]=new SolidBrush(MAGENTA)
				$g[23]=new SolidBrush(CYAN)
				$g[24]=new SolidBrush(GRAY32)
				$g[25]=new SolidBrush(GRAY64)
				$g[26]=new SolidBrush(GRAY96)
				$g[27]=new SolidBrush(GRAY128)
				$g[28]=new SolidBrush(GRAY160)
				$g[29]=new SolidBrush(GRAY192)
				$g[30]=new SolidBrush(GRAY224)
				setVirtualWindow(0, 0, W, H, 1)
				setTPS(20)
				$g[31]=new Font("Calibri", 50)
				$g[32]=new Font("Calibri", 40)
				$g[33]=new Font("Calibri", 14, 0)
				$g[34]=new Font("Calibri", 50, 0)
				$g[35]=new Font("Calibri", 40, 0)
				$g[36]=new Font("Calibri", 60, 0)
				$g[37]=new Font("Calibri", 30, 0)
				$g[38]=new Font("Calibri", 40, 0)
				$g[39]=new Font("Calibri", 40, 0)
				$g[40]=newArray(5)
				$g[41]=newArray(5)
				$g[40][0]=new SolidBrush(rgba(1, 1, 0.59999999999999998))
				$g[40][1]=new SolidBrush(rgba(1, 0.69999999999999996, 0.69999999999999996))
				$g[40][2]=new SolidBrush(rgba(0.69999999999999996, 1, 0.69999999999999996))
				$g[40][3]=new SolidBrush(rgba(0.59999999999999998, 0.69999999999999996, 1))
				$g[40][4]=new SolidBrush(rgba(1, 0.80000000000000004, 0.20000000000000001))
				$g[41][0]=new SolidBrush(rgba(1, 1, 0))
				$g[41][1]=new SolidBrush(rgba(0.80000000000000004, 0, 0))
				$g[41][2]=new SolidBrush(rgba(0, 1, 0))
				$g[41][3]=new SolidBrush(rgba(0, 0, 1))
				$g[41][4]=new SolidBrush(rgba(1, 0.69999999999999996, 0))
				$g[42]=new SolidBrush(rgba(0, 0, 0.40000000000000002))
				setBgBrush($g[30])
				$g[43]=0
				$g[45]=newArray(20)
				$g[44]=0
				$pc = 1
			case 1:
				if (!($g[44]<20)) {
					$pc = 3
					continue
				}
				$g[45][$g[44]]=0
				$pc = 2
			case 2:
				$g[44]++
				$pc = 1
				continue
			case 3:
				$g[46]=50
				$g[47]=new Rectangle2($g[0], 0, 0, $g[1], $g[17], W-920+$g[46]*2, 450, 520, 600)
				$g[48]=new Rectangle2($g[0], 0, VCENTRE, 0, $g[42], W-1500+$g[46]*2, 100, 1000, 250, $g[2], $g[36], "MESIF Cache Coherency Protocol")
				$g[48].setTxtOff(2, 1)
				$g[49]="Packet Information\n"
				$g[50]="READ-Read from memory\n            request\n"
				$g[50]+="CNCL-Cancel memory\n            access\n"
				$g[50]+="ACK-acknowledge to\n            remove Lock\n"
				$g[50]+="PR-Probe\n"
				$g[50]+="PRI-Probe invalidate\n"
				$g[50]+="FL-Flush\n"
				$g[50]+="FLA-Flush acknowledge\n"
				$g[50]+="DataX-data in state X\n"
				$g[51]=new Txt($g[0], 0, HLEFT|VTOP, W-890+$g[46]*2, 450, $g[3], $g[34], $g[49])
				$g[52]=new Txt($g[0], 0, HLEFT|VTOP, W-860+$g[46]*2, 520, $g[1], $g[35], $g[50])
				$g[53]=0
				$g[54]=newArray(5)
				$g[55]=newArray(20)
				$g[56]=newArray(20)
				$g[57]=newArray(20)
				$g[58]=newArray(20)
				$g[59]=newArray(20)
				$g[60]=newArray(20)
				$g[61]=newArray(20)
				$g[62]=newArray(20)
				$g[63]=newArray(20)
				$g[64]=newArray(20)
				$g[65]=0
				$pc = 4
			case 4:
				if (!($g[65]<20)) {
					$pc = 6
					continue
				}
				$g[56][$g[65]]=new Queue()
				$g[57][$g[65]]=new Queue()
				$g[62][$g[65]]=0
				$g[55][$g[65]]=0
				$g[63][$g[65]]=-1
				$g[59][$g[65]]=new Queue()
				$g[64][$g[65]]=0
				$g[61][$g[65]]=new Queue()
				$g[60][$g[65]]=new Queue()
				$g[58][$g[65]]=new Queue()
				$pc = 5
			case 5:
				$g[65]++
				$pc = 4
				continue
			case 6:
				$g[66]=newArray(NCPU)
				$g[67]=newArray(NCPU)
				$g[68]=newArray(NCPU)
				$g[65]=0
				$pc = 7
			case 7:
				if (!($g[65]<NCPU)) {
					$pc = 9
					continue
				}
				$g[66][$g[65]]=0
				$g[67][$g[65]]=0
				$g[68][$g[65]]=0
				$g[54][$g[65]]=0
				$pc = 8
			case 8:
				$g[65]++
				$pc = 7
				continue
			case 9:
				$g[69]=newArray(5)
				$g[69][0]=new p2pLink(471+$g[46]*2, 285+$g[46], 709, 0, 1, 0, 0)
				$g[69][1]=new p2pLink(90+$g[46]*2, 828+$g[46], 370, 0, 2, 1, 1)
				$g[69][2]=new p2pLink(1250+$g[46]*2, 828+$g[46], 370, 1, 3, 1, 2)
				$g[69][3]=new p2pLink(471+$g[46]*2, 1450+$g[46], 709, 2, 3, 0, 3)
				$g[69][4]=new p2pLink(1619+$g[46]*2, 1450+$g[46], 709, 3, 4, 0, 4)
				$g[70]=newArray(NCPU)
				$g[70][0]=new CPU(50+$g[46]*2, 50+$g[46], 0)
				$g[70][1]=new CPU(1200+$g[46]*2, 50+$g[46], 1)
				$g[70][2]=new CPU(50+$g[46]*2, 1200+$g[46], 2)
				$g[70][3]=new CPU(1200+$g[46]*2, 1200+$g[46], 3)
				$g[70][4]=new CPU(2349+$g[46]*2, 1200+$g[46], 4)
				$g[71]=new SimpleButton($g[0], W-215, H-75, 160, 60, $g[30], $g[29], $g[3], $g[4], $g[1], $g[31], $g[32], "Reset")
				$g[71].addEventHandler("eventMB", $obj, 321)
				$return(0)
				continue
			case 10:
				$enter(1);	// packetUp
				$obj.$pUpB[$obj.$currentPacketUpNo].setOpacity(255)
				$obj.$pUpB[$obj.$currentPacketUpNo].setBrush($stack[$fp-5])
				$obj.$pUp[$obj.$currentPacketUpNo].setOpacity(255)
				$obj.$pUp[$obj.$currentPacketUpNo].setBrush($stack[$fp-6])
				$stack[$fp+1]=sprintf("%d", $stack[$fp-7])
				$stack[$fp+1]=$stack[$fp-8]+$stack[$fp+1]
				$obj.$pUp[$obj.$currentPacketUpNo].setTxt($stack[$fp+1])
				if (!($obj.$orientation==0)) {
					$pc = 13
					continue
				}
				$obj.$pUpB[$obj.$currentPacketUpNo].setPos($obj.$Ax-$obj.$packageW-2*$obj.$boxOffsetX, $obj.$Ay-$obj.$packageH/2-$obj.$boxOffsetY)
				$obj.$pUp[$obj.$currentPacketUpNo].setPos($obj.$Ax-$obj.$packageW-$obj.$boxOffsetX, $obj.$Ay-$obj.$packageH/2)
				$pc = 11
				if ($obj.$pUpB[$obj.$currentPacketUpNo].setPos($obj.$Ax+$obj.$l, $obj.$Ay-$obj.$packageH/2-$obj.$boxOffsetY, $stack[$fp-3], $stack[$fp-4])) {
					return
				}
			case 11:
				$pc = 12
				if ($obj.$pUp[$obj.$currentPacketUpNo].setPos($obj.$Ax+$obj.$l+$obj.$boxOffsetX, $obj.$Ay-$obj.$packageH/2, $stack[$fp-3], $stack[$fp-4])) {
					return
				}
			case 12:
				$pc = 15
				continue
			case 13:
				$obj.$pUpB[$obj.$currentPacketUpNo].setPos($obj.$Ax-$obj.$boxOffsetX, $obj.$Ay-$obj.$packageH-$obj.$boxOffsetY)
				$obj.$pUp[$obj.$currentPacketUpNo].setPos($obj.$Ax, $obj.$Ay-$obj.$packageH)
				$pc = 14
				if ($obj.$pUp[$obj.$currentPacketUpNo].setPos($obj.$Ax, $obj.$Ay+$obj.$l+$obj.$boxOffsetY, $stack[$fp-3], $stack[$fp-4])) {
					return
				}
			case 14:
				$pc = 15
			case 15:
				$return(6)
				continue
			case 16:
				$enter(1);	// packetDown
				$obj.$pDownB[$obj.$currentPacketDownNo].setOpacity(255)
				$obj.$pDownB[$obj.$currentPacketDownNo].setBrush($stack[$fp-5])
				$obj.$pDown[$obj.$currentPacketDownNo].setOpacity(255)
				$obj.$pDown[$obj.$currentPacketDownNo].setBrush($stack[$fp-6])
				$stack[$fp+1]=sprintf("%d", $stack[$fp-7])
				$stack[$fp+1]=$stack[$fp-8]+$stack[$fp+1]
				$obj.$pDown[$obj.$currentPacketDownNo].setTxt($stack[$fp+1])
				if (!($obj.$orientation==0)) {
					$pc = 18
					continue
				}
				$obj.$pDownB[$obj.$currentPacketDownNo].setPos($obj.$Ax+$obj.$l+$obj.$boxOffsetX, $obj.$Ay-$obj.$packageH/2+$obj.$yGap-$obj.$boxOffsetY)
				$obj.$pDown[$obj.$currentPacketDownNo].setPos($obj.$Ax+$obj.$l+2*$obj.$boxOffsetX, $obj.$Ay-$obj.$packageH/2+$obj.$yGap)
				$pc = 17
				if ($obj.$pDown[$obj.$currentPacketDownNo].setPos($obj.$Ax-$obj.$packageW-$obj.$boxOffsetX, $obj.$Ay-$obj.$packageH/2+$obj.$yGap, $stack[$fp-3], $stack[$fp-4])) {
					return
				}
			case 17:
				$pc = 20
				continue
			case 18:
				$obj.$pDownB[$obj.$currentPacketDownNo].setPos($obj.$Ax+$obj.$xGap-$obj.$boxOffsetX, $obj.$Ay+$obj.$l)
				$obj.$pDown[$obj.$currentPacketDownNo].setPos($obj.$Ax+$obj.$xGap, $obj.$Ay+$obj.$l+$obj.$boxOffsetY)
				$pc = 19
				if ($obj.$pDown[$obj.$currentPacketDownNo].setPos($obj.$Ax+$obj.$xGap, $obj.$Ay-$obj.$packageH-$obj.$boxOffsetY, $stack[$fp-3], $stack[$fp-4])) {
					return
				}
			case 19:
				$pc = 20
			case 20:
				$return(6)
				continue
			case 21:
				$enter(0);	// linkPathUp
				$pc = 22
			case 22:
				if (!($g[66][$stack[$fp-3]]==1)) {
					$pc = 24
					continue
				}
				$pc = 23
				if (wait(1)) {
					return
				}
			case 23:
				$pc = 22
				continue
			case 24:
				$g[66][$stack[$fp-3]]=1
				$call(10, $g[69][$stack[$fp-3]], TICKS*2, $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8])
				continue
			case 25:
				$pc = 26
				if (wait(TICKS*2)) {
					return
				}
			case 26:
				$g[66][$stack[$fp-3]]=0
				$return(6)
				continue
			case 27:
				$enter(0);	// linkPathDown
				$pc = 28
			case 28:
				if (!($g[67][$stack[$fp-3]]==1)) {
					$pc = 30
					continue
				}
				$pc = 29
				if (wait(1)) {
					return
				}
			case 29:
				$pc = 28
				continue
			case 30:
				$g[67][$stack[$fp-3]]=1
				$call(16, $g[69][$stack[$fp-3]], TICKS*2, $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8])
				continue
			case 31:
				$pc = 32
				if (wait(TICKS*2)) {
					return
				}
			case 32:
				$g[67][$stack[$fp-3]]=0
				$return(6)
				continue
			case 33:
				$enter(0);	// linkPath
				debug("linkPath, cpuA=%d cpuB=%d", $stack[$fp-3], $stack[$fp-4])
				if (!($stack[$fp-3]!=$stack[$fp-4])) {
					$pc = 78
					continue
				}
				if (!($stack[$fp-3]==0)) {
					$pc = 42
					continue
				}
				if (!($stack[$fp-4]==1||$stack[$fp-4]==3||$stack[$fp-4]==4)) {
					$pc = 39
					continue
				}
				$call(21, $obj, 0, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 34:
				if (!($stack[$fp-4]==3||$stack[$fp-4]==4)) {
					$pc = 36
					continue
				}
				$call(21, $obj, 2, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 35:
				$pc = 36
			case 36:
				if (!($stack[$fp-4]==4)) {
					$pc = 38
					continue
				}
				$call(21, $obj, 4, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 37:
				$pc = 38
			case 38:
				$pc = 39
			case 39:
				if (!($stack[$fp-4]==2)) {
					$pc = 41
					continue
				}
				$call(21, $obj, 1, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 40:
				$pc = 41
			case 41:
				$pc = 42
			case 42:
				if (!($stack[$fp-3]==1)) {
					$pc = 51
					continue
				}
				if (!($stack[$fp-4]==3||$stack[$fp-4]==4)) {
					$pc = 46
					continue
				}
				$call(21, $obj, 2, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 43:
				if (!($stack[$fp-4]==4)) {
					$pc = 45
					continue
				}
				$call(21, $obj, 4, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 44:
				$pc = 45
			case 45:
				$pc = 46
			case 46:
				if (!($stack[$fp-4]==0||$stack[$fp-4]==2)) {
					$pc = 50
					continue
				}
				$call(27, $obj, 0, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 47:
				if (!($stack[$fp-4]==2)) {
					$pc = 49
					continue
				}
				$call(21, $obj, 1, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 48:
				$pc = 49
			case 49:
				$pc = 50
			case 50:
				$pc = 51
			case 51:
				if (!($stack[$fp-3]==2)) {
					$pc = 60
					continue
				}
				if (!($stack[$fp-4]==3||$stack[$fp-4]==4)) {
					$pc = 55
					continue
				}
				$call(21, $obj, 3, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 52:
				if (!($stack[$fp-4]==4)) {
					$pc = 54
					continue
				}
				$call(21, $obj, 4, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 53:
				$pc = 54
			case 54:
				$pc = 55
			case 55:
				if (!($stack[$fp-4]==0||$stack[$fp-4]==1)) {
					$pc = 59
					continue
				}
				$call(27, $obj, 1, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 56:
				if (!($stack[$fp-4]==1)) {
					$pc = 58
					continue
				}
				$call(21, $obj, 0, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 57:
				$pc = 58
			case 58:
				$pc = 59
			case 59:
				$pc = 60
			case 60:
				if (!($stack[$fp-3]==3)) {
					$pc = 69
					continue
				}
				if (!($stack[$fp-4]==1||$stack[$fp-4]==0)) {
					$pc = 64
					continue
				}
				$call(27, $obj, 2, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 61:
				if (!($stack[$fp-4]==0)) {
					$pc = 63
					continue
				}
				$call(27, $obj, 0, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 62:
				$pc = 63
			case 63:
				$pc = 64
			case 64:
				if (!($stack[$fp-4]==4)) {
					$pc = 66
					continue
				}
				$call(21, $obj, 4, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 65:
				$pc = 66
			case 66:
				if (!($stack[$fp-4]==2)) {
					$pc = 68
					continue
				}
				$call(27, $obj, 3, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 67:
				$pc = 68
			case 68:
				$pc = 69
			case 69:
				if (!($stack[$fp-3]==4)) {
					$pc = 77
					continue
				}
				$call(27, $obj, 4, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 70:
				if (!($stack[$fp-4]==1||$stack[$fp-4]==0)) {
					$pc = 74
					continue
				}
				$call(27, $obj, 2, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 71:
				if (!($stack[$fp-4]==0)) {
					$pc = 73
					continue
				}
				$call(27, $obj, 0, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 72:
				$pc = 73
			case 73:
				$pc = 74
			case 74:
				if (!($stack[$fp-4]==2)) {
					$pc = 76
					continue
				}
				$call(27, $obj, 3, $stack[$fp-5], $stack[$fp-6], $stack[$fp-7], $stack[$fp-8], $stack[$fp-9])
				continue
			case 75:
				$pc = 76
			case 76:
				$pc = 77
			case 77:
				$pc = 78
			case 78:
				$return(7)
				continue
			case 79:
				$enter(0);	// moveUp
				$obj.$up.setPos($obj.$xpos-$obj.$aWidth, $obj.$ypos)
				$obj.$body1.setPos($obj.$xpos-$obj.$bodyWidth, $obj.$ypos)
				$obj.$body1.setSz(2*$obj.$bodyWidth, 0)
				$obj.$up.setOpacity(255)
				$obj.$body1.setOpacity(255)
				$obj.$up.setPos($obj.$xpos-$obj.$aWidth, $obj.$ypos-$obj.$l, $stack[$fp-3], 0)
				$obj.$body1.setSz(2*$obj.$bodyWidth, -$obj.$l, $stack[$fp-3], 0)
				$pc = 80
				if ($obj.$arrow1.setOpacity(0, $stack[$fp-3], $stack[$fp-4])) {
					return
				}
			case 80:
				$return(2)
				continue
			case 81:
				$enter(0);	// moveDown
				$obj.$down.setPos($obj.$xpos+$obj.parent.$h2*4, $obj.$ypos-$obj.$l)
				$obj.$body2.setPos($obj.$xpos-$obj.$bodyWidth+$obj.parent.$h2*4, $obj.$ypos-$obj.$l-10)
				$obj.$body2.setSz(2*$obj.$bodyWidth, 0)
				$obj.$down.setOpacity(255)
				$obj.$body2.setOpacity(255)
				$obj.$body2.setSz(2*$obj.$bodyWidth, $obj.$l, $stack[$fp-3], 0)
				$obj.$down.setPos($obj.$xpos+$obj.parent.$h2*4, $obj.$ypos, $stack[$fp-3], 0)
				$pc = 82
				if ($obj.$arrow2.setOpacity(0, $stack[$fp-3], $stack[$fp-4])) {
					return
				}
			case 82:
				$return(2)
				continue
			case 83:
				$enter(0);	// cpu0path
				$call(33, $obj, 0, 1, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 84:
				fork(256, $obj, $stack[$fp-3], 1, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$call(33, $obj, 1, 3, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 85:
				fork(256, $obj, $stack[$fp-3], 3, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$call(33, $obj, 3, 4, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 86:
				fork(256, $obj, $stack[$fp-3], 4, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$return(5)
				continue
			case 87:
				$enter(0);	// cpu1path
				$call(33, $obj, 1, 3, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 88:
				fork(256, $obj, $stack[$fp-3], 3, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$call(33, $obj, 3, 4, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 89:
				fork(256, $obj, $stack[$fp-3], 4, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$return(5)
				continue
			case 90:
				$enter(0);	// cpu2path
				debug("cpu2Path")
				$call(33, $obj, 2, 0, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 91:
				fork(256, $obj, $stack[$fp-3], 0, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$call(33, $obj, 0, 1, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 92:
				fork(256, $obj, $stack[$fp-3], 1, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$return(5)
				continue
			case 93:
				$enter(0);	// cpu3path1
				$call(33, $obj, 3, 1, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 94:
				fork(256, $obj, $stack[$fp-3], 1, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$call(33, $obj, 1, 0, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 95:
				fork(256, $obj, $stack[$fp-3], 0, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$return(5)
				continue
			case 96:
				$enter(0);	// cpu3path2
				$call(33, $obj, 3, 2, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 97:
				fork(256, $obj, $stack[$fp-3], 2, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$return(5)
				continue
			case 98:
				$enter(0);	// cpu3path3
				$call(33, $obj, 3, 4, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 99:
				fork(256, $obj, $stack[$fp-3], 4, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$return(5)
				continue
			case 100:
				$enter(0);	// broadcast
				debug("broadcast cpuNo=%d addr=%d invalidate=%d flag=%d msg=%s", $stack[$fp-3], $stack[$fp-4], $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7])
				if (!($stack[$fp-3]==0)) {
					$pc = 102
					continue
				}
				fork(256, $obj, $stack[$fp-3], 0, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				fork(83, $obj, $stack[$fp-3], $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7])
				$call(33, $obj, 0, 2, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 101:
				fork(256, $obj, $stack[$fp-3], 2, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$pc = 102
			case 102:
				if (!($stack[$fp-3]==1)) {
					$pc = 105
					continue
				}
				fork(256, $obj, $stack[$fp-3], 1, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				fork(87, $obj, $stack[$fp-3], $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7])
				$call(33, $obj, 1, 0, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 103:
				fork(256, $obj, $stack[$fp-3], 0, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$call(33, $obj, 0, 2, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 104:
				fork(256, $obj, $stack[$fp-3], 2, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$pc = 105
			case 105:
				if (!($stack[$fp-3]==2)) {
					$pc = 108
					continue
				}
				debug("broadcast:20")
				fork(256, $obj, $stack[$fp-3], 2, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				fork(90, $obj, $stack[$fp-3], $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7])
				$call(33, $obj, 2, 3, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 106:
				fork(256, $obj, $stack[$fp-3], 3, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$call(33, $obj, 3, 4, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 107:
				fork(256, $obj, $stack[$fp-3], 4, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$pc = 108
			case 108:
				if (!($stack[$fp-3]==3)) {
					$pc = 109
					continue
				}
				fork(256, $obj, $stack[$fp-3], 3, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				fork(93, $obj, $stack[$fp-3], $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7])
				fork(96, $obj, $stack[$fp-3], $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7])
				fork(98, $obj, $stack[$fp-3], $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7])
				$pc = 109
			case 109:
				if (!($stack[$fp-3]==4)) {
					$pc = 111
					continue
				}
				fork(256, $obj, $stack[$fp-3], 4, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				$call(33, $obj, 4, 3, 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-4], $stack[$fp-7])
				continue
			case 110:
				fork(256, $obj, $stack[$fp-3], 3, $stack[$fp-4], $stack[$fp-6], $stack[$fp-5])
				fork(93, $obj, $stack[$fp-3], $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7])
				fork(96, $obj, $stack[$fp-3], $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7])
				$pc = 111
			case 111:
				$return(5)
				continue
			case 112:
				$enter(0);	// showPBox
				if (!($stack[$fp-4]==$obj.parent.$READ)) {
					$pc = 113
					continue
				}
				$obj.$processTxtBox1.setTxt("Read to a%d", $stack[$fp-5])
				$pc = 114
				continue
			case 113:
				$obj.$processTxtBox1.setTxt("Write to a%d", $stack[$fp-5])
				$pc = 114
			case 114:
				$obj.$processContainer.setPos($obj.$x2, $obj.$y1, $stack[$fp-3], 0)
				$obj.$processTxtBox1.setPos($obj.$x2+$obj.$t1x, $obj.$t1y, $stack[$fp-3], 0)
				$pc = 115
				if ($obj.$processTxtBox2.setPos($obj.$x2+$obj.$t2x, $obj.$t2y, $stack[$fp-3], 1)) {
					return
				}
			case 115:
				$obj.$boxOut=1
				$return(3)
				continue
			case 116:
				$enter(0);	// hidePBox
				$obj.$processContainer.setPos($obj.$x1, $obj.$y1, $stack[$fp-3], 0)
				$obj.$processTxtBox1.setPos($obj.$x1+$obj.$t1x, $obj.$t1y, $stack[$fp-3], 0)
				$pc = 117
				if ($obj.$processTxtBox2.setPos($obj.$x1+$obj.$t2x, $obj.$t2y, $stack[$fp-3], 1)) {
					return
				}
			case 117:
				$obj.$boxOut=0
				$return(1)
				continue
			case 118:
				$enter(0);	// $eh3
				if (!($stack[$fp-3]&&($obj.$boxOut==1)&&(($stack[$fp-4]&MB_LEFT)==0))) {
					$pc = 120
					continue
				}
				$obj.$boxOut=0
				start()
				$obj.$processContainer.setPos($obj.$x1, $obj.$y1, $obj.$ticksLocal, 0)
				$obj.$processTxtBox1.setPos($obj.$x1+$obj.$t1x, $obj.$t1y, $obj.$ticksLocal, 0)
				$pc = 119
				if ($obj.$processTxtBox2.setPos($obj.$x1+$obj.$t2x, $obj.$t2y, $obj.$ticksLocal, 1)) {
					return
				}
			case 119:
				$obj.$processContainer.setBrush($g[29])
				$obj.$processTxtBox1.setBrush($g[30])
				$obj.$processTxtBox2.setBrush($g[30])
				$pc = 120
			case 120:
				$return(4)
				continue
			case 121:
				$enter(0);	// accessMemory
				$pc = 122
			case 122:
				if (!($g[54][$stack[$fp-4]%NCPU]==1)) {
					$pc = 124
					continue
				}
				$pc = 123
				if (wait(1)) {
					return
				}
			case 123:
				$pc = 122
				continue
			case 124:
				$g[54][$stack[$fp-4]%NCPU]=1
				$call(79, $g[70][$stack[$fp-4]%NCPU].$cpuDataLines, TICKS*2, 1)
				continue
			case 125:
				$g[70][$stack[$fp-4]%NCPU].$cpuMemory.$highlight(($stack[$fp-4]/4)|0, 0)
				$g[70][$stack[$fp-4]%NCPU].$cpuMemory.$mem[($stack[$fp-4]/4)|0]=$stack[$fp-3]
				$g[70][$stack[$fp-4]%NCPU].$cpuMemory.$memRTxt[($stack[$fp-4]/4)|0].setTxt("Address:a%d Data:%d", $stack[$fp-4], $stack[$fp-3])
				$g[54][$stack[$fp-4]%NCPU]=0
				$return(2)
				continue
			case 126:
				$enter(0);	// ackRelease
				$call(33, $obj, $stack[$fp-3], $stack[$fp-4], 0, $g[40][$stack[$fp-3]], $g[40][$stack[$fp-3]], $stack[$fp-5], $stack[$fp-6])
				continue
			case 127:
				$g[70][$stack[$fp-4]].$waitingOnHomeNodeAck[$stack[$fp-5]]=0
				$return(4)
				continue
			case 128:
				$enter(4);	// mesif
				debug("mesif(addr=%d, doWrite=%d", $stack[$fp-3], $stack[$fp-4])
				if (!($obj.$cpuLock==0)) {
					$pc = 240
					continue
				}
				$obj.$cpuLock=1
				if (!($g[43]==0)) {
					$pc = 138
					continue
				}
				debug("here1")
				$stack[$fp+2]=0
				$pc = 129
			case 129:
				if (!($stack[$fp+2]<NCPU)) {
					$pc = 137
					continue
				}
				$obj.$j=0
				$pc = 130
			case 130:
				if (!($obj.$j<2)) {
					$pc = 132
					continue
				}
				$g[70][$stack[$fp+2]].$cpuCache.$highlight($obj.$j, 1)
				$pc = 131
			case 131:
				$obj.$j++
				$pc = 130
				continue
			case 132:
				$obj.$j=0
				$pc = 133
			case 133:
				if (!($obj.$j<4)) {
					$pc = 135
					continue
				}
				$g[70][$stack[$fp+2]].$cpuMemory.$highlight($obj.$j, 1)
				$pc = 134
			case 134:
				$obj.$j++
				$pc = 133
				continue
			case 135:
				$pc = 136
			case 136:
				$stack[$fp+2]++
				$pc = 129
				continue
			case 137:
				$pc = 138
			case 138:
				$g[43]++
				start()
				$obj.$conflicts=""
				$stack[$fp+1]=sprintf("Check Local Cache\nfor a Valid copy\nof a%d", $stack[$fp-3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 140
					continue
				}
				$call(112, $obj.$cpuDialogBox, 20, $obj.$WRITE, $stack[$fp-3])
				continue
			case 139:
				$pc = 142
				continue
			case 140:
				$call(112, $obj.$cpuDialogBox, 20, $obj.$READ, $stack[$fp-3])
				continue
			case 141:
				$pc = 142
			case 142:
				debug("mesif:1")
				$call(79, $obj.$cpuDataLines2, TICKS, 1)
				continue
			case 143:
				$stack[$fp+1]=sprintf("Waiting\nfor Acknowlegement\n to Continue a%d", $stack[$fp-3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$pc = 144
			case 144:
				if (!($obj.$waitingOnHomeNodeAck[$stack[$fp-3]]==1)) {
					$pc = 146
					continue
				}
				$pc = 145
				if (wait(1)) {
					return
				}
			case 145:
				$pc = 144
				continue
			case 146:
				debug("mesif:2")
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 147
					continue
				}
				$obj.$isCpuWriting=1
				$pc = 148
				continue
			case 147:
				$obj.$isCpuWriting=0
				$pc = 148
			case 148:
				$obj.$lineModified=0
				$obj.$probeCycle=1
				$obj.$readCycle=-1
				$obj.$readConflict=0
				$obj.$probeConflict=0
				$obj.$cacheLineFound=-1
				$obj.$memoryAccessComplete=0
				$obj.$cancelMemoryAccess=0
				$obj.$repliesReturned=0
				if (!($obj.$cpuCache.$addr[$stack[$fp-3]%2]!=$stack[$fp-3]&&$obj.$cpuCache.$state[$stack[$fp-3]%2]==MODIFIED)) {
					$pc = 152
					continue
				}
				debug("mesif:3")
				$obj.$waitingOnHomeNodeAck[$obj.$cpuCache.$addr[$stack[$fp-3]%2]]=1
				$stack[$fp+1]=sprintf("Flush a%d to\nHome Node %d", $obj.$cpuCache.$addr[$stack[$fp-3]%2], $obj.$cpuCache.$addr[$stack[$fp-3]%2]%NCPU)
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$g[63][$obj.$cpuCache.$addr[$stack[$fp-3]%2]]=-1
				$call(33, $obj, $obj.$cpuNo, $obj.$cpuCache.$addr[$stack[$fp-3]%2]%NCPU, 0, $g[40][$obj.$cpuNo], $g[40][$obj.$cpuNo], $stack[$fp-3], "FL:a")
				continue
			case 149:
				$call(121, $obj, $obj.$cpuCache.$content[$stack[$fp-3]%2], $obj.$cpuCache.$addr[$stack[$fp-3]%2])
				continue
			case 150:
				$stack[$fp+1]=sprintf("Home Node a%d\nresponds with a\nFlush\nAcknowledge", $obj.$cpuCache.$addr[$stack[$fp-3]%2]%NCPU)
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(33, $obj, $obj.$cpuCache.$addr[$stack[$fp-3]%2]%NCPU, $obj.$cpuNo, 0, $g[40][$obj.$cpuNo], $g[40][$obj.$cpuNo], $stack[$fp-3], "FA:a")
				continue
			case 151:
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=INVALID
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("I")
				$obj.$waitingOnHomeNodeAck[$obj.$cpuCache.$addr[$stack[$fp-3]%2]]=0
				$pc = 152
			case 152:
				if (!($obj.$cpuCache.$addr[$stack[$fp-3]%2]!=$stack[$fp-3]||$obj.$cpuCache.$state[$stack[$fp-3]%2]==INVALID||($obj.$cpuCache.$addr[$stack[$fp-3]%2]==$stack[$fp-3]&&$stack[$fp-4]==$obj.$WRITE&&($obj.$cpuCache.$state[$stack[$fp-3]%2]==SHARED||$obj.$cpuCache.$state[$stack[$fp-3]%2]==FORWARD)))) {
					$pc = 229
					continue
				}
				debug("mesif:4")
				$obj.$probeCycle=$stack[$fp-3]
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 154
					continue
				}
				$stack[$fp+1]=sprintf("Send Probe Invalidate\nto all Nodes,\nAcks Returned 0/4", $stack[$fp-3]%NCPU)
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(100, $obj, $obj.$cpuNo, $stack[$fp-3], 1, 0, "PRI:a")
				continue
			case 153:
				$pc = 156
				continue
			case 154:
				$stack[$fp+1]=sprintf("Send Probe\nto all Nodes,\nAcks Returned 0/4", $stack[$fp-3]%NCPU)
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(100, $obj, $obj.$cpuNo, $stack[$fp-3], 0, 0, "PR:a")
				continue
			case 155:
				$pc = 156
			case 156:
				debug("mesif:5")
				$pc = 157
			case 157:
				if (!($obj.$repliesReturned!=5)) {
					$pc = 159
					continue
				}
				$pc = 158
				if (wait(1)) {
					return
				}
			case 158:
				$pc = 157
				continue
			case 159:
				debug("mesif:6")
				$obj.$probeCycle=-1
				$obj.$readCycle=$stack[$fp-3]
				if (!($obj.$cacheLineFound==-1)) {
					$pc = 161
					continue
				}
				$stack[$fp+1]=sprintf("No dirty lines,\nsend READ msg\nto Home Node %d\nCpu Conflicts:"+$obj.$conflicts, $stack[$fp-3]%NCPU)
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(33, $obj, $obj.$cpuNo, $stack[$fp-3]%NCPU, 0, $g[40][$obj.$cpuNo], $g[40][$obj.$cpuNo], $stack[$fp-3], "READ:a")
				continue
			case 160:
				$pc = 163
				continue
			case 161:
				$stack[$fp+1]=sprintf("Dirty line found,\nsend CNCL msg\n to Home Node %d\nCpu Conflicts:"+$obj.$conflicts, $stack[$fp-3]%NCPU)
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(33, $obj, $obj.$cpuNo, $stack[$fp-3]%NCPU, 0, $g[40][$obj.$cpuNo], $g[40][$obj.$cpuNo], $stack[$fp-3], "CNCL:a")
				continue
			case 162:
				$obj.$cancelMemoryAccess=0
				$pc = 163
			case 163:
				$g[56][$stack[$fp-3]].$addProcess($obj.$cpuNo)
				$obj.$waitingOnHomeNodeAck[$stack[$fp-3]]=1
				$obj.$tempQueue.$emptyQueue()
				$stack[$fp+2]=0
				$pc = 164
			case 164:
				if (!($stack[$fp+2]<$g[60][$stack[$fp-3]].$endPosition)) {
					$pc = 166
					continue
				}
				$obj.$tempQueue.$addProcess($g[60][$stack[$fp-3]].$queue[$stack[$fp+2]])
				$pc = 165
			case 165:
				$stack[$fp+2]++
				$pc = 164
				continue
			case 166:
				$pc = 167
			case 167:
				if (!($obj.$tempQueue.$isQueueEmpty()==1)) {
					$pc = 169
					continue
				}
				if (!($obj.$conflictQueue[$stack[$fp-3]%2].$checkProcess($obj.$tempQueue.$returnProcess())==0)) {
					$pc = 168
					continue
				}
				$g[60][$stack[$fp-3]].$deleteProcess($obj.$tempQueue.$returnProcess())
				$pc = 168
			case 168:
				$obj.$tempQueue.$removeProcess()
				$pc = 167
				continue
			case 169:
				$pc = 170
			case 170:
				if (!($obj.$conflictQueue[$stack[$fp-3]%2].$isQueueEmpty()==1)) {
					$pc = 173
					continue
				}
				if (!($g[58][$stack[$fp-3]].$checkProcess($obj.$conflictQueue[$stack[$fp-3]%2].$returnProcess())==0&&$g[60][$stack[$fp-3]].$checkProcess($obj.$conflictQueue[$stack[$fp-3]%2].$returnProcess())==0)) {
					$pc = 172
					continue
				}
				$g[58][$stack[$fp-3]].$addProcess($obj.$conflictQueue[$stack[$fp-3]%2].$returnProcess())
				if (!($obj.$conflictQueue[$stack[$fp-3]%2].$returnProcess()>=10)) {
					$pc = 171
					continue
				}
				$g[59][$stack[$fp-3]].$addProcess($obj.$conflictQueue[$stack[$fp-3]%2].$returnProcess())
				$pc = 171
			case 171:
				$pc = 172
			case 172:
				$obj.$conflictQueue[$stack[$fp-3]%2].$removeProcess()
				$pc = 170
				continue
			case 173:
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 175
					continue
				}
				if (!($g[58][$stack[$fp-3]].$checkProcess($obj.$cpuNo+10)==0&&$g[60][$stack[$fp-3]].$checkProcess($obj.$cpuNo+10)==0)) {
					$pc = 174
					continue
				}
				$g[58][$stack[$fp-3]].$addProcess($obj.$cpuNo+10)
				$g[59][$stack[$fp-3]].$addProcess($obj.$cpuNo+10)
				$pc = 174
			case 174:
				$pc = 177
				continue
			case 175:
				if (!($g[58][$stack[$fp-3]].$checkProcess($obj.$cpuNo)==0&&$g[60][$stack[$fp-3]].$checkProcess($obj.$cpuNo)==0)) {
					$pc = 176
					continue
				}
				$g[58][$stack[$fp-3]].$addProcess($obj.$cpuNo)
				$pc = 176
			case 176:
				$pc = 177
			case 177:
				$pc = 178
			case 178:
				if (!($g[56][$stack[$fp-3]].$returnProcess()!=$obj.$cpuNo)) {
					$pc = 180
					continue
				}
				$pc = 179
				if (wait(1)) {
					return
				}
			case 179:
				$pc = 178
				continue
			case 180:
				$pc = 181
			case 181:
				if (!($obj.$memoryAccessComplete==0)) {
					$pc = 183
					continue
				}
				$pc = 182
				if (wait(1)) {
					return
				}
			case 182:
				$pc = 181
				continue
			case 183:
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 184
					continue
				}
				$g[59][$stack[$fp-3]].$deleteProcess($obj.$cpuNo+10)
				$g[58][$stack[$fp-3]].$deleteProcess($obj.$cpuNo+10)
				$g[60][$stack[$fp-3]].$addProcess($obj.$cpuNo+10)
				$pc = 185
				continue
			case 184:
				$g[58][$stack[$fp-3]].$deleteProcess($obj.$cpuNo)
				$g[60][$stack[$fp-3]].$addProcess($obj.$cpuNo)
				$pc = 185
			case 185:
				if (!($obj.$cacheLineFound==-1)) {
					$pc = 215
					continue
				}
				if (!($obj.$probeConflict==0&&$obj.$readConflict==0&&$g[63][$stack[$fp-3]]==-1)) {
					$pc = 188
					continue
				}
				$g[63][$stack[$fp-3]]=$obj.$cpuNo
				$g[56][$stack[$fp-3]].$removeProcess()
				$stack[$fp+1]=sprintf("Home Node %d sends\na%d from memory\nin Exclusive", $stack[$fp-3]%NCPU, $stack[$fp-3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(33, $obj, $stack[$fp-3]%NCPU, $obj.$cpuNo, 0, $g[40][$obj.$cpuNo], $g[40][$stack[$fp-3]%NCPU], $stack[$fp-3], "DataE:a")
				continue
			case 186:
				$obj.$cpuCache.$content[$stack[$fp-3]%2]=$g[70][$stack[$fp-3]%NCPU].$cpuMemory.$mem[($stack[$fp-3]/4)|0]
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=EXCLUSIVE
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("E")
				$obj.$cpuCache.$addr[$stack[$fp-3]%2]=$stack[$fp-3]
				$obj.$cpuCache.$aRTxt[$stack[$fp-3]%2].setTxt("a%d", $stack[$fp-3])
				$obj.$cpuCache.$dRTxt[$stack[$fp-3]%2].setTxt("%d", $obj.$cpuCache.$content[$stack[$fp-3]%2])
				$obj.$cpuCache.$highlight($stack[$fp-3]%2, 0)
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 187
					continue
				}
				$obj.$cpuCache.$content[$stack[$fp-3]%2]++
				$obj.$cpuCache.$dRTxt[$stack[$fp-3]%2].setTxt("%d", $obj.$cpuCache.$content[$stack[$fp-3]%2])
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=MODIFIED
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("M")
				$pc = 187
			case 187:
				$obj.$waitingOnHomeNodeAck[$stack[$fp-3]]=0
				$obj.$readCycle=-1
				$pc = 214
				continue
			case 188:
				if (!($g[63][$stack[$fp-3]]==-1)) {
					$pc = 193
					continue
				}
				$g[63][$stack[$fp-3]]=$obj.$cpuNo
				$g[56][$stack[$fp-3]].$removeProcess()
				$stack[$fp+1]=sprintf("Home Node %d sends\na%d from memory\nin Exclusive", $stack[$fp-3]%NCPU, $stack[$fp-3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(33, $obj, $stack[$fp-3]%NCPU, $obj.$cpuNo, 0, $g[40][$obj.$cpuNo], $g[40][$stack[$fp-3]%NCPU], $stack[$fp-3], "DataE:a")
				continue
			case 189:
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=EXCLUSIVE
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("E")
				$obj.$cpuCache.$content[$stack[$fp-3]%2]=$g[70][$stack[$fp-3]%NCPU].$cpuMemory.$mem[($stack[$fp-3]/4)|0]
				$obj.$cpuCache.$addr[$stack[$fp-3]%2]=$stack[$fp-3]
				$obj.$cpuCache.$aRTxt[$stack[$fp-3]%2].setTxt("a%d", $stack[$fp-3])
				$obj.$cpuCache.$dRTxt[$stack[$fp-3]%2].setTxt("%d", $obj.$cpuCache.$content[$stack[$fp-3]%2])
				$obj.$cpuCache.$highlight($stack[$fp-3]%2, 0)
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 192
					continue
				}
				$call(81, $obj.$cpuDataLines2, TICKS, 1)
				continue
			case 190:
				$call(79, $obj.$cpuDataLines2, TICKS, 1)
				continue
			case 191:
				$obj.$cpuCache.$content[$stack[$fp-3]%2]++
				$obj.$cpuCache.$dRTxt[$stack[$fp-3]%2].setTxt("%d", $obj.$cpuCache.$content[$stack[$fp-3]%2])
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=MODIFIED
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("M")
				$pc = 192
			case 192:
				$obj.$readCycle=-1
				$pc = 213
				continue
			case 193:
				$stack[$fp+3]=$g[63][$stack[$fp-3]]
				$g[63][$stack[$fp-3]]=$obj.$cpuNo
				$g[56][$stack[$fp-3]].$removeProcess()
				if (!($g[58][$stack[$fp-3]].$isQueueEmpty()==0)) {
					$pc = 194
					continue
				}
				fork(126, $obj, $stack[$fp-3]%NCPU, $obj.$cpuNo, $stack[$fp-3], "ACK:a")
				$pc = 194
			case 194:
				if (!($stack[$fp-4]==$obj.$WRITE||$g[59][$stack[$fp-3]].$isQueueEmpty()==1)) {
					$pc = 196
					continue
				}
				$stack[$fp+1]=sprintf("Home Node %d,\nsends a Transfer\nInvalidate\nmessage to Node%d", $stack[$fp-3]%NCPU, $stack[$fp+3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(33, $obj, $stack[$fp-3]%NCPU, $stack[$fp+3], 0, $g[40][$obj.$cpuNo], $g[40][$stack[$fp-3]%NCPU], $stack[$fp-3], "XFERI:a")
				continue
			case 195:
				$pc = 198
				continue
			case 196:
				$stack[$fp+1]=sprintf("Home Node %d,\nsends a Transfer\nmessage to Node%d", $stack[$fp-3]%NCPU, $stack[$fp+3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(33, $obj, $stack[$fp-3]%NCPU, $stack[$fp+3], 0, $g[40][$obj.$cpuNo], $g[40][$stack[$fp-3]%NCPU], $stack[$fp-3], "XFER:a")
				continue
			case 197:
				$pc = 198
			case 198:
				$g[70][$stack[$fp+3]].$waitingOnHomeNodeAck[$stack[$fp-3]]=0
				$pc = 199
			case 199:
				if (!($g[70][$stack[$fp+3]].$cpuCache.$state[$stack[$fp-3]%2]==SHARED||$g[70][$stack[$fp+3]].$cpuCache.$state[$stack[$fp-3]%2]==INVALID||$g[70][$stack[$fp+3]].$readCycle!=-1)) {
					$pc = 201
					continue
				}
				$pc = 200
				if (wait(1)) {
					return
				}
			case 200:
				$pc = 199
				continue
			case 201:
				$stack[$fp+4]=0
				if (!($g[70][$stack[$fp+3]].$cpuCache.$state[$stack[$fp-3]%2]==MODIFIED)) {
					$pc = 202
					continue
				}
				$stack[$fp+4]=1
				$pc = 202
			case 202:
				if (!($stack[$fp-4]==$obj.$WRITE||$stack[$fp+4]==1||$g[59][$stack[$fp-3]].$isQueueEmpty()==1)) {
					$pc = 203
					continue
				}
				$g[70][$stack[$fp+3]].$cpuCache.$state[$stack[$fp-3]%2]=INVALID
				$g[70][$stack[$fp+3]].$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("I")
				$g[70][$stack[$fp+3]].$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("I")
				$pc = 204
				continue
			case 203:
				$g[70][$stack[$fp+3]].$cpuCache.$state[$stack[$fp-3]%2]=SHARED
				$g[70][$stack[$fp+3]].$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("S")
				$g[70][$stack[$fp+3]].$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("S")
				$pc = 204
			case 204:
				if (!($stack[$fp+4]==1)) {
					$pc = 206
					continue
				}
				$stack[$fp+1]=sprintf("Node %d\nsends a%d\nin MODIFIED", $stack[$fp+3], $stack[$fp-3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(33, $obj, $stack[$fp+3], $obj.$cpuNo, 0, $g[40][$obj.$cpuNo], $g[40][$stack[$fp+3]], $stack[$fp-3], "DataM:a")
				continue
			case 205:
				$obj.$cpuCache.$content[$stack[$fp-3]%2]=$g[70][$stack[$fp+3]].$cpuCache.$content[$stack[$fp-3]%2]
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=MODIFIED
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("M")
				$pc = 211
				continue
			case 206:
				if (!($g[59][$stack[$fp-3]].$isQueueEmpty()==1||$stack[$fp-4]==$obj.$WRITE)) {
					$pc = 208
					continue
				}
				$stack[$fp+1]=sprintf("Node %d\nsends a%d\nin EXCLUSIVE", $stack[$fp+3], $stack[$fp-3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(33, $obj, $stack[$fp+3], $obj.$cpuNo, 0, $g[40][$obj.$cpuNo], $g[40][$stack[$fp+3]], $stack[$fp-3], "DataE:a")
				continue
			case 207:
				$obj.$cpuCache.$content[$stack[$fp-3]%2]=$g[70][$stack[$fp+3]].$cpuCache.$content[$stack[$fp-3]%2]
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=EXCLUSIVE
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("E")
				$pc = 210
				continue
			case 208:
				$stack[$fp+1]=sprintf("Node %d\nsends a%d\nin FORWARD", $stack[$fp+3], $stack[$fp-3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$call(33, $obj, $stack[$fp+3], $obj.$cpuNo, 0, $g[40][$obj.$cpuNo], $g[40][$stack[$fp+3]], $stack[$fp-3], "DataF:a")
				continue
			case 209:
				$obj.$cpuCache.$content[$stack[$fp-3]%2]=$g[70][$stack[$fp+3]].$cpuCache.$content[$stack[$fp-3]%2]
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=FORWARD
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("F")
				$pc = 210
			case 210:
				$pc = 211
			case 211:
				$obj.$cpuCache.$addr[$stack[$fp-3]%2]=$stack[$fp-3]
				$obj.$cpuCache.$aRTxt[$stack[$fp-3]%2].setTxt("a%d", $stack[$fp-3])
				$obj.$cpuCache.$dRTxt[$stack[$fp-3]%2].setTxt("%d", $obj.$cpuCache.$content[$stack[$fp-3]%2])
				$obj.$cpuCache.$highlight($stack[$fp-3]%2, 0)
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 212
					continue
				}
				$obj.$cpuCache.$content[$stack[$fp-3]%2]++
				$obj.$cpuCache.$dRTxt[$stack[$fp-3]%2].setTxt("%d", $obj.$cpuCache.$content[$stack[$fp-3]%2])
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=MODIFIED
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("M")
				$pc = 212
			case 212:
				$obj.$readCycle=-1
				$pc = 213
			case 213:
				$pc = 214
			case 214:
				$pc = 228
				continue
			case 215:
				debug("mesif:100")
				$g[63][$stack[$fp-3]]=$obj.$cpuNo
				$g[56][$stack[$fp-3]].$removeProcess()
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 216
					continue
				}
				$stack[$fp+1]=sprintf("Home Node %d\nverifies\nWrite Request\nfor a%d", $stack[$fp-3]%NCPU, $stack[$fp-3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$pc = 217
				continue
			case 216:
				$stack[$fp+1]=sprintf("Home Node %d\nverifies\nRead Request\nfor a%d", $stack[$fp-3]%NCPU, $stack[$fp-3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$pc = 217
			case 217:
				if (!($obj.$lineModified==1)) {
					$pc = 219
					continue
				}
				$call(33, $obj, $stack[$fp-3]%NCPU, $obj.$cpuNo, 0, $g[40][$obj.$cpuNo], $g[40][$stack[$fp-3]%NCPU], $stack[$fp-3], "DataM:a")
				continue
			case 218:
				$obj.$cpuCache.$content[$stack[$fp-3]%2]=$g[70][$obj.$cacheLineFound].$cpuCache.$content[$stack[$fp-3]%2]
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=MODIFIED
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("M")
				$pc = 224
				continue
			case 219:
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 221
					continue
				}
				$call(33, $obj, $stack[$fp-3]%NCPU, $obj.$cpuNo, 0, $g[40][$obj.$cpuNo], $g[40][$stack[$fp-3]%NCPU], $stack[$fp-3], "DataE:a")
				continue
			case 220:
				$obj.$cpuCache.$content[$stack[$fp-3]%2]=$g[70][$stack[$fp-3]%NCPU].$cpuMemory.$mem[($stack[$fp-3]/4)|0]
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=EXCLUSIVE
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("E")
				$pc = 223
				continue
			case 221:
				$call(33, $obj, $stack[$fp-3]%NCPU, $obj.$cpuNo, 0, $g[40][$obj.$cpuNo], $g[40][$stack[$fp-3]%NCPU], $stack[$fp-3], "DataF:a")
				continue
			case 222:
				$obj.$cpuCache.$content[$stack[$fp-3]%2]=$g[70][$stack[$fp-3]%NCPU].$cpuMemory.$mem[($stack[$fp-3]/4)|0]
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=FORWARD
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("F")
				$pc = 223
			case 223:
				$pc = 224
			case 224:
				$obj.$cpuCache.$addr[$stack[$fp-3]%2]=$stack[$fp-3]
				$obj.$cpuCache.$aRTxt[$stack[$fp-3]%2].setTxt("a%d", $stack[$fp-3])
				$obj.$cpuCache.$dRTxt[$stack[$fp-3]%2].setTxt("%d", $obj.$cpuCache.$content[$stack[$fp-3]%2])
				$obj.$cpuCache.$highlight($stack[$fp-3]%2, 0)
				$stack[$fp+1]=sprintf("Source Node %d\nverifies the changes\non Node %d", -1, -1)
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				fork(126, $obj, $obj.$cpuNo, $obj.$cacheLineFound, $stack[$fp-3], "ACK:a")
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 227
					continue
				}
				$call(81, $obj.$cpuDataLines2, TICKS, 1)
				continue
			case 225:
				$call(79, $obj.$cpuDataLines2, TICKS, 1)
				continue
			case 226:
				$obj.$cpuCache.$content[$stack[$fp-3]%2]++
				$obj.$cpuCache.$dRTxt[$stack[$fp-3]%2].setTxt("%d", $obj.$cpuCache.$content[$stack[$fp-3]%2])
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=MODIFIED
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("M")
				$pc = 227
			case 227:
				$obj.$waitingOnHomeNodeAck[$stack[$fp-3]]=0
				$obj.$readCycle=-1
				$pc = 228
			case 228:
				$pc = 234
				continue
			case 229:
				$obj.$waitingOnHomeNodeAck[$stack[$fp-3]]=1
				$obj.$cpuCache.$highlight($stack[$fp-3]%2, 0)
				$call(81, $obj.$cpuDataLines2, TICKS, 1)
				continue
			case 230:
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 233
					continue
				}
				if (!($obj.$cpuCache.$state[$stack[$fp-3]%2]==MODIFIED||$obj.$cpuCache.$state[$stack[$fp-3]%2]==EXCLUSIVE)) {
					$pc = 232
					continue
				}
				$call(79, $obj.$cpuDataLines2, TICKS, 1)
				continue
			case 231:
				$obj.$cpuCache.$content[$stack[$fp-3]%2]++
				$obj.$cpuCache.$dRTxt[$stack[$fp-3]%2].setTxt("%d", $obj.$cpuCache.$content[$stack[$fp-3]%2])
				$obj.$cpuCache.$state[$stack[$fp-3]%2]=MODIFIED
				$obj.$cpuCache.$stateRTxt[$stack[$fp-3]%2].setTxt("M")
				$pc = 232
			case 232:
				$pc = 233
			case 233:
				$obj.$waitingOnHomeNodeAck[$stack[$fp-3]]=0
				$pc = 234
			case 234:
				$pc = 235
			case 235:
				if (!($obj.$waitingOnHomeNodeAck[$stack[$fp-3]]==1||$obj.$readCycle!=-1)) {
					$pc = 237
					continue
				}
				$pc = 236
				if (wait(1)) {
					return
				}
			case 236:
				$stack[$fp+1]=sprintf("Awaiting\nAcknowledge\nOr Transfer\nmessage")
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$pc = 235
				continue
			case 237:
				$obj.$readCycle=-1
				$obj.$readConflict=-1
				$obj.$probeCycle=-1
				$obj.$probeConflict=0
				$obj.$lineModified=0
				$obj.$cpuDialogBox.$setTitle("Last Action")
				if (!($stack[$fp-4]==$obj.$WRITE)) {
					$pc = 238
					continue
				}
				$stack[$fp+1]=sprintf("Write a%d", $stack[$fp-3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$pc = 239
				continue
			case 238:
				$stack[$fp+1]=sprintf("Read a%d", $stack[$fp-3])
				$obj.$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$pc = 239
			case 239:
				$obj.$cpuLock=0
				$g[43]--
				checkPoint()
				$pc = 240
			case 240:
				$return(2)
				continue
			case 241:
				$enter(0);	// $eh7
				if (!($stack[$fp-3]&&$stack[$fp-4]&MB_LEFT&&$obj.$inUse==0)) {
					$pc = 243
					continue
				}
				$obj.$inUse=1
				start()
				$obj.$readButton.setBrush($g[41][$obj.$addr%NCPU])
				$call(128, $obj.parent, $obj.$addr, $obj.parent.$READ)
				continue
			case 242:
				$obj.$readButton.setBrush($g[40][$obj.$addr%NCPU])
				$obj.$readButton.setOpacity(0)
				$obj.$rtxt.setOpacity(0)
				$obj.$writeButton.setOpacity(0)
				$obj.$wtxt.setOpacity(0)
				$obj.$inUse=0
				$pc = 243
			case 243:
				$return(4)
				continue
			case 244:
				$enter(0);	// $eh8
				if (!($stack[$fp-3]&&$stack[$fp-4]&MB_LEFT&&$obj.$inUse==0)) {
					$pc = 246
					continue
				}
				$obj.$inUse=1
				$call(128, $obj.parent, $obj.$addr, $obj.parent.$WRITE)
				continue
			case 245:
				$obj.$readButton.setBrush($g[40][$obj.$addr%NCPU])
				$obj.$readButton.setOpacity(0)
				$obj.$rtxt.setOpacity(0)
				$obj.$writeButton.setOpacity(0)
				$obj.$wtxt.setOpacity(0)
				$obj.$inUse=0
				$pc = 246
			case 246:
				$return(4)
				continue
			case 247:
				$enter(0);	// addressCheck
				if (!($stack[$fp-3]%NCPU==$stack[$fp-5])) {
					$pc = 255
					continue
				}
				$pc = 248
			case 248:
				if (!($g[54][$stack[$fp-5]]==1)) {
					$pc = 250
					continue
				}
				$pc = 249
				if (wait(1)) {
					return
				}
			case 249:
				$pc = 248
				continue
			case 250:
				$g[54][$stack[$fp-5]]=1
				$call(79, $g[70][$stack[$fp-5]].$cpuDataLines, TICKS*2, 1)
				continue
			case 251:
				if (!($g[70][$stack[$fp-4]].$cancelMemoryAccess==1)) {
					$pc = 252
					continue
				}
				$g[54][$stack[$fp-5]]=0
				$return(3)
				continue
			case 252:
				$g[70][$stack[$fp-5]].$cpuMemory.$highlight(($stack[$fp-3]/4)|0, 0)
				if (!($g[70][$stack[$fp-4]].$cancelMemoryAccess==1)) {
					$pc = 253
					continue
				}
				$g[54][$stack[$fp-5]]=0
				$return(3)
				continue
			case 253:
				$call(81, $g[70][$stack[$fp-5]].$cpuDataLines, TICKS*2, 1)
				continue
			case 254:
				$g[54][$stack[$fp-5]]=0
				$g[70][$stack[$fp-4]].$memoryAccessComplete=1
				$pc = 255
			case 255:
				$return(3)
				continue
			case 256:
				$enter(1);	// checkCache
				debug("checkCache: cpuA=%d cpuB=%d addr=%d flag=%d invalidate-%d", $stack[$fp-3], $stack[$fp-4], $stack[$fp-5], $stack[$fp-6], $stack[$fp-7])
				if (!($stack[$fp-7]==0)) {
					$pc = 287
					continue
				}
				if (!($g[70][$stack[$fp-4]].$probeCycle==$g[70][$stack[$fp-3]].$probeCycle&&$g[70][$stack[$fp-4]].$probeCycle!=-1&&$g[70][$stack[$fp-3]].$probeCycle!=-1&&$stack[$fp-3]!=$stack[$fp-4])) {
					$pc = 264
					continue
				}
				if (!($g[70][$stack[$fp-4]].$isCpuWriting==1)) {
					$pc = 258
					continue
				}
				$g[70][$stack[$fp-3]].$conflictQueue[$stack[$fp-5]%2].$addProcess($stack[$fp-4]+10)
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "CNFLI:a")
				continue
			case 257:
				$pc = 260
				continue
			case 258:
				$g[70][$stack[$fp-3]].$conflictQueue[$stack[$fp-5]%2].$addProcess($stack[$fp-4])
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "CNFL:a")
				continue
			case 259:
				$pc = 260
			case 260:
				if (!($g[70][$stack[$fp-3]].$conflicts=="")) {
					$pc = 261
					continue
				}
				$g[70][$stack[$fp-3]].$conflicts=$g[70][$stack[$fp-3]].$conflicts+sprintf("%d", $stack[$fp-4])
				$pc = 262
				continue
			case 261:
				$g[70][$stack[$fp-3]].$conflicts=$g[70][$stack[$fp-3]].$conflicts+sprintf(",%d", $stack[$fp-4])
				$pc = 262
			case 262:
				$g[70][$stack[$fp-3]].$probeConflict=1
				if (!($stack[$fp-5]%NCPU==$stack[$fp-4])) {
					$pc = 263
					continue
				}
				$g[70][$stack[$fp-3]].$memoryAccessComplete=1
				$pc = 263
			case 263:
				$g[70][$stack[$fp-3]].$repliesReturned++
				$stack[$fp+1]=sprintf("Send Probe\nto all Nodes,\nAcks Returned %d/4", $g[70][$stack[$fp-3]].$repliesReturned-1)
				$g[70][$stack[$fp-3]].$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$return(5)
				continue
			case 264:
				if (!($g[70][$stack[$fp-4]].$readCycle==$g[70][$stack[$fp-3]].$probeCycle&&$g[70][$stack[$fp-4]].$readCycle!=-1&&$g[70][$stack[$fp-3]].$probeCycle!=-1&&$stack[$fp-3]!=$stack[$fp-4])) {
					$pc = 275
					continue
				}
				$pc = 265
			case 265:
				if (!($g[70][$stack[$fp-4]].$readCycle==$g[70][$stack[$fp-3]].$probeCycle)) {
					$pc = 267
					continue
				}
				$pc = 266
				if (wait(1)) {
					return
				}
			case 266:
				$pc = 265
				continue
			case 267:
				if (!($g[70][$stack[$fp-4]].$isCpuWriting==1)) {
					$pc = 269
					continue
				}
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "CNFLI:")
				continue
			case 268:
				$pc = 271
				continue
			case 269:
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "CNFL:a")
				continue
			case 270:
				$pc = 271
			case 271:
				if (!($g[70][$stack[$fp-3]].$conflicts=="")) {
					$pc = 272
					continue
				}
				$g[70][$stack[$fp-3]].$conflicts=$g[70][$stack[$fp-3]].$conflicts+sprintf("%d", $stack[$fp-4])
				$pc = 273
				continue
			case 272:
				$g[70][$stack[$fp-3]].$conflicts=$g[70][$stack[$fp-3]].$conflicts+sprintf(",%d", $stack[$fp-4])
				$pc = 273
			case 273:
				$g[70][$stack[$fp-3]].$repliesReturned++
				$g[70][$stack[$fp-3]].$readConflict=1
				if (!($stack[$fp-5]%NCPU==$stack[$fp-4])) {
					$pc = 274
					continue
				}
				$g[70][$stack[$fp-3]].$memoryAccessComplete=1
				$pc = 274
			case 274:
				$stack[$fp+1]=sprintf("Send Probe\nto all Nodes,\nAcks Returned %d/4", $g[70][$stack[$fp-3]].$repliesReturned-1)
				$g[70][$stack[$fp-3]].$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$return(5)
				continue
			case 275:
				if (!($g[70][$stack[$fp-4]].$cpuCache.$addr[$stack[$fp-5]%2]==$stack[$fp-5])) {
					$pc = 285
					continue
				}
				$pc = 276
			case 276:
				if (!($g[70][$stack[$fp-4]].$waitingOnHomeNodeAck[$stack[$fp-5]]==1)) {
					$pc = 278
					continue
				}
				$pc = 277
				if (wait(1)) {
					return
				}
			case 277:
				$pc = 276
				continue
			case 278:
				if (!($g[70][$stack[$fp-4]].$cpuCache.$addr[$stack[$fp-5]%2]==$stack[$fp-5]&&($g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]==MODIFIED||$g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]==EXCLUSIVE||$g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]==FORWARD))) {
					$pc = 284
					continue
				}
				$g[70][$stack[$fp-3]].$mesifUpdateMemory=1
				if (!($g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]==MODIFIED)) {
					$pc = 280
					continue
				}
				$g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]=INVALID
				$g[70][$stack[$fp-4]].$cpuCache.$stateRTxt[$stack[$fp-5]%2].setTxt("I")
				$g[70][$stack[$fp-3]].$cacheLineFound=$stack[$fp-4]
				$g[70][$stack[$fp-4]].$cpuCache.$highlight($stack[$fp-5]%2, 0)
				$g[70][$stack[$fp-3]].$lineModified=1
				$g[70][$stack[$fp-4]].$waitingOnHomeNodeAck[$stack[$fp-5]]=1
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "DataM:a")
				continue
			case 279:
				$pc = 282
				continue
			case 280:
				$g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]=SHARED
				$g[70][$stack[$fp-4]].$cpuCache.$stateRTxt[$stack[$fp-5]%2].setTxt("S")
				$g[70][$stack[$fp-3]].$cacheLineFound=$stack[$fp-4]
				$g[70][$stack[$fp-4]].$cpuCache.$highlight($stack[$fp-5]%2, 0)
				$g[70][$stack[$fp-4]].$waitingOnHomeNodeAck[$stack[$fp-5]]=1
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "DataF:a")
				continue
			case 281:
				$pc = 282
			case 282:
				$g[70][$stack[$fp-3]].$repliesReturned++
				if (!($stack[$fp-5]%NCPU==$stack[$fp-4])) {
					$pc = 283
					continue
				}
				$g[70][$stack[$fp-3]].$memoryAccessComplete=1
				$pc = 283
			case 283:
				$stack[$fp+1]=sprintf("Send Probe\nto all Nodes,\nAcks Returned %d/4", $g[70][$stack[$fp-3]].$repliesReturned-1)
				$g[70][$stack[$fp-3]].$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$return(5)
				continue
			case 284:
				$pc = 285
			case 285:
				fork(247, $obj, $stack[$fp-5], $stack[$fp-3], $stack[$fp-4])
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "IA:a")
				continue
			case 286:
				$g[70][$stack[$fp-3]].$repliesReturned++
				$stack[$fp+1]=sprintf("Send Probe\nto all Nodes,\nAcks Returned %d/4", $g[70][$stack[$fp-3]].$repliesReturned-1)
				$g[70][$stack[$fp-3]].$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$pc = 287
			case 287:
				if (!($stack[$fp-7]==1)) {
					$pc = 320
					continue
				}
				if (!($g[70][$stack[$fp-4]].$probeCycle==$g[70][$stack[$fp-3]].$probeCycle&&$g[70][$stack[$fp-4]].$probeCycle!=-1&&$g[70][$stack[$fp-3]].$probeCycle!=-1&&$stack[$fp-3]!=$stack[$fp-4])) {
					$pc = 295
					continue
				}
				if (!($g[70][$stack[$fp-4]].$isCpuWriting==1)) {
					$pc = 289
					continue
				}
				$g[70][$stack[$fp-3]].$conflictQueue[$stack[$fp-5]%2].$addProcess($stack[$fp-4]+10)
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "CNFLI:a")
				continue
			case 288:
				$pc = 291
				continue
			case 289:
				$g[70][$stack[$fp-3]].$conflictQueue[$stack[$fp-5]%2].$addProcess($stack[$fp-4])
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "CNFL:a")
				continue
			case 290:
				$pc = 291
			case 291:
				if (!($g[70][$stack[$fp-3]].$conflicts=="")) {
					$pc = 292
					continue
				}
				$g[70][$stack[$fp-3]].$conflicts=$g[70][$stack[$fp-3]].$conflicts+sprintf("%d", $stack[$fp-4])
				$pc = 293
				continue
			case 292:
				$g[70][$stack[$fp-3]].$conflicts=$g[70][$stack[$fp-3]].$conflicts+sprintf(",%d", $stack[$fp-4])
				$pc = 293
			case 293:
				$g[70][$stack[$fp-3]].$probeConflict=1
				if (!($stack[$fp-5]%NCPU==$stack[$fp-4])) {
					$pc = 294
					continue
				}
				$g[70][$stack[$fp-3]].$memoryAccessComplete=1
				$pc = 294
			case 294:
				$g[70][$stack[$fp-3]].$repliesReturned++
				$stack[$fp+1]=sprintf("Send Probe Invalidate\nto all Nodes,\nAcks Returned %d/4", $g[70][$stack[$fp-3]].$repliesReturned-1)
				$g[70][$stack[$fp-3]].$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$return(5)
				continue
			case 295:
				if (!($g[70][$stack[$fp-4]].$readCycle==$g[70][$stack[$fp-3]].$probeCycle&&$g[70][$stack[$fp-4]].$readCycle!=-1&&$g[70][$stack[$fp-3]].$probeCycle!=-1&&$stack[$fp-3]!=$stack[$fp-4])) {
					$pc = 306
					continue
				}
				$pc = 296
			case 296:
				if (!($g[70][$stack[$fp-4]].$readCycle==$g[70][$stack[$fp-3]].$probeCycle)) {
					$pc = 298
					continue
				}
				$pc = 297
				if (wait(1)) {
					return
				}
			case 297:
				$pc = 296
				continue
			case 298:
				if (!($g[70][$stack[$fp-4]].$isCpuWriting==1)) {
					$pc = 300
					continue
				}
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "CNFLI:a")
				continue
			case 299:
				$pc = 302
				continue
			case 300:
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "CNFL:a")
				continue
			case 301:
				$pc = 302
			case 302:
				if (!($g[70][$stack[$fp-3]].$conflicts=="")) {
					$pc = 303
					continue
				}
				$g[70][$stack[$fp-3]].$conflicts=$g[70][$stack[$fp-3]].$conflicts+sprintf("%d", $stack[$fp-4])
				$pc = 304
				continue
			case 303:
				$g[70][$stack[$fp-3]].$conflicts=$g[70][$stack[$fp-3]].$conflicts+sprintf(",%d", $stack[$fp-4])
				$pc = 304
			case 304:
				$g[70][$stack[$fp-3]].$repliesReturned++
				$g[70][$stack[$fp-3]].$readConflict=1
				if (!($stack[$fp-5]%NCPU==$stack[$fp-4])) {
					$pc = 305
					continue
				}
				$g[70][$stack[$fp-3]].$memoryAccessComplete=1
				$pc = 305
			case 305:
				$stack[$fp+1]=sprintf("Send Probe Invalidate\nto all Nodes,\nAcks Returned %d/4", $g[70][$stack[$fp-3]].$repliesReturned-1)
				$g[70][$stack[$fp-3]].$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$return(5)
				continue
			case 306:
				fork(247, $obj, $stack[$fp-5], $stack[$fp-3], $stack[$fp-4])
				if (!($g[70][$stack[$fp-4]].$cpuCache.$addr[$stack[$fp-5]%2]==$stack[$fp-5])) {
					$pc = 318
					continue
				}
				$pc = 307
			case 307:
				if (!($g[70][$stack[$fp-4]].$waitingOnHomeNodeAck[$stack[$fp-5]]==1)) {
					$pc = 309
					continue
				}
				$pc = 308
				if (wait(1)) {
					return
				}
			case 308:
				$pc = 307
				continue
			case 309:
				if (!($g[70][$stack[$fp-4]].$cpuCache.$addr[$stack[$fp-5]%2]==$stack[$fp-5]&&($g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]==MODIFIED||$g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]==EXCLUSIVE||$g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]==FORWARD))) {
					$pc = 316
					continue
				}
				if (!($g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]==MODIFIED)) {
					$pc = 311
					continue
				}
				$g[70][$stack[$fp-3]].$lineModified=1
				$g[70][$stack[$fp-3]].$mesifUpdateMemory=1
				$g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]=INVALID
				$g[70][$stack[$fp-4]].$cpuCache.$stateRTxt[$stack[$fp-5]%2].setTxt("I")
				$g[70][$stack[$fp-3]].$cacheLineFound=$stack[$fp-4]
				$g[70][$stack[$fp-4]].$cpuCache.$highlight($stack[$fp-5]%2, 0)
				$g[70][$stack[$fp-4]].$waitingOnHomeNodeAck[$stack[$fp-5]]=1
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "DataM:a")
				continue
			case 310:
				$pc = 314
				continue
			case 311:
				if (!($stack[$fp-3]!=$stack[$fp-4])) {
					$pc = 312
					continue
				}
				$g[70][$stack[$fp-3]].$mesifUpdateMemory=1
				$g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]=INVALID
				$g[70][$stack[$fp-4]].$cpuCache.$stateRTxt[$stack[$fp-5]%2].setTxt("I")
				$pc = 312
			case 312:
				$g[70][$stack[$fp-3]].$cacheLineFound=$stack[$fp-4]
				$g[70][$stack[$fp-4]].$cpuCache.$highlight($stack[$fp-5]%2, 0)
				$g[70][$stack[$fp-4]].$waitingOnHomeNodeAck[$stack[$fp-5]]=1
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "DataE:a")
				continue
			case 313:
				$pc = 314
			case 314:
				$g[70][$stack[$fp-3]].$repliesReturned++
				$stack[$fp+1]=sprintf("Send Probe Invalidate\nto all Nodes,\nAcks Returned %d/4", $g[70][$stack[$fp-3]].$repliesReturned-1)
				$g[70][$stack[$fp-3]].$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				if (!($stack[$fp-5]%NCPU==$stack[$fp-4])) {
					$pc = 315
					continue
				}
				$g[70][$stack[$fp-3]].$memoryAccessComplete=1
				$pc = 315
			case 315:
				$return(5)
				continue
			case 316:
				if (!($stack[$fp-3]!=$stack[$fp-4])) {
					$pc = 317
					continue
				}
				$g[70][$stack[$fp-4]].$cpuCache.$state[$stack[$fp-5]%2]=INVALID
				$g[70][$stack[$fp-4]].$cpuCache.$stateRTxt[$stack[$fp-5]%2].setTxt("I")
				$pc = 317
			case 317:
				$pc = 318
			case 318:
				fork(247, $obj, $stack[$fp-5], $stack[$fp-3], $stack[$fp-4])
				$call(33, $obj, $stack[$fp-4], $stack[$fp-3], $stack[$fp-6], $g[40][$stack[$fp-3]], $g[40][$stack[$fp-4]], $stack[$fp-5], "IA:a")
				continue
			case 319:
				$g[70][$stack[$fp-3]].$repliesReturned++
				$stack[$fp+1]=sprintf("Send Probe Invalidate\nto all Nodes,\nAcks Returned %d/4", $g[70][$stack[$fp-3]].$repliesReturned-1)
				$g[70][$stack[$fp-3]].$cpuDialogBox.$setCurrentTask($stack[$fp+1])
				$pc = 320
			case 320:
				$return(5)
				continue
			case 321:
				$enter(0);	// $eh9
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT))) {
					$pc = 322
					continue
				}
				reset()
				return
			case 322:
				$acc = 0
				$return(4)
				continue
			}
		}
	}

	this.$execute = $execute
	this.$resumeThread = $resumeThread
	this.$suspendThread = $suspendThread
	this.$getCurrentThread = $getCurrentThread

}

// eof
