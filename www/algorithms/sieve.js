// generated by VivioJS 22.02 build 0 : 14-Feb-22 14:27:35

"use strict"

function sieve(vplayer) {

	// preload fonts
	let font = new FontFace('Open Sans', 'url("../fonts/open-sans-v18-latin-regular.woff")', {weight:400})
	font.load()
	document.fonts.add(font)

	// const imports
	const BLACK = vplayer.BLACK
	const BLUE = vplayer.BLUE
	const CYAN = vplayer.CYAN
	const GRAY128 = vplayer.GRAY128
	const GRAY160 = vplayer.GRAY160
	const GRAY192 = vplayer.GRAY192
	const GRAY224 = vplayer.GRAY224
	const GRAY32 = vplayer.GRAY32
	const GRAY64 = vplayer.GRAY64
	const GRAY96 = vplayer.GRAY96
	const GREEN = vplayer.GREEN
	const HCENTRE = vplayer.HCENTRE
	const HLEFT = vplayer.HLEFT
	const HRIGHT = vplayer.HRIGHT
	const MAGENTA = vplayer.MAGENTA
	const RED = vplayer.RED
	const SMALLCAPS = vplayer.SMALLCAPS
	const VCENTRE = vplayer.VCENTRE
	const VTOP = vplayer.VTOP
	const WHITE = vplayer.WHITE
	const YELLOW = vplayer.YELLOW

	// var imports
	var $addWaitToEventQ = vplayer.$addWaitToEventQ
	var $g = vplayer.$g
	var $terminateThread = vplayer.$terminateThread
	var checkPoint = vplayer.checkPoint
	var debug = vplayer.debug
	var EXTENDEDGOBJ = vplayer.EXTENDEDGOBJ
	var Font = vplayer.Font
	var getTick = vplayer.getTick
	var newArray = vplayer.newArray
	var Rectangle = vplayer.Rectangle
	var Rectangle2 = vplayer.Rectangle2
	var rgba = vplayer.rgba
	var setBgBrush = vplayer.setBgBrush
	var setVirtualWindow = vplayer.setVirtualWindow
	var SolidBrush = vplayer.SolidBrush
	var SolidPen = vplayer.SolidPen
	var Txt = vplayer.Txt

	// const declarations
	const W=1024
	const H=768
	const N=100
	const SZ=48
	const TPS=50

	var $thread = 0
	var $pc = 0
	var $fp = -1
	var $sp = -1
	var $acc = 0
	var $obj = 0
	var $stack = 0
	var $testFlag = 0

	function $call(pc, obj) {
		if (obj === undefined)
			obj = 0
		let l = arguments.length - 1
		for (let i = l; i >= 2; i--)
			$stack[++$sp] = arguments[i]
		$acc = obj
		$stack[++$sp] = $pc + 1
		$pc = pc
		return $acc
	}

	function $enter(n) {	// n = # local variables
		$stack[++$sp] = $obj
		$stack[++$sp] = $fp
		$fp = $sp
		$obj = $acc
		$sp += n
	}

	function $return(n) {	// n = # parameters to pop
		$sp = $fp
		$fp = $stack[$sp--]
		$obj = $stack[$sp--]
		$pc = $stack[$sp--]
		if ($pc == -1) {
			$terminateThread($thread)
			$thread = 0
			return
		}
		$sp -= n
	}

	function $suspendThread() {
		if ($thread == 0)
			return 0;
		$thread.pc = $pc
		$thread.fp = $fp
		$thread.sp = $sp
		$thread.acc = $acc
		$thread.obj = $obj
		return $thread
	}

	function $getCurrentThread() {
		return $thread
	}

	function $resumeThread(toThread) {
		$pc = toThread.pc
		$fp = toThread.fp
		$sp = toThread.sp
		$acc = toThread.acc
		$obj = toThread.obj
		$stack = toThread.stack
		$thread = toThread
	}

	function $switchToThread(toThread) {
		if ($thread == toThread) {
			$acc = toThread.acc
			return
		}
		$suspendThread()
		$resumeThread(toThread)
	}

	function wait(ticks) {
		$suspendThread()
		$addWaitToEventQ(ticks, $thread)	// -ve ticks for a realtime wait
		return 1
	}

	function bit(i) {
		return $g[31][0|(i/8)]&(1<<(i&7))
	}

	function clearBit(i) {
		$g[31][0|(i/8)]&=~(1<<(i&7))
	}

	function setBit(i) {
		$g[31][0|(i/8)]|=1<<(i&7)
	}

	function R($grp, x, y, _v) {
		Rectangle.call(this, $g[0], 0, ((0) | EXTENDEDGOBJ), 0, $g[16], x, y, 1, 1, SZ-2, SZ-2, $g[2], $g[38])
		this.$v=_v
		if ((this.$v==0)||(this.$v==1))
		this.setBrush($g[30])
		this.setTxt("%d", ((this.$v==0)||(this.$v==1)) ? 0 : 1)
		this.setRounded(4, 4)
		this.$rv=new Rectangle2($g[0], 0, VTOP, 0, 0, x+SZ/2, y+1, SZ/2, SZ/2, $g[2], $g[35], "%d", this.$v)
	}
	R.prototype = Object.create(Rectangle.prototype)

	R.prototype.$clear = function() {
		if (bit(this.$v)) {
			clearBit(this.$v)
			this.setBrush($g[18])
			this.setTxt("0")
		} else {
			this.setPen($g[3])
		}
	}

	R.prototype.$highlight = function() {
		this.$rv.setTxtPen($g[1])
		this.setBrush($g[19])
		this.setPen($g[1])
		this.setTxtPen($g[1])
	}

	function setAddrData(i) {
		$g[33][i].setTxt("[0x%08X] = 0x%02X", 1073741824+i, $g[31][i])
	}

	function $execute(thread) {

		$switchToThread(thread);

		while (1) {
			switch ($pc) {
			case -1:
				return;		// catch thread termination
			case 0:
				$enter(0)	// start with a function call
				$g[1]=new SolidPen(0, 0, BLACK)
				$g[2]=new SolidPen(0, 0, WHITE)
				$g[3]=new SolidPen(0, 0, RED)
				$g[4]=new SolidPen(0, 0, GREEN)
				$g[5]=new SolidPen(0, 0, BLUE)
				$g[6]=new SolidPen(0, 0, YELLOW)
				$g[7]=new SolidPen(0, 0, MAGENTA)
				$g[8]=new SolidPen(0, 0, CYAN)
				$g[9]=new SolidPen(0, 0, GRAY32)
				$g[10]=new SolidPen(0, 0, GRAY64)
				$g[11]=new SolidPen(0, 0, GRAY96)
				$g[12]=new SolidPen(0, 0, GRAY128)
				$g[13]=new SolidPen(0, 0, GRAY160)
				$g[14]=new SolidPen(0, 0, GRAY192)
				$g[15]=new SolidPen(0, 0, GRAY224)
				$g[16]=new SolidBrush(BLACK)
				$g[17]=new SolidBrush(WHITE)
				$g[18]=new SolidBrush(RED)
				$g[19]=new SolidBrush(GREEN)
				$g[20]=new SolidBrush(BLUE)
				$g[21]=new SolidBrush(YELLOW)
				$g[22]=new SolidBrush(MAGENTA)
				$g[23]=new SolidBrush(CYAN)
				$g[24]=new SolidBrush(GRAY32)
				$g[25]=new SolidBrush(GRAY64)
				$g[26]=new SolidBrush(GRAY96)
				$g[27]=new SolidBrush(GRAY128)
				$g[28]=new SolidBrush(GRAY160)
				$g[29]=new SolidBrush(GRAY192)
				$g[30]=new SolidBrush(GRAY224)
				$g[31]=newArray()
				$g[32]=newArray()
				$g[33]=newArray()
				setVirtualWindow(0, 0, W, H, 1)
				$g[34]=new SolidBrush(rgba(0, 0.56000000000000005, 0.16))
				$g[35]=new Font("Open Sans", 14)
				$g[36]=new Font("Open Sans", 16)
				$g[37]=new Font("Open Sans", 18)
				$g[38]=new Font("Open Sans", 24, SMALLCAPS)
				$g[39]=new Font("Open Sans", 28, 0)
				setBgBrush($g[30])
				$g[40]=new Rectangle2($g[0], 0, HCENTRE|VCENTRE, 0, $g[34], W/4, 2, W/2, SZ, $g[2], $g[39], "Sieve of Eratosthenes")
				$g[40].setRounded(5, 5)
				$g[41]=(W-8*SZ)/2
				$g[42]=(H-N/8*SZ-SZ)/2
				$g[43]=0
				$pc = 1
			case 1:
				if (!($g[43]<(N+7)/8)) {
					$pc = 3
					continue
				}
				$g[31][$g[43]]=255
				$pc = 2
			case 2:
				$g[43]++
				$pc = 1
				continue
			case 3:
				clearBit(0)
				clearBit(1)
				$g[43]=N+1
				$pc = 4
			case 4:
				if (!($g[43]<(N+7)/8*8)) {
					$pc = 6
					continue
				}
				clearBit($g[43])
				$pc = 5
			case 5:
				$g[43]++
				$pc = 4
				continue
			case 6:
				$g[43]=0
				$pc = 7
			case 7:
				if (!($g[43]<=N)) {
					$pc = 9
					continue
				}
				$g[32][$g[43]]=new R($g[0], $g[41]+8*SZ-$g[43]%8*SZ-SZ, $g[42]+(0|($g[43]/8))*SZ, $g[43])
				$pc = 8
			case 8:
				$g[43]++
				$pc = 7
				continue
			case 9:
				$g[43]=0
				$pc = 10
			case 10:
				if (!($g[43]<N/8)) {
					$pc = 12
					continue
				}
				$g[33][$g[43]]=new Txt($g[0], 0, HLEFT|VCENTRE, $g[41]+8*SZ+SZ, $g[42]+$g[43]*SZ+SZ/2, $g[3], $g[36])
				setAddrData($g[43])
				$pc = 11
			case 11:
				$g[43]++
				$pc = 10
				continue
			case 12:
				$g[44]=new Txt($g[0], 0, HLEFT, $g[41], H-SZ, $g[1], $g[37], "Click to start...")
				$g[45]=new Txt($g[0], 0, HRIGHT, $g[41]+8*SZ, H-SZ, $g[1], $g[37], "primes=0")
				$pc = 13
				if (wait(1)) {
					return
				}
			case 13:
				$g[46]=0
				$g[47]=2
				$pc = 14
			case 14:
				if (!($g[47]<=N)) {
					$pc = 26
					continue
				}
				if (!(bit($g[47]))) {
					$pc = 24
					continue
				}
				$g[32][$g[47]].$highlight()
				$g[44].setTxt("%d prime", $g[47])
				$g[45].setTxt("primes=%d", ++$g[46])
				$g[48]=$g[47]*2
				$pc = 15
			case 15:
				if (!($g[48]<=N)) {
					$pc = 18
					continue
				}
				$g[44].setTxt("%d prime, clearing multiples of %d", $g[47], $g[47])
				$pc = 16
				if (wait(TPS)) {
					return
				}
			case 16:
				$g[32][$g[48]].$clear()
				setAddrData(0|($g[48]/8))
				$pc = 17
			case 17:
				$g[48]+=$g[47]
				$pc = 15
				continue
			case 18:
				checkPoint()
				$pc = 19
				if (wait(TPS)) {
					return
				}
			case 19:
				$g[48]=$g[47]*2
				$pc = 20
			case 20:
				if (!($g[48]<=N)) {
					$pc = 22
					continue
				}
				$g[32][$g[48]].setPen(0)
				$g[32][$g[48]].setBrush($g[30])
				$pc = 21
			case 21:
				$g[48]+=$g[47]
				$pc = 20
				continue
			case 22:
				$pc = 23
				if (wait(TPS)) {
					return
				}
			case 23:
				$g[44].setTxt("")
				$pc = 24
			case 24:
				$pc = 25
			case 25:
				$g[47]++
				$pc = 14
				continue
			case 26:
				debug("FINISHED tick=%d", getTick())
				$return(0)
				continue
			}
		}
	}

	this.$getCurrentThread = $getCurrentThread
	this.$execute = $execute
	this.$resumeThread = $resumeThread
	this.$suspendThread = $suspendThread
	this.$switchToThread = $switchToThread
	this.$testFlag = $testFlag

}

// eof
