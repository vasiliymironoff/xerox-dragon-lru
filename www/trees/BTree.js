// generated by VivioJS 22.02 build 0 : 14-Feb-22 14:28:19

"use strict"

function BTree(vplayer) {

	// preload fonts
	let font = new FontFace('Open Sans', 'url("../fonts/open-sans-v18-latin-regular.woff")', {weight:400})
	font.load()
	document.fonts.add(font)

	// const imports
	const ABSOLUTE = vplayer.ABSOLUTE
	const ARROW40_END = vplayer.ARROW40_END
	const BLACK = vplayer.BLACK
	const BLUE = vplayer.BLUE
	const CYAN = vplayer.CYAN
	const GRAY128 = vplayer.GRAY128
	const GRAY160 = vplayer.GRAY160
	const GRAY192 = vplayer.GRAY192
	const GRAY224 = vplayer.GRAY224
	const GRAY32 = vplayer.GRAY32
	const GRAY64 = vplayer.GRAY64
	const GRAY96 = vplayer.GRAY96
	const GREEN = vplayer.GREEN
	const HLEFT = vplayer.HLEFT
	const MAGENTA = vplayer.MAGENTA
	const MB_LEFT = vplayer.MB_LEFT
	const PROPAGATE = vplayer.PROPAGATE
	const RED = vplayer.RED
	const ROUND_END = vplayer.ROUND_END
	const VTOP = vplayer.VTOP
	const WHITE = vplayer.WHITE
	const YELLOW = vplayer.YELLOW

	// var imports
	var $addWaitToEventQ = vplayer.$addWaitToEventQ
	var $g = vplayer.$g
	var $terminateThread = vplayer.$terminateThread
	var checkPoint = vplayer.checkPoint
	var debug = vplayer.debug
	var Ellipse = vplayer.Ellipse
	var EXTENDEDGOBJ = vplayer.EXTENDEDGOBJ
	var Font = vplayer.Font
	var getArgAsNum = vplayer.getArgAsNum
	var getTick = vplayer.getTick
	var Group = vplayer.Group
	var Layer = vplayer.Layer
	var Line = vplayer.Line
	var Line2 = vplayer.Line2
	var newArray = vplayer.newArray
	var Rectangle = vplayer.Rectangle
	var Rectangle2 = vplayer.Rectangle2
	var reset = vplayer.reset
	var rgba = vplayer.rgba
	var setBgBrush = vplayer.setBgBrush
	var setTPS = vplayer.setTPS
	var setVirtualWindow = vplayer.setVirtualWindow
	var SolidBrush = vplayer.SolidBrush
	var SolidPen = vplayer.SolidPen
	var start = vplayer.start
	var Txt = vplayer.Txt
	var VObj = vplayer.VObj

	// const declarations
	const W=1024
	const H=620
	const TITLEH=48
	const SZ=28
	const BORDER=2
	const ORDER=2
	const NKEY=2*ORDER
	const NW=NKEY*SZ+2*BORDER
	const NH=SZ+2*BORDER
	const VSPACE=120
	const TICKS=50

	var $thread = 0
	var $pc = 0
	var $fp = -1
	var $sp = -1
	var $acc = 0
	var $obj = 0
	var $stack = 0
	var $testFlag = 0

	function $call(pc, obj) {
		if (obj === undefined)
			obj = 0
		let l = arguments.length - 1
		for (let i = l; i >= 2; i--)
			$stack[++$sp] = arguments[i]
		$acc = obj
		$stack[++$sp] = $pc + 1
		$pc = pc
		return $acc
	}

	function $enter(n) {	// n = # local variables
		$stack[++$sp] = $obj
		$stack[++$sp] = $fp
		$fp = $sp
		$obj = $acc
		$sp += n
	}

	function $return(n) {	// n = # parameters to pop
		$sp = $fp
		$fp = $stack[$sp--]
		$obj = $stack[$sp--]
		$pc = $stack[$sp--]
		if ($pc == -1) {
			$terminateThread($thread)
			$thread = 0
			return
		}
		$sp -= n
	}

	function $suspendThread() {
		if ($thread == 0)
			return 0;
		$thread.pc = $pc
		$thread.fp = $fp
		$thread.sp = $sp
		$thread.acc = $acc
		$thread.obj = $obj
		return $thread
	}

	function $getCurrentThread() {
		return $thread
	}

	function $resumeThread(toThread) {
		$pc = toThread.pc
		$fp = toThread.fp
		$sp = toThread.sp
		$acc = toThread.acc
		$obj = toThread.obj
		$stack = toThread.stack
		$thread = toThread
	}

	function $switchToThread(toThread) {
		if ($thread == toThread) {
			$acc = toThread.acc
			return
		}
		$suspendThread()
		$resumeThread(toThread)
	}

	function wait(ticks) {
		$suspendThread()
		$addWaitToEventQ(ticks, $thread)	// -ve ticks for a realtime wait
		return 1
	}

	function SimpleButton($grp, x, y, w, h, _b0, _b1, p0, _p1, txtpen, _f1, _f2, txt) {
		Group.call(this, $grp, 0, ((0) | EXTENDEDGOBJ), x, y, 0, 0, w, h)
		this.$b0=_b0
		this.$b1=_b1
		this.$p1=_p1
		this.$f1=_f1
		this.$f2=_f2
		this.$enabled=1
		this.setPen(p0)
		this.setBrush(this.$b0)
		this.setTxtPen(txtpen)
		this.setFont(this.$f1)
		this.setTxt(txt)
		this.setRounded(4, 4)
		this.$buttonFG=new Rectangle2(this, 0, 0, 0, 0, 1, 1, w-2, h-2)
		this.$buttonFG.setRounded(4, 4)
		this.addEventHandler("eventEE", this, this.$eh0)
		this.addEventHandler("eventMB", this, this.$eh1)
	}
	SimpleButton.prototype = Object.create(Group.prototype)

	SimpleButton.prototype.$eh0 = function(enter, $1, $2) {
		this.setBrush(enter ? this.$b1 : this.$b0)
		return PROPAGATE
	}

	SimpleButton.prototype.$eh1 = function(down, $1, $2, $3) {
		if (this.$enabled) {
			this.setFont(down ? this.$f2 : this.$f1)
			this.$buttonFG.setPen(down ? this.$p1 : 0)
		}
		return PROPAGATE
	}

	function BTree() {
		VObj.call(this)
		this.$root=0
		this.$h
		this.$uKey
		this.$uNode
		this.$nlevel=newArray()
		this.$first=newArray()
		this.$maxLevel=0
		this.$nlevel[0]=0
		this.$first[0]=0
	}
	BTree.prototype = Object.create(VObj.prototype)

	BTree.prototype.$Node = function($parent, $grp) {
		this.parent = $parent
		Group.call(this, $grp, 0, ((0) | EXTENDEDGOBJ), 0, 0, -NW/2, -NH/2, NW, NH)
		this.$m=0
		this.$key=newArray()
		this.$link=newArray()
		this.$parent=0
		this.$next=0
		this.$emptyBox=newArray()
		this.$box=newArray()
		this.setBrush($g[19])
		this.setPos(W/2, VSPACE)
		this.$x=-ORDER*SZ+SZ/2
		for (this.$i=0; this.$i<NKEY; this.$i++, this.$x+=SZ) {
			this.parent = $parent
			this.$key[this.$i]=0
			this.$link[this.$i]=0
			this.$emptyBox[this.$i]=new this.$EmptyBox(this, this, this.$i, this.$x)
			this.$box[this.$i]=new Rectangle(this, 0, 0, $g[1], $g[17], this.$x, 0, -SZ/2, -SZ/2, SZ, SZ, $g[1], $g[40])
		}
		this.$link[NKEY]=0
		this.$arrow=new Line(this, $g[31], 0, $g[33], 0, 0, 0, 0, 0, -SZ/2)
		this.$arrow.setOpacity(0)
		this.setOpacity(0)
		this.setOpacity(1, TICKS, 0)
		this.addEventHandler("eventUPDATED", this, this.$eh3)
	}
	BTree.prototype.$Node.prototype = Object.create(Group.prototype)

	BTree.prototype.$Node.prototype.$EmptyBox = function($parent, $grp, i, x) {
		this.parent = $parent
		Rectangle.call(this, $grp, 0, ((0) | EXTENDEDGOBJ), $g[1], $g[17], x, 0, -SZ/2, -SZ/2, SZ, SZ)
		this.$indx=i
		this.addEventHandler("eventMB", this, this.$eh2)
	}
	BTree.prototype.$Node.prototype.$EmptyBox.prototype = Object.create(Rectangle.prototype)

	BTree.prototype.$Node.prototype.$EmptyBox.prototype.$eh2 = function(down, flags, $2, $3) {
		if (down&&(flags&MB_LEFT)) {
			$g[60]=this.parent.$key[this.$indx]
			$g[61].setTxt("%d", $g[60])
		}
	}

	BTree.prototype.$Node.prototype.$getLevel = function() {
		let level=0
		for (let p=this.$parent; p; p=p.$parent)
		level++
		return level
	}

	BTree.prototype.$Node.prototype.$set = function() {
		for (let i=0; i<NKEY; i++) {
			this.$box[i].setPos(this.$emptyBox[i].getPosX(1), this.$emptyBox[i].getPosY(1))
			if (i<this.$m) {
				this.$box[i].setTxt("%d", this.$key[i])
			} else {
				this.$box[i].setTxt("")
			}
		}
		for (let j=0; j<=this.$m; j++) {
			if (this.$link[j]) {
				this.$link[j].$parent=this
				this.$link[j].$arrow.setOpacity(1)
			}
		}
		this.update()
	}

	BTree.prototype.$Node.prototype.$trackBall = function(i) {
		$g[50].setPos(this.$emptyBox[i].getPosX(2), this.$emptyBox[i].getPosY(2), TICKS, 0)
	}

	BTree.prototype.$Node.prototype.$trackSquare = function(i) {
		let x=this.$box[i].getPosX(2)
		$g[51].setPos(x, this.$getLevel()*VSPACE+VSPACE, TICKS, 0)
	}

	BTree.prototype.$Node.prototype.$animateUpKey = function(i) {
		this.$box[i].translate((NKEY-i)*SZ+BORDER, -SZ, TICKS, 0)
	}

	BTree.prototype.$Node.prototype.$animateMoveKeys = function(i, dstN, j, k, moveLeftLink) {
		if (k>0) {
			let dx=dstN.$emptyBox[j].getPosX(2)-this.$emptyBox[i].getPosX(2)
			for (let ii=0; ii<k; ii++) {
				this.$box[i+ii].moveToFront()
				this.$box[i+ii].translate(dx, 0, TICKS, 0)
				if (this.$link[i+ii+1])
				this.$link[i+ii+1].$arrow.translatePt(0, dx, 0, TICKS, 0)
			}
			if (moveLeftLink&&this.$link[i])
			this.$link[i].$arrow.translatePt(0, dx, 0, TICKS, 0)
		}
	}

	BTree.prototype.$Node.prototype.$moveKeys = function(i, dstN, j, k, moveLeftLink) {
		if (k>0) {
			let ii
			if ((this==dstN)&&(j>=i)) {
				for (ii=k-1; ii>=0; ii--) {
					dstN.$key[j+ii]=this.$key[i+ii]
					dstN.$link[j+ii+1]=this.$link[i+ii+1]
					this.$link[i+ii+1]=0
				}
			} else {
				for (ii=0; ii<k; ii++) {
					dstN.$key[j+ii]=this.$key[i+ii]
					dstN.$link[j+ii+1]=this.$link[i+ii+1]
					this.$link[i+ii+1]=0
				}
			}
			if (moveLeftLink&&this.$link[i]) {
				dstN.$link[j]=this.$link[i]
				this.$link[i]=0
			}
		}
	}

	BTree.prototype.$Node.prototype.$animateMoveKey = function(i, dstN, j) {
		this.$box[i].moveToFront()
		this.$box[i].translate(dstN.$box[j].getPosX(2)-this.$emptyBox[i].getPosX(2), dstN.$box[j].getPosY(2)-this.$emptyBox[i].getPosY(2), TICKS, 0)
	}

	BTree.prototype.$Node.prototype.$moveKey = function(i, dstN, j) {
		dstN.$key[j]=this.$key[i]
		this.$box[i].setTxt("")
	}

	BTree.prototype.$Node.prototype.$animateMoveLink = function(i, dstN, j) {
		if (this.$link[i]) {
			let dx
			if (i==NKEY) {
				dx=dstN.$emptyBox[j].getPosX(2)-this.$emptyBox[i-1].getPosX(2)-SZ
			} else {
				dx=dstN.$emptyBox[j].getPosX(2)-this.$emptyBox[i].getPosX(2)
			}
			this.$link[i].$arrow.translatePt(0, dx, dstN.$emptyBox[0].getPosY(2)-this.$emptyBox[0].getPosY(2), TICKS, 0)
		}
	}

	BTree.prototype.$Node.prototype.$moveLink = function(i, dstN, j) {
		dstN.$link[j]=this.$link[i]
	}

	BTree.prototype.$Node.prototype.$print = function() {
		debug("print Node")
		debug("m=%d", this.$m)
		debug("keys")
		for (let i=0; i<this.$m; i++)
		debug("%s", this.$box[i].getTxt())
		debug("links")
		for (let j=0; j<=this.$m; j++) {
			if (this.$link[j]) {
				debug("link[%d] %s", j, this.$link[j].$box[0].getTxt())
				if (this.$link[j].$parent!=this)
				debug("link[%d].parent != this", j)
			}
		}
		if (this.$parent)
		debug("parent = %s", this.$parent.$box[0].getTxt())
	}

	BTree.prototype.$Node.prototype.$eh3 = function() {
		let i
		if (this.$parent) {
			this.$arrow.setOpacity(1)
			for (i=0; i<=NKEY; i++) {
				if (this.$parent.$link[i]==this) {
					if (i==NKEY) {
						this.$arrow.setPt(0, this.$parent.getMbb(1).getX()-this.getMbb(1).getX()+this.$box[i-1].getMbb(1).getX()+SZ, this.$parent.getMbb(1).getY()-this.getMbb(1).getY()+SZ/2)
					} else {
						this.$arrow.setPt(0, this.$parent.getPosX(1)-this.getPosX(1)+this.$box[i].getPosX(1)-SZ/2, this.$parent.getPosY(1)-this.getPosY(1)+SZ/2)
					}
					break
				}
			}
		} else {
			this.$arrow.setOpacity(0)
		}
		for (i=0; i<=this.$m; i++) {
			if (this.$link[i]) {
				this.$link[i].$arrow.setPt(0, this.getMbb(1).getX()-this.$link[i].getMbb(1).getX()+(i-ORDER)*SZ, this.getMbb(1).getY()-this.$link[i].getMbb(1).getY()+SZ/2)
			}
		}
	}

	BTree.prototype.$repositionNodes = function(level) {
		let cnt=this.$nlevel[level]
		let x=W/2-(cnt*NW+(cnt-1)*SZ)/2+NW/2
		let y=level*VSPACE+VSPACE
		for (let p=this.$first[level]; p; p=p.$next) {
			p.setPos(x, y, TICKS, 0)
			x+=NW+SZ
		}
	}

	function $execute(thread) {

		$switchToThread(thread);

		while (1) {
			switch ($pc) {
			case -1:
				return;		// catch thread termination
			case 0:
				$enter(0)	// start with a function call
				$g[1]=new SolidPen(0, 0, BLACK)
				$g[2]=new SolidPen(0, 0, WHITE)
				$g[3]=new SolidPen(0, 0, RED)
				$g[4]=new SolidPen(0, 0, GREEN)
				$g[5]=new SolidPen(0, 0, BLUE)
				$g[6]=new SolidPen(0, 0, YELLOW)
				$g[7]=new SolidPen(0, 0, MAGENTA)
				$g[8]=new SolidPen(0, 0, CYAN)
				$g[9]=new SolidPen(0, 0, GRAY32)
				$g[10]=new SolidPen(0, 0, GRAY64)
				$g[11]=new SolidPen(0, 0, GRAY96)
				$g[12]=new SolidPen(0, 0, GRAY128)
				$g[13]=new SolidPen(0, 0, GRAY160)
				$g[14]=new SolidPen(0, 0, GRAY192)
				$g[15]=new SolidPen(0, 0, GRAY224)
				$g[16]=new SolidBrush(BLACK)
				$g[17]=new SolidBrush(WHITE)
				$g[18]=new SolidBrush(RED)
				$g[19]=new SolidBrush(GREEN)
				$g[20]=new SolidBrush(BLUE)
				$g[21]=new SolidBrush(YELLOW)
				$g[22]=new SolidBrush(MAGENTA)
				$g[23]=new SolidBrush(CYAN)
				$g[24]=new SolidBrush(GRAY32)
				$g[25]=new SolidBrush(GRAY64)
				$g[26]=new SolidBrush(GRAY96)
				$g[27]=new SolidBrush(GRAY128)
				$g[28]=new SolidBrush(GRAY160)
				$g[29]=new SolidBrush(GRAY192)
				$g[30]=new SolidBrush(GRAY224)
				setVirtualWindow(0, 0, W, H, 1)
				setBgBrush($g[30])
				setTPS(TICKS)
				$g[31]=new Layer(1)
				$g[32]=new Layer(2)
				$g[33]=new SolidPen(0, 1, BLACK, ARROW40_END, 8, 8)
				$g[34]=new SolidPen(0, 2, GRAY64, ROUND_END)
				$g[35]=new SolidBrush(rgba(0, 0.5, 0))
				$g[36]=new SolidBrush(rgba(0, 0.56000000000000005, 0.16))
				$g[37]=new Font("Open Sans", 16)
				$g[38]=new Font("Open Sans", 14, 0)
				$g[39]=new Font("Open Sans", 12, 0)
				$g[40]=new Font("Open Sans", 16, 0)
				$g[41]=new Font("Open Sans", 14, 0)
				$g[42]=new Font("Open Sans", 32, 0)
				$g[43]=new Font("Open Sans", 20, 0)
				$g[44]=new Rectangle2($g[0], 0, 0, 0, $g[36], 5, 5, W/2, TITLEH, $g[2], $g[42], "BTree")
				$g[44].setRounded(5, 5)
				$g[44].setTxtOff(0, 2)
				$g[44].setPt(1, $g[44].getTxtW()+16, TITLEH)
				$g[45]=new Txt($g[0], 0, HLEFT|VTOP, 5, H-100, $g[1], $g[43])
				$g[46]=new Txt($g[0], 0, HLEFT|VTOP, 5, H-70, $g[1], $g[43])
				$g[47]=new Txt($g[0], 0, HLEFT|VTOP, 5, H-40, $g[1], $g[43])
				$g[48]=new Line2($g[0], 0, ABSOLUTE, $g[1], W/2-4, 20, W/2+4, 20)
				$g[49]=new Line2($g[0], 0, ABSOLUTE, $g[33], W/2, 20, W/2, VSPACE-SZ/2)
				$g[50]=new Ellipse($g[0], $g[32], 0, $g[1], $g[18], 0, 0, -SZ/2, -SZ/2, SZ, SZ, $g[1], $g[40])
				$g[50].setOpacity(0)
				$g[51]=new Rectangle($g[0], $g[32], 0, $g[1], $g[22], 0, 0, -SZ/2, -SZ/2, SZ, SZ, $g[1], $g[40])
				$g[51].setOpacity(0)
				$g[52]=new Ellipse($g[0], 0, 0, 0, $g[16], 0, 0, -SZ/4, -SZ/4, SZ/2, SZ/2)
				$g[52].setOpacity(0)
				$g[53]=0
				$g[54]=new SimpleButton($g[0], 760, 10, 90, 25, $g[17], $g[30], $g[34], $g[12], $g[1], $g[38], $g[39], "sequence 1")
				$g[55]=new SimpleButton($g[0], 760, 40, 90, 25, $g[17], $g[30], $g[34], $g[12], $g[1], $g[38], $g[39], "sequence 2")
				$g[56]=new SimpleButton($g[0], 760, 70, 90, 25, $g[17], $g[30], $g[34], $g[12], $g[1], $g[38], $g[39], "reset")
				$g[57]=new SimpleButton($g[0], 860, 10, 90, 25, $g[17], $g[30], $g[34], $g[12], $g[1], $g[38], $g[39], "find")
				$g[58]=new SimpleButton($g[0], 860, 40, 90, 25, $g[17], $g[30], $g[34], $g[12], $g[1], $g[38], $g[39], "add")
				$g[59]=new SimpleButton($g[0], 860, 70, 90, 25, $g[17], $g[30], $g[34], $g[12], $g[1], $g[38], $g[39], "remove")
				$g[60]=50
				$g[61]=new Rectangle2($g[0], 0, 0, $g[1], $g[18], W-10-45, 5+(95-45)/2, 45, 45, $g[1], $g[37], "%d", $g[60])
				$g[61].setRounded(5, 5)
				$g[62]="Press sequence 1 or 2 to run a preset sequence of add and remove operations.\n\n"
				$g[62]+="You can also update the btree by pressing the add or remove buttons\n"
				$g[62]+="AFTER selecting an existing node or entering a value [0..99] in the red box."
				new Txt($g[0], 0, HLEFT|VTOP, W/2, H-80, $g[1], $g[41], $g[62])
				$g[0].addEventHandler("eventKEY", 0, 197)
				$g[57].addEventHandler("eventMB", $obj, 208)
				$g[58].addEventHandler("eventMB", $obj, 211)
				$g[59].addEventHandler("eventMB", $obj, 214)
				$g[54].addEventHandler("eventMB", $obj, 217)
				$g[55].addEventHandler("eventMB", $obj, 264)
				$g[56].addEventHandler("eventMB", $obj, 282)
				$g[63]=new BTree()
				if (!(getArgAsNum("selfTest", 0))) {
					$pc = 62
					continue
				}
				$call(120, $g[63], 200)
				continue
			case 1:
				$call(120, $g[63], 300)
				continue
			case 2:
				$call(120, $g[63], 100)
				continue
			case 3:
				$call(120, $g[63], 400)
				continue
			case 4:
				$call(120, $g[63], 50)
				continue
			case 5:
				$call(181, $g[63], 50)
				continue
			case 6:
				$call(120, $g[63], 250)
				continue
			case 7:
				$call(181, $g[63], 250)
				continue
			case 8:
				$call(120, $g[63], 350)
				continue
			case 9:
				$call(181, $g[63], 350)
				continue
			case 10:
				$call(120, $g[63], 450)
				continue
			case 11:
				$call(181, $g[63], 450)
				continue
			case 12:
				$call(120, $g[63], 200)
				continue
			case 13:
				$call(181, $g[63], 500)
				continue
			case 14:
				$call(120, $g[63], 10)
				continue
			case 15:
				$call(120, $g[63], 20)
				continue
			case 16:
				$call(120, $g[63], 30)
				continue
			case 17:
				$call(120, $g[63], 40)
				continue
			case 18:
				$call(120, $g[63], 50)
				continue
			case 19:
				$call(120, $g[63], 60)
				continue
			case 20:
				$call(120, $g[63], 70)
				continue
			case 21:
				$call(120, $g[63], 80)
				continue
			case 22:
				$call(120, $g[63], 90)
				continue
			case 23:
				$call(120, $g[63], 110)
				continue
			case 24:
				$call(120, $g[63], 120)
				continue
			case 25:
				$call(120, $g[63], 130)
				continue
			case 26:
				$call(120, $g[63], 6)
				continue
			case 27:
				$call(120, $g[63], 4)
				continue
			case 28:
				$call(120, $g[63], 2)
				continue
			case 29:
				$call(181, $g[63], 2)
				continue
			case 30:
				$call(120, $g[63], 36)
				continue
			case 31:
				$call(120, $g[63], 34)
				continue
			case 32:
				$call(120, $g[63], 32)
				continue
			case 33:
				$call(181, $g[63], 32)
				continue
			case 34:
				$call(120, $g[63], 66)
				continue
			case 35:
				$call(120, $g[63], 64)
				continue
			case 36:
				$call(120, $g[63], 62)
				continue
			case 37:
				$call(181, $g[63], 62)
				continue
			case 38:
				$call(181, $g[63], 64)
				continue
			case 39:
				$call(181, $g[63], 66)
				continue
			case 40:
				$call(120, $g[63], 92)
				continue
			case 41:
				$call(181, $g[63], 92)
				continue
			case 42:
				$call(120, $g[63], 240)
				continue
			case 43:
				$call(120, $g[63], 230)
				continue
			case 44:
				$call(120, $g[63], 220)
				continue
			case 45:
				$call(120, $g[63], 76)
				continue
			case 46:
				$call(120, $g[63], 74)
				continue
			case 47:
				$call(120, $g[63], 72)
				continue
			case 48:
				$call(181, $g[63], 220)
				continue
			case 49:
				$call(120, $g[63], 66)
				continue
			case 50:
				$call(120, $g[63], 64)
				continue
			case 51:
				$call(120, $g[63], 62)
				continue
			case 52:
				$call(120, $g[63], 69)
				continue
			case 53:
				$call(120, $g[63], 68)
				continue
			case 54:
				$call(120, $g[63], 67)
				continue
			case 55:
				$call(181, $g[63], 76)
				continue
			case 56:
				$call(181, $g[63], 80)
				continue
			case 57:
				$call(181, $g[63], 90)
				continue
			case 58:
				$call(87, $g[63], 69)
				continue
			case 59:
				$call(87, $g[63], 68)
				continue
			case 60:
				$call(87, $g[63], 73)
				continue
			case 61:
				debug("FINISHED tick=%d errors=0", getTick())
				$pc = 62
			case 62:
				$return(0)
				continue
			case 63:
				$enter(2);	// trackBallAlongLink
				$stack[$fp+1]=$obj.$link[$stack[$fp-3]]
				$stack[$fp+2]=$obj.$getLevel()
				if (!($stack[$fp+1])) {
					$pc = 65
					continue
				}
				$g[50].setPos($obj.getPosX(2)+($stack[$fp-3]-ORDER)*SZ, ($stack[$fp+2]+1)*VSPACE+SZ)
				$pc = 64
				if ($g[50].setPos($stack[$fp+1].getPosX(2), ($stack[$fp+2]+2)*VSPACE-SZ-2*BORDER, TICKS, 1)) {
					return
				}
			case 64:
				$pc = 65
			case 65:
				$return(1)
				continue
			case 66:
				$enter(2);	// trackDotAlongLink
				$stack[$fp+1]=$obj.$link[$stack[$fp-3]]
				$stack[$fp+2]=$obj.$getLevel()
				$g[52].setOpacity(1)
				if (!($stack[$fp+1])) {
					$pc = 69
					continue
				}
				$g[52].setPos($obj.getPosX(2)+($stack[$fp-3]-ORDER)*SZ, ($stack[$fp+2]+1)*VSPACE+SZ/2)
				$pc = 67
				if ($g[52].setPos($stack[$fp+1].getPosX(2), ($stack[$fp+2]+2)*VSPACE-SZ/2-2*BORDER, TICKS, 1)) {
					return
				}
			case 67:
				$pc = 68
				if (wait(TICKS)) {
					return
				}
			case 68:
				$pc = 69
			case 69:
				$return(1)
				continue
			case 70:
				$enter(0);	// trackBallStart
				$g[50].setBrush($stack[$fp-4]==0 ? $g[35] : $stack[$fp-4]==1 ? $g[18] : $g[16])
				$g[50].setTxtPen($stack[$fp-4]==0 ? $g[2] : $stack[$fp-4]==1 ? $g[1] : $g[2])
				$g[50].setTxt("%d", $stack[$fp-3])
				$g[50].setPos(W/2, 20)
				$g[50].setOpacity(1)
				$pc = 71
				if ($g[50].setPos(W/2, VSPACE-NH, TICKS, 1)) {
					return
				}
			case 71:
				$return(2)
				continue
			case 72:
				$enter(6);	// split
				$stack[$fp+1]=$stack[$fp-3].$getLevel()
				$stack[$fp+2]=new $obj.$Node($obj, $g[0])
				$stack[$fp+3]=$obj.$nlevel[$stack[$fp+1]]+=1
				$stack[$fp+2].$next=$stack[$fp-3].$next
				$stack[$fp-3].$next=$stack[$fp+2]
				$stack[$fp+4]=W/2-($stack[$fp+3]*NW+($stack[$fp+3]-1)*SZ)/2+NW/2
				$stack[$fp+5]=$stack[$fp+1]*VSPACE+VSPACE
				$stack[$fp+6]=$obj.$first[$stack[$fp+1]]
				$pc = 73
			case 73:
				if (!($stack[$fp+6])) {
					$pc = 75
					continue
				}
				$stack[$fp+6].setPos($stack[$fp+4], $stack[$fp+5], ($stack[$fp+6]==$stack[$fp+2]) ? 0 : TICKS, 0)
				$stack[$fp+4]+=NW+SZ
				$pc = 74
			case 74:
				$stack[$fp+6]=$stack[$fp+6].$next
				$pc = 73
				continue
			case 75:
				$pc = 76
				if (wait(TICKS)) {
					return
				}
			case 76:
				$acc = $stack[$fp+2]
				$return(1)
				continue
			case 77:
				$enter(2);	// find1
				if (!($stack[$fp-3]==0)) {
					$pc = 78
					continue
				}
				$g[46].setTxt("NOT found", $stack[$fp-4])
				$return(2)
				continue
			case 78:
				$g[46].setTxt("look for key in Node %d", $stack[$fp-3].$key[0])
				$stack[$fp+1]=0
				$pc = 79
			case 79:
				if (!($stack[$fp+1]<$stack[$fp-3].$m)) {
					$pc = 84
					continue
				}
				$pc = 80
				if ($stack[$fp-3].$box[$stack[$fp+1]].toggleBrushAndPens($g[18], $g[1], $stack[$fp-3].$box[$stack[$fp+1]].getTxtPen(), 4, TICKS/2, 1)) {
					return
				}
			case 80:
				if (!(($stack[$fp-4]<=$stack[$fp-3].$key[$stack[$fp+1]]))) {
					$pc = 82
					continue
				}
				if (!($stack[$fp-4]==$stack[$fp-3].$key[$stack[$fp+1]])) {
					$pc = 81
					continue
				}
				$g[46].setTxt("FOUND", $stack[$fp-4])
				$obj.$h=0
				$return(2)
				continue
			case 81:
				$pc = 84
				continue
			case 82:
				$pc = 83
			case 83:
				$stack[$fp+1]++
				$pc = 79
				continue
			case 84:
				$call(63, $stack[$fp-3], $stack[$fp+1])
				continue
			case 85:
				$call(77, $obj, $stack[$fp-3].$link[$stack[$fp+1]], $stack[$fp-4])
				continue
			case 86:
				$return(2)
				continue
			case 87:
				$enter(0);	// find
				$g[45].setTxt("find(%d)", $stack[$fp-3])
				$g[46].setTxt("")
				$g[47].setTxt("")
				$call(70, $obj, $stack[$fp-3], 0)
				continue
			case 88:
				$call(77, $obj, $obj.$root, $stack[$fp-3])
				continue
			case 89:
				$pc = 90
				if ($g[50].setOpacity(0, TICKS, 1)) {
					return
				}
			case 90:
				checkPoint()
				$return(1)
				continue
			case 91:
				$enter(3);	// search
				if (!($stack[$fp-4]==0)) {
					$pc = 92
					continue
				}
				$obj.$h=1
				$obj.$uKey=$stack[$fp-3]
				$obj.$uNode=0
				$return(2)
				continue
			case 92:
				$g[46].setTxt("look for key in Node %d", $stack[$fp-4].$key[0])
				$stack[$fp+1]=0
				$pc = 93
			case 93:
				if (!($stack[$fp+1]<$stack[$fp-4].$m)) {
					$pc = 98
					continue
				}
				$pc = 94
				if ($stack[$fp-4].$box[$stack[$fp+1]].toggleBrushAndPens($g[18], $g[1], $stack[$fp-4].$box[$stack[$fp+1]].getTxtPen(), 4, TICKS/2, 1)) {
					return
				}
			case 94:
				if (!(($stack[$fp-3]<=$stack[$fp-4].$key[$stack[$fp+1]]))) {
					$pc = 96
					continue
				}
				if (!($stack[$fp-3]==$stack[$fp-4].$key[$stack[$fp+1]])) {
					$pc = 95
					continue
				}
				$g[46].setTxt("key %d already in btree", $stack[$fp-3])
				$obj.$h=0
				$return(2)
				continue
			case 95:
				$pc = 98
				continue
			case 96:
				$pc = 97
			case 97:
				$stack[$fp+1]++
				$pc = 93
				continue
			case 98:
				$call(63, $stack[$fp-4], $stack[$fp+1])
				continue
			case 99:
				$call(91, $obj, $stack[$fp-3], $stack[$fp-4].$link[$stack[$fp+1]])
				continue
			case 100:
				if (!($obj.$h)) {
					$pc = 119
					continue
				}
				if (!($stack[$fp-4].$m<NKEY)) {
					$pc = 105
					continue
				}
				$g[46].setTxt("insert key %d into Node %d", $obj.$uKey, $stack[$fp-4].$key[0])
				if (!($stack[$fp+1]==$stack[$fp-4].$m)) {
					$pc = 101
					continue
				}
				$stack[$fp-4].$trackBall($stack[$fp+1])
				$stack[$fp-4].$trackSquare($stack[$fp+1])
				$pc = 102
				continue
			case 101:
				$stack[$fp-4].$animateMoveKeys($stack[$fp+1], $stack[$fp-4], $stack[$fp+1]+1, $stack[$fp-4].$m-$stack[$fp+1], 0)
				$stack[$fp-4].$moveKeys($stack[$fp+1], $stack[$fp-4], $stack[$fp+1]+1, $stack[$fp-4].$m-$stack[$fp+1], 0)
				$stack[$fp-4].$trackBall($stack[$fp+1])
				$stack[$fp-4].$trackSquare($stack[$fp+1])
				$pc = 102
			case 102:
				$pc = 103
				if (wait(TICKS)) {
					return
				}
			case 103:
				$stack[$fp-4].$key[$stack[$fp+1]]=$obj.$uKey
				$stack[$fp-4].$m++
				if (!($obj.$uNode)) {
					$pc = 104
					continue
				}
				$stack[$fp-4].$link[$stack[$fp+1]+1]=$obj.$uNode
				$pc = 104
			case 104:
				$stack[$fp-4].$set()
				$obj.$h=0
				$pc = 118
				continue
			case 105:
				$g[46].setTxt("split node %d i=%d", $stack[$fp-4].$key[0], $stack[$fp+1])
				$call(72, $obj, $stack[$fp-4])
				continue
			case 106:
				$stack[$fp+3] = $acc
				if (!($stack[$fp+1]<ORDER)) {
					$pc = 109
					continue
				}
				$stack[$fp-4].$animateMoveLink(ORDER, $stack[$fp+3], 0)
				$stack[$fp-4].$animateMoveKeys(ORDER, $stack[$fp+3], 0, ORDER, 0)
				$stack[$fp-4].$animateMoveKeys($stack[$fp+1], $stack[$fp-4], $stack[$fp+1]+1, ORDER-$stack[$fp+1]-1, 0)
				$stack[$fp-4].$animateUpKey(ORDER-1)
				$stack[$fp-4].$trackBall($stack[$fp+1])
				$stack[$fp-4].$trackSquare($stack[$fp+1])
				$pc = 107
				if (wait(TICKS)) {
					return
				}
			case 107:
				$stack[$fp-3]=$obj.$uKey
				$obj.$uKey=$stack[$fp-4].$key[ORDER-1]
				$stack[$fp-4].$moveLink(ORDER, $stack[$fp+3], 0)
				$stack[$fp-4].$moveKeys(ORDER, $stack[$fp+3], 0, ORDER, 0)
				$stack[$fp-4].$moveKeys($stack[$fp+1], $stack[$fp-4], $stack[$fp+1]+1, ORDER-$stack[$fp+1]-1, 0)
				$stack[$fp-4].$key[$stack[$fp+1]]=$stack[$fp-3]
				$g[51].setPos($stack[$fp-4].$box[ORDER-1].getPosX(2), $stack[$fp-4].$box[ORDER-1].getPosY(2))
				$g[51].setTxt($stack[$fp-4].$box[ORDER-1].getTxt())
				$g[51].setOpacity(1)
				if (!($obj.$uNode)) {
					$pc = 108
					continue
				}
				$stack[$fp-4].$link[$stack[$fp+1]+1]=$obj.$uNode
				$pc = 108
			case 108:
				$g[50].setOpacity(0, TICKS, 0)
				$pc = 116
				continue
			case 109:
				if (!($stack[$fp+1]==ORDER)) {
					$pc = 112
					continue
				}
				$stack[$fp-4].$animateMoveKeys(ORDER, $stack[$fp+3], 0, ORDER, 0)
				$g[51].translate(0, -VSPACE, TICKS, 0)
				$pc = 110
				if (wait(TICKS)) {
					return
				}
			case 110:
				$stack[$fp-4].$moveKeys(ORDER, $stack[$fp+3], 0, ORDER, 0)
				if (!($obj.$uNode)) {
					$pc = 111
					continue
				}
				$stack[$fp+3].$link[0]=$obj.$uNode
				$pc = 111
			case 111:
				$pc = 115
				continue
			case 112:
				$stack[$fp-4].$animateMoveKeys(ORDER+1, $stack[$fp+3], 0, $stack[$fp+1]-ORDER-1, 0)
				$stack[$fp-4].$animateMoveKeys($stack[$fp+1], $stack[$fp+3], $stack[$fp+1]-ORDER, NKEY-$stack[$fp+1], 0)
				$stack[$fp-4].$animateMoveLink(ORDER+1, $stack[$fp+3], 0)
				$stack[$fp-4].$animateUpKey(ORDER)
				$stack[$fp+3].$trackBall($stack[$fp+1]-ORDER-1)
				$stack[$fp+3].$trackSquare($stack[$fp+1]-ORDER-1)
				$pc = 113
				if (wait(TICKS)) {
					return
				}
			case 113:
				$stack[$fp-3]=$obj.$uKey
				$obj.$uKey=$stack[$fp-4].$key[ORDER]
				$stack[$fp-4].$moveKeys(ORDER+1, $stack[$fp+3], 0, $stack[$fp+1]-ORDER-1, 0)
				$stack[$fp-4].$moveKeys($stack[$fp+1], $stack[$fp+3], $stack[$fp+1]-ORDER, NKEY-$stack[$fp+1], 0)
				$stack[$fp-4].$moveLink(ORDER+1, $stack[$fp+3], 0)
				$stack[$fp+3].$key[$stack[$fp+1]-ORDER-1]=$stack[$fp-3]
				$g[51].setPos($stack[$fp-4].$box[ORDER].getPosX(2), $stack[$fp-4].$box[ORDER].getPosY(2))
				$g[51].setTxt($stack[$fp-4].$box[ORDER].getTxt())
				$g[51].setOpacity(1)
				if (!($obj.$uNode)) {
					$pc = 114
					continue
				}
				$stack[$fp+3].$link[$stack[$fp+1]-ORDER]=$obj.$uNode
				$pc = 114
			case 114:
				$g[50].setOpacity(0, TICKS, 0)
				$pc = 115
			case 115:
				$pc = 116
			case 116:
				$stack[$fp+3].$m=$stack[$fp-4].$m=ORDER
				$stack[$fp-4].$set()
				$stack[$fp+3].$set()
				$pc = 117
				if (wait(TICKS)) {
					return
				}
			case 117:
				$obj.$uNode=$stack[$fp+3]
				$pc = 118
			case 118:
				$pc = 119
			case 119:
				$return(2)
				continue
			case 120:
				$enter(4);	// add
				$g[45].setTxt("add(%d)", $stack[$fp-3])
				$g[46].setTxt("")
				$g[47].setTxt("")
				$call(70, $obj, $stack[$fp-3], 1)
				continue
			case 121:
				$call(91, $obj, $stack[$fp-3], $obj.$root)
				continue
			case 122:
				if (!($obj.$h)) {
					$pc = 135
					continue
				}
				$obj.$maxLevel++
				if (!($obj.$nlevel[0])) {
					$pc = 133
					continue
				}
				$stack[$fp+1]=$obj.$maxLevel
				$pc = 123
			case 123:
				if (!($stack[$fp+1])) {
					$pc = 125
					continue
				}
				$obj.$nlevel[$stack[$fp+1]]=$obj.$nlevel[$stack[$fp+1]-1]
				$obj.$first[$stack[$fp+1]]=$obj.$first[$stack[$fp+1]-1]
				$pc = 124
			case 124:
				$stack[$fp+1]--
				$pc = 123
				continue
			case 125:
				$stack[$fp+1]=1
				$pc = 126
			case 126:
				if (!($stack[$fp+1]<$obj.$maxLevel)) {
					$pc = 131
					continue
				}
				$stack[$fp+2]=$stack[$fp+1]*VSPACE+VSPACE
				$stack[$fp+3]=$obj.$first[$stack[$fp+1]]
				$pc = 127
			case 127:
				if (!($stack[$fp+3])) {
					$pc = 129
					continue
				}
				$stack[$fp+3].setPos($stack[$fp+3].getPosX(1), $stack[$fp+2], TICKS, 0)
				$pc = 128
			case 128:
				$stack[$fp+3]=$stack[$fp+3].$next
				$pc = 127
				continue
			case 129:
				$pc = 130
			case 130:
				$stack[$fp+1]++
				$pc = 126
				continue
			case 131:
				$g[50].translate(0, VSPACE, TICKS, 0)
				$pc = 132
				if ($g[51].translate(0, VSPACE, TICKS, 1)) {
					return
				}
			case 132:
				$pc = 133
			case 133:
				$g[46].setTxt("add key %d to root Node", $obj.$uKey)
				$stack[$fp+4]=$obj.$root
				$obj.$first[0]=$obj.$root=new $obj.$Node($obj, $g[0])
				$obj.$nlevel[0]=1
				$obj.$root.$m=1
				$obj.$root.$link[0]=$stack[$fp+4]
				$obj.$root.$link[1]=$obj.$uNode
				$obj.$root.$trackBall(0)
				$obj.$root.$trackSquare(0)
				$pc = 134
				if (wait(TICKS)) {
					return
				}
			case 134:
				$obj.$root.$key[0]=$obj.$uKey
				$obj.$root.$set()
				$pc = 135
			case 135:
				$g[50].setOpacity(0, TICKS, 0)
				$pc = 136
				if ($g[51].setOpacity(0, TICKS, 1)) {
					return
				}
			case 136:
				checkPoint()
				$return(1)
				continue
			case 137:
				$enter(3);	// underflow
				$stack[$fp+1]=$stack[$fp-3].$link[$stack[$fp-4]]
				if (!($stack[$fp-4]<$stack[$fp-3].$m)) {
					$pc = 144
					continue
				}
				$stack[$fp+2]=$stack[$fp-3].$link[$stack[$fp-4]+1]
				$stack[$fp+3]=(($stack[$fp+2].$m-ORDER+1)/2)|0
				if (!($stack[$fp+3]>0)) {
					$pc = 139
					continue
				}
				$g[46].setTxt("balance Node \"%s\" with Node \"%s\"", $stack[$fp+1].$box[0].getTxt(), $stack[$fp+2].$box[0].getTxt())
				$stack[$fp-3].$animateMoveKey($stack[$fp-4], $stack[$fp+1], ORDER-1)
				$stack[$fp+2].$animateMoveKeys(0, $stack[$fp+1], ORDER-1, $stack[$fp+3]-1, 0)
				$stack[$fp+2].$animateMoveKey($stack[$fp+3]-1, $stack[$fp-3], $stack[$fp-4])
				$stack[$fp+2].$animateMoveKeys($stack[$fp+3], $stack[$fp+2], 0, $stack[$fp+2].$m-$stack[$fp+3], 1)
				$pc = 138
				if (wait(TICKS)) {
					return
				}
			case 138:
				$stack[$fp+1].$link[ORDER]=$stack[$fp+2].$link[0]
				$stack[$fp-3].$moveKey($stack[$fp-4], $stack[$fp+1], ORDER-1)
				$stack[$fp+2].$moveKeys(0, $stack[$fp+1], ORDER-1, $stack[$fp+3]-1, 0)
				$stack[$fp+2].$moveKey($stack[$fp+3]-1, $stack[$fp-3], $stack[$fp-4])
				$stack[$fp+2].$moveKeys($stack[$fp+3], $stack[$fp+2], 0, $stack[$fp+2].$m-$stack[$fp+3], 1)
				$stack[$fp+1].$m=ORDER-1+$stack[$fp+3]
				$stack[$fp+2].$m-=$stack[$fp+3]
				$stack[$fp+1].$set()
				$stack[$fp+2].$set()
				$stack[$fp-3].$set()
				$obj.$h=0
				$pc = 143
				continue
			case 139:
				$g[46].setTxt("merge Node \"%s\" with Node \"%s\" on RIGHT", $stack[$fp+1].$box[0].getTxt(), $stack[$fp+2].$box[0].getTxt())
				$stack[$fp-3].$animateMoveKey($stack[$fp-4], $stack[$fp+1], ORDER-1)
				$stack[$fp+2].$animateMoveKeys(0, $stack[$fp+1], ORDER, ORDER, 1)
				$stack[$fp-3].$animateMoveKeys($stack[$fp-4]+1, $stack[$fp-3], $stack[$fp-4], $stack[$fp-3].$m-1-$stack[$fp-4], 0)
				$pc = 140
				if (wait(TICKS)) {
					return
				}
			case 140:
				$stack[$fp-3].$moveKey($stack[$fp-4], $stack[$fp+1], ORDER-1)
				$stack[$fp+2].$moveKeys(0, $stack[$fp+1], ORDER, ORDER, 1)
				$stack[$fp-3].$moveKeys($stack[$fp-4]+1, $stack[$fp-3], $stack[$fp-4], $stack[$fp-3].$m-1-$stack[$fp-4], 0)
				$stack[$fp+1].$m=NKEY
				$stack[$fp+2].$m=0
				$stack[$fp-3].$m--
				$stack[$fp+1].$set()
				$stack[$fp+2].$set()
				$stack[$fp-3].$set()
				$stack[$fp+1].$next=$stack[$fp+2].$next
				$obj.$nlevel[$stack[$fp+1].$getLevel()]--
				$pc = 141
				if ($stack[$fp+2].setOpacity(0, TICKS, 1)) {
					return
				}
			case 141:
				$obj.$repositionNodes($stack[$fp+1].$getLevel())
				$pc = 142
				if (wait(2*TICKS)) {
					return
				}
			case 142:
				$obj.$h=(($stack[$fp-3].$m<ORDER)|0)
				$pc = 143
			case 143:
				$pc = 151
				continue
			case 144:
				$stack[$fp+2]=$stack[$fp-3].$link[$stack[$fp-4]-1]
				$stack[$fp+3]=(($stack[$fp+2].$m+1-ORDER)/2)|0
				if (!($stack[$fp+3]>0)) {
					$pc = 146
					continue
				}
				$g[46].setTxt("balance Node \"%s\" with Node \"%s\"", $stack[$fp+1].$box[0].getTxt(), $stack[$fp+2].$box[0].getTxt())
				$stack[$fp+1].$animateMoveKeys(ORDER-2, $stack[$fp+1], ORDER-2+$stack[$fp+3], ORDER-1, 1)
				$stack[$fp-3].$animateMoveKey($stack[$fp-4]-1, $stack[$fp+1], $stack[$fp+3]-1)
				$stack[$fp+2].$animateMoveKey($stack[$fp+2].$m-$stack[$fp+3], $stack[$fp-3], $stack[$fp-4]-1)
				$stack[$fp+2].$animateMoveLink($stack[$fp+2].$m-$stack[$fp+3]+1, $stack[$fp+1], 0)
				$stack[$fp+2].$animateMoveKeys(ORDER+1, $stack[$fp+1], 0, $stack[$fp+3]-1, 0)
				$pc = 145
				if (wait(TICKS)) {
					return
				}
			case 145:
				$stack[$fp+1].$moveKeys(ORDER-2, $stack[$fp+1], ORDER-2+$stack[$fp+3], ORDER-1, 1)
				$stack[$fp-3].$moveKey($stack[$fp-4]-1, $stack[$fp+1], $stack[$fp+3]-1)
				$stack[$fp+2].$moveKey($stack[$fp+2].$m-$stack[$fp+3], $stack[$fp-3], $stack[$fp-4]-1)
				$stack[$fp+2].$moveLink($stack[$fp+2].$m-$stack[$fp+3]+1, $stack[$fp+1], 0)
				$stack[$fp+2].$moveKeys(ORDER+1, $stack[$fp+1], 0, $stack[$fp+3]-1, 0)
				$stack[$fp+1].$m=ORDER-1+$stack[$fp+3]
				$stack[$fp+2].$m-=$stack[$fp+3]
				$stack[$fp+1].$set()
				$stack[$fp+2].$set()
				$stack[$fp-3].$set()
				$obj.$h=0
				$pc = 150
				continue
			case 146:
				$g[46].setTxt("merge Node \"%s\" with Node \"%s\"", $stack[$fp+1].$box[0].getTxt(), $stack[$fp+2].$box[0].getTxt())
				$stack[$fp-3].$animateMoveKey($stack[$fp-4]-1, $stack[$fp+2], $stack[$fp+2].$m)
				$stack[$fp+1].$animateMoveKeys(0, $stack[$fp+2], $stack[$fp+2].$m+1, ORDER-1, 0)
				$pc = 147
				if (wait(TICKS)) {
					return
				}
			case 147:
				$stack[$fp-3].$moveKey($stack[$fp-4]-1, $stack[$fp+2], $stack[$fp+2].$m)
				$stack[$fp+1].$moveKeys(0, $stack[$fp+2], $stack[$fp+2].$m+1, ORDER-1, 0)
				$stack[$fp+2].$m=NKEY
				$stack[$fp-3].$link[$stack[$fp-3].$m]=0
				$stack[$fp-3].$m--
				$stack[$fp+2].$set()
				$stack[$fp-3].$set()
				$stack[$fp+2].$next=$stack[$fp+1].$next
				$obj.$nlevel[$stack[$fp+2].$getLevel()]--
				$pc = 148
				if ($stack[$fp+1].setOpacity(0, TICKS, 1)) {
					return
				}
			case 148:
				$obj.$repositionNodes($stack[$fp+2].$getLevel())
				$pc = 149
				if (wait(2*TICKS)) {
					return
				}
			case 149:
				$obj.$h=(($stack[$fp-3].$m<ORDER)|0)
				$pc = 150
			case 150:
				$pc = 151
			case 151:
				$return(2)
				continue
			case 152:
				$enter(1);	// del
				$stack[$fp+1]=$stack[$fp-5].$link[$stack[$fp-5].$m]
				if (!($stack[$fp+1])) {
					$pc = 157
					continue
				}
				$call(66, $stack[$fp-5], $stack[$fp-5].$m)
				continue
			case 153:
				$call(152, $obj, $stack[$fp-3], $stack[$fp-4], $stack[$fp+1])
				continue
			case 154:
				if (!($obj.$h)) {
					$pc = 156
					continue
				}
				$call(137, $obj, $stack[$fp-5], $stack[$fp-5].$m)
				continue
			case 155:
				$pc = 156
			case 156:
				$pc = 160
				continue
			case 157:
				$stack[$fp-5].$animateMoveKey($stack[$fp-5].$m-1, $stack[$fp-3], $stack[$fp-4])
				$pc = 158
				if (wait(TICKS)) {
					return
				}
			case 158:
				$stack[$fp-5].$moveKey($stack[$fp-5].$m-1, $stack[$fp-3], $stack[$fp-4])
				$stack[$fp-5].$m--
				$stack[$fp-5].$set()
				$stack[$fp-3].$set()
				$stack[$fp-3].$box[$stack[$fp-4]].setBrush($g[17])
				$stack[$fp-3].$box[$stack[$fp-4]].setTxtPen($g[1])
				$g[52].setOpacity(0)
				$pc = 159
				if (wait(TICKS)) {
					return
				}
			case 159:
				$obj.$h=(($stack[$fp-5].$m<ORDER)|0)
				$pc = 160
			case 160:
				$return(3)
				continue
			case 161:
				$enter(2);	// remove1
				if (!($stack[$fp-4]==0)) {
					$pc = 162
					continue
				}
				$obj.$h=0
				$return(2)
				continue
			case 162:
				$stack[$fp+1]=0
				$pc = 163
			case 163:
				if (!($stack[$fp+1]<$stack[$fp-4].$m)) {
					$pc = 167
					continue
				}
				$pc = 164
				if ($stack[$fp-4].$box[$stack[$fp+1]].toggleBrushAndPens($g[18], $g[1], $stack[$fp-4].$box[$stack[$fp+1]].getTxtPen(), 4, TICKS/2, 1)) {
					return
				}
			case 164:
				if (!(($stack[$fp-3]<=$stack[$fp-4].$key[$stack[$fp+1]]))) {
					$pc = 165
					continue
				}
				$pc = 167
				continue
			case 165:
				$pc = 166
			case 166:
				$stack[$fp+1]++
				$pc = 163
				continue
			case 167:
				$stack[$fp+2]=$stack[$fp-4].$link[$stack[$fp+1]]
				if (!(($stack[$fp+1]<$stack[$fp-4].$m)&&($stack[$fp-4].$key[$stack[$fp+1]]==$stack[$fp-3]))) {
					$pc = 175
					continue
				}
				if (!($stack[$fp-4].$link[$stack[$fp+1]]==0)) {
					$pc = 169
					continue
				}
				$g[46].setTxt("remove key from Node")
				$stack[$fp-4].$animateMoveKeys($stack[$fp+1]+1, $stack[$fp-4], $stack[$fp+1], $stack[$fp-4].$m-$stack[$fp+1]-1, 0)
				$pc = 168
				if (wait(TICKS)) {
					return
				}
			case 168:
				$stack[$fp-4].$moveKeys($stack[$fp+1]+1, $stack[$fp-4], $stack[$fp+1], $stack[$fp-4].$m-$stack[$fp+1]-1, 0)
				$stack[$fp-4].$m--
				$stack[$fp-4].$set()
				$obj.$h=(($stack[$fp-4].$m<ORDER)|0)
				$pc = 174
				continue
			case 169:
				$stack[$fp-4].$box[$stack[$fp+1]].setBrush($g[16])
				$stack[$fp-4].$box[$stack[$fp+1]].setTxtPen($g[2])
				$call(66, $stack[$fp-4], $stack[$fp+1])
				continue
			case 170:
				$call(152, $obj, $stack[$fp-4], $stack[$fp+1], $stack[$fp+2])
				continue
			case 171:
				if (!($obj.$h)) {
					$pc = 173
					continue
				}
				$call(137, $obj, $stack[$fp-4], $stack[$fp+1])
				continue
			case 172:
				$pc = 173
			case 173:
				$pc = 174
			case 174:
				$pc = 180
				continue
			case 175:
				$call(63, $stack[$fp-4], $stack[$fp+1])
				continue
			case 176:
				$call(161, $obj, $stack[$fp-3], $stack[$fp-4].$link[$stack[$fp+1]])
				continue
			case 177:
				if (!($obj.$h)) {
					$pc = 179
					continue
				}
				$call(137, $obj, $stack[$fp-4], $stack[$fp+1])
				continue
			case 178:
				$pc = 179
			case 179:
				$pc = 180
			case 180:
				$return(2)
				continue
			case 181:
				$enter(3);	// remove
				$g[45].setTxt("remove(%d)", $stack[$fp-3])
				$g[46].setTxt("")
				$g[47].setTxt("")
				$call(70, $obj, $stack[$fp-3], 2)
				continue
			case 182:
				$call(161, $obj, $stack[$fp-3], $obj.$root)
				continue
			case 183:
				if (!($obj.$h&&$obj.$root.$m==0)) {
					$pc = 194
					continue
				}
				$obj.$maxLevel--
				$obj.$root=$obj.$root.$link[0]
				if (!($obj.$root)) {
					$pc = 184
					continue
				}
				$obj.$root.$parent=0
				$pc = 184
			case 184:
				$obj.$first[0].setOpacity(0, TICKS, 0)
				$stack[$fp+1]=0
				$pc = 185
			case 185:
				if (!($stack[$fp+1]<$obj.$maxLevel)) {
					$pc = 187
					continue
				}
				$obj.$nlevel[$stack[$fp+1]]=$obj.$nlevel[$stack[$fp+1]+1]
				$obj.$first[$stack[$fp+1]]=$obj.$first[$stack[$fp+1]+1]
				$pc = 186
			case 186:
				$stack[$fp+1]++
				$pc = 185
				continue
			case 187:
				$stack[$fp+1]=0
				$pc = 188
			case 188:
				if (!($stack[$fp+1]<$obj.$maxLevel)) {
					$pc = 193
					continue
				}
				$stack[$fp+2]=$stack[$fp+1]*VSPACE+VSPACE
				$stack[$fp+3]=$obj.$first[$stack[$fp+1]]
				$pc = 189
			case 189:
				if (!($stack[$fp+3])) {
					$pc = 191
					continue
				}
				$stack[$fp+3].setPos($stack[$fp+3].getPosX(1), $stack[$fp+2], TICKS, 0)
				$pc = 190
			case 190:
				$stack[$fp+3]=$stack[$fp+3].$next
				$pc = 189
				continue
			case 191:
				$pc = 192
			case 192:
				$stack[$fp+1]++
				$pc = 188
				continue
			case 193:
				$pc = 194
			case 194:
				$pc = 195
				if ($g[50].setOpacity(0, TICKS, 1)) {
					return
				}
			case 195:
				$pc = 196
				if (wait(TICKS)) {
					return
				}
			case 196:
				checkPoint()
				$return(1)
				continue
			case 197:
				$enter(0);	// $eh4
				if (!($stack[$fp-4]==0)) {
					$pc = 207
					continue
				}
				if (!($stack[$fp-3]==8)) {
					$pc = 198
					continue
				}
				$g[60]=$g[60]/10|0
				$g[61].setTxt("%d", $g[60])
				$pc = 206
				continue
			case 198:
				if (!(($stack[$fp-3]>=48)&&($stack[$fp-3]<=57))) {
					$pc = 199
					continue
				}
				$g[60]=($g[60]*10+$stack[$fp-3]-48)%100
				$g[61].setTxt("%d", $g[60])
				$pc = 205
				continue
			case 199:
				if (!(($stack[$fp-3]==13)&&($g[53]==0))) {
					$pc = 201
					continue
				}
				$g[53]=1
				start()
				$call(120, $g[63], $g[60])
				continue
			case 200:
				$g[53]=0
				$pc = 204
				continue
			case 201:
				if (!(($stack[$fp-3]==127)&&($g[53]==0))) {
					$pc = 203
					continue
				}
				$g[53]=1
				start()
				$call(181, $g[63], $g[60])
				continue
			case 202:
				$g[53]=0
				$pc = 203
			case 203:
				$pc = 204
			case 204:
				$pc = 205
			case 205:
				$pc = 206
			case 206:
				$pc = 207
			case 207:
				$return(4)
				continue
			case 208:
				$enter(0);	// $eh5
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT)&&($g[53]==0))) {
					$pc = 210
					continue
				}
				$g[53]=1
				start()
				$call(87, $g[63], $g[60])
				continue
			case 209:
				$g[53]=0
				$pc = 210
			case 210:
				$return(4)
				continue
			case 211:
				$enter(0);	// $eh6
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT)&&($g[53]==0))) {
					$pc = 213
					continue
				}
				$g[53]=1
				start()
				$call(120, $g[63], $g[60])
				continue
			case 212:
				$g[53]=0
				$pc = 213
			case 213:
				$return(4)
				continue
			case 214:
				$enter(0);	// $eh7
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT)&&($g[53]==0))) {
					$pc = 216
					continue
				}
				$g[53]=1
				start()
				$call(181, $g[63], $g[60])
				continue
			case 215:
				$g[53]=0
				$pc = 216
			case 216:
				$return(4)
				continue
			case 217:
				$enter(0);	// $eh8
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT)&&($g[53]==0))) {
					$pc = 263
					continue
				}
				$g[53]=1
				start()
				$call(120, $g[63], 20)
				continue
			case 218:
				$call(120, $g[63], 40)
				continue
			case 219:
				$call(120, $g[63], 10)
				continue
			case 220:
				$call(120, $g[63], 30)
				continue
			case 221:
				$call(120, $g[63], 15)
				continue
			case 222:
				$call(120, $g[63], 35)
				continue
			case 223:
				$call(120, $g[63], 7)
				continue
			case 224:
				$call(120, $g[63], 26)
				continue
			case 225:
				$call(120, $g[63], 18)
				continue
			case 226:
				$call(120, $g[63], 22)
				continue
			case 227:
				$call(120, $g[63], 5)
				continue
			case 228:
				$call(120, $g[63], 42)
				continue
			case 229:
				$call(120, $g[63], 13)
				continue
			case 230:
				$call(120, $g[63], 46)
				continue
			case 231:
				$call(120, $g[63], 27)
				continue
			case 232:
				$call(120, $g[63], 8)
				continue
			case 233:
				$call(120, $g[63], 32)
				continue
			case 234:
				$call(120, $g[63], 38)
				continue
			case 235:
				$call(120, $g[63], 24)
				continue
			case 236:
				$call(120, $g[63], 45)
				continue
			case 237:
				$call(120, $g[63], 25)
				continue
			case 238:
				$call(181, $g[63], 25)
				continue
			case 239:
				$call(181, $g[63], 45)
				continue
			case 240:
				$call(181, $g[63], 24)
				continue
			case 241:
				$call(181, $g[63], 38)
				continue
			case 242:
				$call(181, $g[63], 32)
				continue
			case 243:
				$call(181, $g[63], 8)
				continue
			case 244:
				$call(181, $g[63], 27)
				continue
			case 245:
				$call(181, $g[63], 46)
				continue
			case 246:
				$call(181, $g[63], 13)
				continue
			case 247:
				$call(181, $g[63], 42)
				continue
			case 248:
				$call(181, $g[63], 5)
				continue
			case 249:
				$call(181, $g[63], 22)
				continue
			case 250:
				$call(181, $g[63], 18)
				continue
			case 251:
				$call(181, $g[63], 26)
				continue
			case 252:
				$call(181, $g[63], 7)
				continue
			case 253:
				$call(181, $g[63], 35)
				continue
			case 254:
				$call(87, $g[63], 15)
				continue
			case 255:
				$call(87, $g[63], 30)
				continue
			case 256:
				$call(87, $g[63], 50)
				continue
			case 257:
				$call(181, $g[63], 15)
				continue
			case 258:
				$call(181, $g[63], 10)
				continue
			case 259:
				$call(181, $g[63], 20)
				continue
			case 260:
				$call(181, $g[63], 30)
				continue
			case 261:
				$call(181, $g[63], 40)
				continue
			case 262:
				$g[53]=0
				$pc = 263
			case 263:
				$return(4)
				continue
			case 264:
				$enter(0);	// $eh9
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT)&&($g[53]==0))) {
					$pc = 281
					continue
				}
				$g[53]=1
				start()
				$call(120, $g[63], 20)
				continue
			case 265:
				$call(120, $g[63], 40)
				continue
			case 266:
				$call(120, $g[63], 60)
				continue
			case 267:
				$call(120, $g[63], 80)
				continue
			case 268:
				$call(181, $g[63], 40)
				continue
			case 269:
				$call(120, $g[63], 10)
				continue
			case 270:
				$call(120, $g[63], 2)
				continue
			case 271:
				$call(120, $g[63], 4)
				continue
			case 272:
				$call(120, $g[63], 6)
				continue
			case 273:
				$call(120, $g[63], 82)
				continue
			case 274:
				$call(120, $g[63], 84)
				continue
			case 275:
				$call(120, $g[63], 86)
				continue
			case 276:
				$call(181, $g[63], 20)
				continue
			case 277:
				$call(120, $g[63], 81)
				continue
			case 278:
				$call(181, $g[63], 2)
				continue
			case 279:
				$call(181, $g[63], 4)
				continue
			case 280:
				$g[53]=0
				$pc = 281
			case 281:
				$return(4)
				continue
			case 282:
				$enter(0);	// $eh10
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT))) {
					$pc = 283
					continue
				}
				reset()
				return
			case 283:
				$return(4)
				continue
			}
		}
	}

	this.$getCurrentThread = $getCurrentThread
	this.$execute = $execute
	this.$resumeThread = $resumeThread
	this.$suspendThread = $suspendThread
	this.$switchToThread = $switchToThread
	this.$testFlag = $testFlag

}

// eof
