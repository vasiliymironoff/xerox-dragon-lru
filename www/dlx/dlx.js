// generated by VivioJS 22.02 build 0 : 14-Feb-22 14:27:52

"use strict"

function dlx(vplayer) {

	// preload fonts
	let font = new FontFace('Open Sans', 'url("../fonts/open-sans-v18-latin-regular.woff")', {weight:400})
	font.load()
	document.fonts.add(font)
	font = new FontFace('Open Sans', 'url("../fonts/open-sans-v18-latin-700.woff")', {weight:700})
	font.load()
	document.fonts.add(font)
	font = new FontFace('Open Sans', 'url("../fonts/open-sans-v18-latin-italic.woff")', {style:'italic', weight:400})
	font.load()
	document.fonts.add(font)

	// const imports
	const ABSOLUTE = vplayer.ABSOLUTE
	const ARROW60_END = vplayer.ARROW60_END
	const BEVEL_JOIN = vplayer.BEVEL_JOIN
	const BLACK = vplayer.BLACK
	const BOLD = vplayer.BOLD
	const BUTT_END = vplayer.BUTT_END
	const DASH = vplayer.DASH
	const DOT = vplayer.DOT
	const GRAY192 = vplayer.GRAY192
	const GRAY224 = vplayer.GRAY224
	const GRAY64 = vplayer.GRAY64
	const GREEN = vplayer.GREEN
	const HCENTRE = vplayer.HCENTRE
	const HLEFT = vplayer.HLEFT
	const MB_LEFT = vplayer.MB_LEFT
	const MB_RIGHT = vplayer.MB_RIGHT
	const MB_SHIFT = vplayer.MB_SHIFT
	const PROPAGATE = vplayer.PROPAGATE
	const RED = vplayer.RED
	const ROUND_END = vplayer.ROUND_END
	const ROUND_JOIN = vplayer.ROUND_JOIN
	const ROUND_START = vplayer.ROUND_START
	const SOLID = vplayer.SOLID
	const STRIKETHROUGH = vplayer.STRIKETHROUGH
	const VTOP = vplayer.VTOP
	const WHITE = vplayer.WHITE
	const YELLOW = vplayer.YELLOW

	// var imports
	var $addWaitToEventQ = vplayer.$addWaitToEventQ
	var $g = vplayer.$g
	var $terminateThread = vplayer.$terminateThread
	var checkPoint = vplayer.checkPoint
	var debug = vplayer.debug
	var EXTENDEDGOBJ = vplayer.EXTENDEDGOBJ
	var Font = vplayer.Font
	var fork = vplayer.fork
	var getArg = vplayer.getArg
	var getArgAsNum = vplayer.getArgAsNum
	var getTick = vplayer.getTick
	var getURL = vplayer.getURL
	var Group = vplayer.Group
	var Layer = vplayer.Layer
	var Line = vplayer.Line
	var Line2 = vplayer.Line2
	var Menu = vplayer.Menu
	var newArray = vplayer.newArray
	var Polygon = vplayer.Polygon
	var R$ = vplayer.R$
	var Rectangle = vplayer.Rectangle
	var Rectangle2 = vplayer.Rectangle2
	var reset = vplayer.reset
	var rgba = vplayer.rgba
	var round = vplayer.round
	var setArg = vplayer.setArg
	var setBgBrush = vplayer.setBgBrush
	var setTPS = vplayer.setTPS
	var setVirtualWindow = vplayer.setVirtualWindow
	var SolidBrush = vplayer.SolidBrush
	var SolidPen = vplayer.SolidPen
	var sprintf = vplayer.sprintf
	var sqrt = vplayer.sqrt
	var stop = vplayer.stop
	var timeMS = vplayer.timeMS
	var Txt = vplayer.Txt
	var VObj = vplayer.VObj

	// const declarations
	const THIN=1
	const MEDIUM=3
	const DARKBLUE=rgba(0, 0, 0.625)
	const IRISHGREEN=rgba(0, 0.56000000000000005, 0.16)
	const LIGHTBLUE=rgba(0.75, 1, 1)
	const PURPLE=rgba(0.75, 0.625, 0.75)
	const ORANGE=rgba(1, 0.55000000000000004, 0)
	const WIDTH=710
	const HEIGHT=490
	const maxexample=7
	const NO_STALL=0
	const DATA_STALL=1
	const CTRL_STALL=2
	const PIPELINING_ENABLED=0
	const PIPELINING_DISABLED=1
	const BRANCH_PREDICTION=0
	const BRANCH_INTERLOCK=1
	const DELAYED_BRANCHES=2
	const LOAD_INTERLOCK=0
	const NO_LOAD_INTERLOCK=1
	const ALU_FORWARDING=0
	const ALU_INTERLOCK=1
	const NO_ALU_INTERLOCK=2
	const FORWARDING_TO_SMDR=0
	const STORE_INTERLOCK=1
	const NO_STORE_INTERLOCK=2
	const ZERO_FORWARDING=0
	const ZERO_INTERLOCK=1
	const NO_ZERO_INTERLOCK=2
	const MAX_INSTR=31
	const NOP=0
	const ADD=1
	const SUB=2
	const AND=3
	const OR=4
	const XOR=5
	const SLL=6
	const SRL=7
	const SLT=8
	const SGT=9
	const SLE=10
	const SGE=11
	const ADDi=12
	const SUBi=13
	const ANDi=14
	const ORi=15
	const XORi=16
	const SLLi=17
	const SRLi=18
	const SLTi=19
	const SGTi=20
	const SLEi=21
	const SGEi=22
	const LD=23
	const ST=24
	const BEQZ=25
	const BNEZ=26
	const J=27
	const JAL=28
	const JR=29
	const JALR=30
	const HALT=31
	const STALL=32
	const EMPTY=33
	const OP_TYPE_UNUSED=0
	const OP_TYPE_REG=1
	const OP_TYPE_IMM=2
	const HORIZONTAL=0
	const VERTICAL=1
	const LEFT=0
	const RIGHT=1
	const TOP=2
	const BOTTOM=3
	const PENW=5

	var $thread = 0
	var $pc = 0
	var $fp = -1
	var $sp = -1
	var $acc = 0
	var $obj = 0
	var $stack = 0
	var $testFlag = 0

	function $call(pc, obj) {
		if (obj === undefined)
			obj = 0
		let l = arguments.length - 1
		for (let i = l; i >= 2; i--)
			$stack[++$sp] = arguments[i]
		$acc = obj
		$stack[++$sp] = $pc + 1
		$pc = pc
		return $acc
	}

	function $enter(n) {	// n = # local variables
		$stack[++$sp] = $obj
		$stack[++$sp] = $fp
		$fp = $sp
		$obj = $acc
		$sp += n
	}

	function $return(n) {	// n = # parameters to pop
		$sp = $fp
		$fp = $stack[$sp--]
		$obj = $stack[$sp--]
		$pc = $stack[$sp--]
		if ($pc == -1) {
			$terminateThread($thread)
			$thread = 0
			return
		}
		$sp -= n
	}

	function $suspendThread() {
		if ($thread == 0)
			return 0;
		$thread.pc = $pc
		$thread.fp = $fp
		$thread.sp = $sp
		$thread.acc = $acc
		$thread.obj = $obj
		return $thread
	}

	function $getCurrentThread() {
		return $thread
	}

	function $resumeThread(toThread) {
		$pc = toThread.pc
		$fp = toThread.fp
		$sp = toThread.sp
		$acc = toThread.acc
		$obj = toThread.obj
		$stack = toThread.stack
		$thread = toThread
	}

	function $switchToThread(toThread) {
		if ($thread == toThread) {
			$acc = toThread.acc
			return
		}
		$suspendThread()
		$resumeThread(toThread)
	}

	function wait(ticks) {
		$suspendThread()
		$addWaitToEventQ(ticks, $thread)	// -ve ticks for a realtime wait
		return 1
	}

	function instrIsNop(instr) {
		return (instr==NOP||instr==STALL||instr==EMPTY||instr==HALT) ? 1 : 0
	}

	function instrIsArRR(instr) {
		return (instr>=ADD&&instr<=SGE) ? 1 : 0
	}

	function instrIsArRI(instr) {
		return ((instr>=ADDi)&&(instr<=SGEi)) ? 1 : 0
	}

	function instrIsBranch(instr) {
		return ((instr==BEQZ)||(instr==BNEZ)) ? 1 : 0
	}

	function isJorJAL(instr) {
		return ((instr==J)||(instr==JAL)) ? 1 : 0
	}

	function instrIsJumpR(instr) {
		return ((instr==JR)||(instr==JALR)) ? 1 : 0
	}

	function instrIsBranchOrJump(instr) {
		return (instrIsBranch(instr)||isJorJAL(instr)||instrIsJumpR(instr)) ? 1 : 0
	}

	function instrIsJumpAndLink(instr) {
		return ((instr==JAL)||(instr==JALR)) ? 1 : 0
	}

	function instrIsLoadOrStore(instr) {
		return ((instr==LD)||(instr==ST)) ? 1 : 0
	}

	function instrOpTypeRdt(instr) {
		return (instrIsArRR(instr)||instrIsArRI(instr)||instrIsJumpAndLink(instr)||instrIsLoadOrStore(instr)) ? OP_TYPE_REG : OP_TYPE_UNUSED
	}

	function instrOpTypeRs1(instr) {
		return (instrIsNop(instr)||instrIsJumpR(instr)||isJorJAL(instr)) ? OP_TYPE_UNUSED : OP_TYPE_REG
	}

	function instrOpTypeRs2(instr) {
		if (instrIsNop(instr))
		return OP_TYPE_UNUSED
		else 
		if (instrIsArRR(instr)||instrIsJumpR(instr))
		return OP_TYPE_REG
		else 
		return OP_TYPE_IMM
	}

	function instrText(instr, rdt, rs1, rs2) {
		if (instrIsNop(instr))
		return sprintf("%s", $g[33][instr])
		else 
		if (instrIsArRR(instr))
		return sprintf("%s R%d,R%d,R%d", $g[33][instr], rdt, rs1, rs2)
		else 
		if (instrIsArRI(instr))
		return sprintf("%s R%d,R%d,%02X", $g[33][instr], rdt, rs1, rs2)
		else 
		if (instr==LD)
		return sprintf("LD R%d,R%d+%02X", rdt, rs1, rs2)
		else 
		if (instr==ST)
		return sprintf("ST R%d,R%d+%02X", rdt, rs1, rs2)
		else 
		if (instrIsBranch(instr))
		return sprintf("%s R%d,%02X", $g[33][instr], rs1, rs2)
		else 
		if (instr==J)
		return sprintf("%s %02X", $g[33][instr], rs2)
		else 
		if (instr==JAL)
		return sprintf("%s R%d, %02X", $g[33][instr], rdt, rs2)
		else 
		if (instr==JR)
		return sprintf("%s R%d", $g[33][instr], rs2)
		else 
		if (instr==JALR)
		return sprintf("%s R%d, R%d", $g[33][instr], rdt, rs2)
		return "EMPTY"
	}

	function se8(t) {
		if (t&128) {
			return (-1^255|t)
		} else {
			return t
		}
	}

	function instrExecute(instr, op1, op2) {
		if (instr==ADD||instr==ADDi)
		return (se8(op1)+se8(op2))&255
		else 
		if (instr==SUB||instr==SUBi)
		return (se8(op1)-se8(op2))&255
		else 
		if (instr==AND||instr==ANDi)
		return op1&op2
		else 
		if (instr==OR||instr==ORi)
		return op1|op2
		else 
		if (instr==XOR||instr==XORi)
		return op1^op2
		else 
		if (instr==SLL||instr==SLLi)
		return (op1<<op2)&255
		else 
		if (instr==SRL||instr==SRLi)
		return (op1>>op2)&255
		else 
		if (instr==SLT||instr==SLTi)
		return op1<op2 ? 1 : 0
		else 
		if (instr==SGT||instr==SGTi)
		return op1>op2 ? 1 : 0
		else 
		if (instr==SLE||instr==SLEi)
		return op1<=op2 ? 1 : 0
		else 
		if (instr==SGE||instr==SGEi)
		return op1>=op2 ? 1 : 0
		else 
		if (instr==LD||instr==ST)
		return (se8(op1)+se8(op2))&255
		else 
		if (instr==JAL||instr==JALR)
		return op2
		else 
		return 238
	}

	function Instruction($grp, _x, _y, _w, _h, _addr, font) {
		Rectangle.call(this, $g[0], $g[16], ((0) | EXTENDEDGOBJ), 0, $g[10], _x, _y, 0, 0, _w, _h)
		this.$x=_x
		this.$y=_y
		this.$w=_w
		this.$h=_h
		this.$addr=_addr
		this.$vIns=0, this.$vRdt=0, this.$vRs1=0, this.$vRs2=0
		this.$opTypeRdt=0, this.$opTypeRs1=0, this.$opTypeRs2=0
		this.$clk
		this.$fw=this.$w/6
		this.$adr=new Rectangle2($g[0], $g[16], 0, 0, 0, this.$x, this.$y, this.$fw, this.$h, 0, font, "%02X", this.$addr)
		this.$ins=new Rectangle2($g[0], $g[16], HLEFT, 0, 0, this.$x+this.$fw, this.$y, 2*this.$fw, this.$h, $g[1], font, " NOP")
		this.$rdt=new Rectangle2($g[0], $g[16], 0, 0, 0, this.$x+3*this.$fw, this.$y, this.$fw, this.$h, $g[1], font, "-")
		this.$rs1=new Rectangle2($g[0], $g[16], 0, 0, 0, this.$x+4*this.$fw, this.$y, this.$fw, this.$h, $g[1], font, "-")
		this.$rs2=new Rectangle2($g[0], $g[16], 0, 0, 0, this.$x+5*this.$fw, this.$y, this.$fw, this.$h, $g[1], font, "-")
		this.$dot=new Rectangle2($g[0], $g[16], 0, 0, $g[8], this.$x+this.$fw*0.80000000000000004, this.$y+2, this.$h/2, this.$h/2)
		this.$dot.setOpacity(0)
		this.$arrowDown=new Line($g[0], $g[16], 0, $g[35], 0, 0, this.$x+this.$w+2, this.$y+this.$h*0.5, 5, 0, 0, 0, 0, 0)
		this.$arrowUp=new Line($g[0], $g[16], 0, $g[35], 0, 0, this.$x-2, this.$y+this.$h*0.5, -5, 0, 0, 0, 0, 0)
		this.$arrowDown.setOpacity(0)
		this.$arrowUp.setOpacity(0)
		this.addEventHandler("eventEE", this, this.$eh0)
		this.$ins.addEventHandler("eventEE", this, this.$eh1)
		this.$rdt.addEventHandler("eventEE", this, this.$eh2)
		this.$rs1.addEventHandler("eventEE", this, this.$eh3)
		this.$rs2.addEventHandler("eventEE", this, this.$eh4)
		this.$ins.addEventHandler("eventMB", this, 34)
		this.$rdt.addEventHandler("eventMB", this, 38)
		this.$rs1.addEventHandler("eventMB", this, 41)
		this.$rs2.addEventHandler("eventMB", this, 44)
	}
	Instruction.prototype = Object.create(Rectangle.prototype)

	Instruction.prototype.$eh0 = function(enter, $1, $2) {
		this.setBrush(enter ? $g[6] : $g[10])
		return PROPAGATE
	}

	Instruction.prototype.$eh1 = function(enter, $1, $2) {
		this.$ins.setTxtPen(enter ? $g[3] : $g[1])
		return PROPAGATE
	}

	Instruction.prototype.$eh2 = function(enter, $1, $2) {
		if (this.$opTypeRdt!=OP_TYPE_UNUSED) {
			this.$rdt.setTxtPen(enter ? $g[3] : $g[1])
		} else {
			this.$rdt.setTxtPen($g[1])
		}
		return PROPAGATE
	}

	Instruction.prototype.$eh3 = function(enter, $1, $2) {
		if (this.$opTypeRs1!=OP_TYPE_UNUSED) {
			this.$rs1.setTxtPen(enter ? $g[3] : $g[1])
		} else {
			this.$rs1.setTxtPen($g[1])
		}
		return PROPAGATE
	}

	Instruction.prototype.$eh4 = function(enter, $1, $2) {
		if (this.$opTypeRs2!=OP_TYPE_UNUSED) {
			this.$rs2.setTxtPen(enter ? $g[3] : $g[1])
		} else {
			this.$rs2.setTxtPen($g[1])
		}
		return PROPAGATE
	}

	Instruction.prototype.$getOpcode = function() {
		return this.$vIns<<24|this.$vRdt<<16|this.$vRs1<<8|this.$vRs2
	}

	Instruction.prototype.$initRegs = function(remember) {
		let offset
		this.$ins.setTxt("%c%s", 32, $g[33][this.$vIns])
		this.$opTypeRdt=instrOpTypeRdt(this.$vIns)
		this.$opTypeRs1=instrOpTypeRs1(this.$vIns)
		this.$opTypeRs2=instrOpTypeRs2(this.$vIns)
		if (this.$opTypeRs2==OP_TYPE_REG)
		this.$vRs2=(this.$vRs2%4)
		if (this.$opTypeRdt==OP_TYPE_UNUSED)
		this.$rdt.setTxt("-")
		else 
		this.$rdt.setTxt("R%d", this.$vRdt)
		if (this.$opTypeRs1==OP_TYPE_UNUSED)
		this.$rs1.setTxt("-")
		else 
		this.$rs1.setTxt("R%d", this.$vRs1)
		if (this.$opTypeRs2==OP_TYPE_UNUSED)
		this.$rs2.setTxt("-")
		else 
		if (this.$opTypeRs2==OP_TYPE_REG)
		this.$rs2.setTxt("R%d", this.$vRs2)
		else 
		this.$rs2.setTxt("%02X", this.$vRs2)
		if (instrIsBranch(this.$vIns)||isJorJAL(this.$vIns)) {
			if (this.$vRs2&128) {
				offset=(se8(this.$vRs2)/4)*this.$h+this.$h/2
				this.$arrowUp.setPt(2, this.$x-7, this.$y+offset)
				this.$arrowUp.setPt(3, this.$x-2, this.$y+offset)
				this.$arrowUp.setOpacity(1)
				this.$arrowDown.setOpacity(0)
			} else {
				offset=(this.$vRs2/4)*this.$h+this.$h/2
				this.$arrowDown.setPt(2, this.$x+this.$w+7, this.$y+offset)
				this.$arrowDown.setPt(3, this.$x+this.$w+2, this.$y+offset)
				this.$arrowDown.setOpacity(1)
				this.$arrowUp.setOpacity(0)
			}
		} else {
			this.$arrowUp.setOpacity(0)
			this.$arrowDown.setOpacity(0)
		}
		if (remember) {
			let s=sprintf("i%d", this.$addr/4)
			setArg(s, this.$getOpcode().toString())
			$g[12]=0
			setArg("example", $g[12].toString())
		}
	}

	Instruction.prototype.$setValue = function(instr, rdt, rs1, rd2imm) {
		this.$vIns=instr
		this.$vRdt=rdt
		this.$vRs1=rs1
		this.$vRs2=rd2imm&255
		this.$initRegs(0)
	}

	Instruction.prototype.$setOpcode = function(opcode) {
		this.$vIns=(opcode&4278190080)>>24
		this.$vRdt=(opcode&16711680)>>16
		this.$vRs1=(opcode&65280)>>8
		this.$vRs2=(opcode&255)
		this.$initRegs(0)
	}

	function InstructionMemory(x, y, w, h) {
		VObj.call(this)
		this.$ih=(h-4)/32
		this.$instruction=newArray(32)
		this.$active=31
		this.$r=new Rectangle2($g[0], 0, 0, $g[1], 0, x, y, w, h)
		this.$r.setRounded(2, 2)
		for (this.$lp1=0; this.$lp1<32; this.$lp1++)
		this.$instruction[this.$lp1]=new Instruction($g[0], x+1, y+1+this.$lp1*this.$ih, w-2, this.$ih, this.$lp1*4, $g[13])
	}
	InstructionMemory.prototype = Object.create(VObj.prototype)

	InstructionMemory.prototype.$setValue = function(addr, instr, rdt, rs1, rs2imm) {
		this.$instruction[addr/4].$setValue(instr, rdt, rs1, rs2imm)
	}

	InstructionMemory.prototype.$getOpcode = function(addr) {
		return this.$instruction[addr/4].$getOpcode()
	}

	InstructionMemory.prototype.$setOpcode = function(addr, opcode) {
		this.$instruction[addr/4].$setOpcode(opcode)
	}

	InstructionMemory.prototype.$setActive = function(addr) {
		this.$instruction[this.$active].$dot.setOpacity(0)
		this.$active=addr/4
		this.$instruction[this.$active].$dot.setOpacity(1)
	}

	function InstructionRegister(x, y, w, h, caption) {
		VObj.call(this)
		this.$vIns=EMPTY, this.$vRdt=0, this.$vRs1=0, this.$vRs2=0
		this.$nIns=EMPTY, this.$nRdt=0, this.$nRs1=0, this.$nRs2=0
		this.$txt="EMPTY"
		this.$r1=new Rectangle2($g[0], 0, 0, $g[1], $g[5], x, y, w, h)
		this.$r1.setRounded(2, 2)
		this.$r2=new Rectangle2($g[0], 0, 0, $g[1], $g[10], x+2, y+2, w-4, h-14)
		this.$r2.setRounded(2, 2)
		this.$r3=new Rectangle2($g[0], 0, 0, 0, 0, x, y+h-10, w, 10, $g[4], $g[13], caption)
		this.$label=new Txt($g[0], $g[16], 0, x+w/2, y+(h-14)/2, 0, $g[13], this.$txt)
		this.$label.rotate(-90)
	}
	InstructionRegister.prototype = Object.create(VObj.prototype)

	InstructionRegister.prototype.$setNewValue = function(instr, rdt, rs1, rs2) {
		this.$nIns=instr
		this.$nRdt=rdt
		this.$nRs1=rs1
		this.$nRs2=rs2
	}

	InstructionRegister.prototype.$setNewInstruction = function(i) {
		this.$nIns=i.$vIns
		this.$nRdt=i.$vRdt
		this.$nRs1=i.$vRs1
		this.$nRs2=i.$vRs2
	}

	InstructionRegister.prototype.$getNewInstrTxt = function() {
		return instrText(this.$nIns, this.$nRdt, this.$nRs1, this.$nRs2)
	}

	InstructionRegister.prototype.$setOpacity = function(opacity) {
		this.$r1.setOpacity(opacity)
		this.$r2.setOpacity(opacity)
		this.$r3.setOpacity(opacity)
		this.$label.setOpacity(opacity)
	}

	InstructionRegister.prototype.$reset = function() {
		this.$vIns=EMPTY
		this.$vRdt=this.$vRs1=this.$vRs2=0
		this.$nIns=EMPTY
		this.$nRdt=this.$nRs1=this.$nRs2=0
		this.$txt=instrText(this.$vIns, this.$vRdt, this.$vRs1, this.$vRs2)
		this.$label.setTxt(this.$txt)
	}

	function Register(x, y, w, h, labelPos, caption, _editable) {
		VObj.call(this)
		this.$vx, this.$vy, this.$vw, this.$vh
		this.$value=0, this.$newValue=0
		this.$tag=0, this.$newTag=0
		this.$useTag=0, this.$invalid=0
		this.$editable=_editable
		this.$label
		this.$r1=new Rectangle2($g[0], 0, 0, $g[1], $g[38], x, y, w, h)
		this.$r1.setRounded(2, 2)
		this.$r2
		this.$bg1=new Rectangle2($g[0], $g[16], 0, 0, $g[10], this.$vx, this.$vy, this.$vw/2, this.$vh)
		this.$bg2=new Rectangle2($g[0], $g[16], 0, 0, $g[10], this.$vx+this.$vw/2, this.$vy, this.$vw/2, this.$vh)
		if (w>=h) {
			this.$vy=y+2
			this.$vw=w-14
			this.$vh=h-4
			if (labelPos==LEFT) {
				this.$r2=new Rectangle($g[0], 0, 0, 0, 0, x+7-1, y+h/2, -7, -h/2, 14, h, 0, $g[13], caption)
				this.$r2.rotate(-90)
				this.$vx=x+12
			} else
			if (labelPos==RIGHT) {
				this.$r2=new Rectangle($g[0], 0, 0, 0, 0, x+w-7, y+h/2, -7, -h/2, 14, h, 0, $g[13], caption)
				this.$r2.rotate(-90)
				this.$vx=x+2
			}
		} else {
			this.$vx=x+2
			this.$vw=w-4
			this.$vh=h-14
			if (labelPos==TOP) {
				this.$r2=new Rectangle2($g[0], 0, 0, 0, 0, x, y, w, 14, 0, $g[13], caption)
				this.$vy=y+12
			} else
			if (labelPos==BOTTOM) {
				this.$r2=new Rectangle2($g[0], 0, 0, 0, 0, x, y+h-10, w, 10, 0, $g[13], caption)
				this.$vy=y+2
			}
		}
		if (w>=h) {
			this.$label=new Rectangle2($g[0], $g[16], 0, 0, $g[11], this.$vx, this.$vy, this.$vw, this.$vh, 0, $g[13], "%02X", this.$value)
		} else {
			this.$label=new Rectangle($g[0], $g[16], 0, 0, $g[11], this.$vx+this.$vw/2, this.$vy+this.$vh/2, -this.$vw/2, -this.$vh/2, this.$vw, this.$vh, 0, $g[13], "%02X", this.$value)
		}
		this.$label.setRounded(2, 2)
		this.$label.addEventHandler("eventEE", this, this.$eh9)
		this.$label.addEventHandler("eventMB", this, this.$eh10)
		this.$hmode=0
	}
	Register.prototype = Object.create(VObj.prototype)

	Register.prototype.$setOpacity = function(opacity) {
		this.$r1.setOpacity(opacity)
		this.$r2.setOpacity(opacity)
		this.$bg1.setOpacity(opacity)
		this.$bg2.setOpacity(opacity)
		this.$label.setOpacity(opacity)
	}

	Register.prototype.$updateLabel = function() {
		if (this.$invalid) {
			this.$label.setTxt("INV")
		} else
		if (this.$useTag) {
			if (this.$tag>=0)
			this.$label.setTxt("R%d:%02X", this.$tag, this.$value)
			else 
			this.$label.setTxt("--:%02X", this.$value)
		} else {
			this.$label.setTxt("%02X", this.$value)
		}
		return 0
	}

	Register.prototype.$eh9 = function(enter, x, y) {
		if (this.$editable)
		this.$label.setBrush(enter ? $g[10] : $g[11])
		return 0
	}

	Register.prototype.$eh10 = function(down, flags, x, y) {
		if (this.$editable&&down) {
			let d
			if (flags&MB_LEFT) {
				if (flags&MB_SHIFT) {
					this.$value=(this.$value+16)&255
				} else {
					d=((this.$value&15)+1)&15
					this.$value=(this.$value&~15)|d
				}
			} else
			if (flags&MB_RIGHT) {
				if (flags&MB_SHIFT) {
					d=(((this.$value>>4)-1)&15)<<4
					this.$value=(this.$value&~240)|d
				} else {
					d=((this.$value&15)-1)&15
					this.$value=(this.$value&~15)|d
				}
			}
			this.$updateLabel()
		}
		return 0
	}

	Register.prototype.$setValue = function(val) {
		this.$value=val
		this.$invalid=0
		this.$updateLabel()
	}

	Register.prototype.$setNewValue = function(val) {
		this.$newValue=val
	}

	Register.prototype.$setNewTag = function(t) {
		this.$newTag=t
	}

	Register.prototype.$setTag = function(t) {
		this.$useTag=1
		this.$tag=t
		this.$updateLabel()
	}

	Register.prototype.$setInvalid = function(i) {
		this.$useTag=1
		this.$invalid=i
	}

	Register.prototype.$tagMatches = function(t) {
		return (this.$invalid) ? 0 : (this.$tag==t) ? 1 : 0
	}

	Register.prototype.$highlight = function(brush) {
		if (this.$hmode==0) {
			this.$bg1.setBrush(brush)
			this.$bg2.setBrush(brush)
			this.$hmode=1
		} else {
			this.$bg2.setBrush(brush)
		}
	}

	Register.prototype.$unHighlight = function() {
		this.$bg1.setBrush($g[10])
		this.$bg2.setBrush($g[10])
		this.$hmode=0
	}

	Register.prototype.$reset = function() {
		this.$value=0
		this.$newValue=0
		this.$tag=0
		this.$newTag=0
		this.$useTag=0
		this.$invalid=0
		this.$unHighlight()
		this.$updateLabel()
	}

	function Component(_x, _y, _w, _h, caption) {
		VObj.call(this)
		this.$x=_x
		this.$y=_y
		this.$w=_w
		this.$h=_h
		this.$bg=new Rectangle2($g[0], 0, 0, $g[1], $g[40], this.$x, this.$y, this.$w, this.$h)
		this.$bg.setRounded(2, 2)
		this.$label
		if (this.$w>=this.$h) {
			this.$label=new Rectangle2($g[0], 0, 0, 0, 0, this.$x, this.$y, this.$w, this.$h, 0, $g[41], caption)
		} else {
			this.$label=new Rectangle($g[0], 0, 0, 0, 0, this.$x+this.$w/2-1, this.$y+this.$h/2, -this.$w/2, -this.$h/2, this.$w, this.$h, 0, $g[41], caption)
			this.$label.rotate(-90)
		}
	}
	Component.prototype = Object.create(VObj.prototype)

	Component.prototype.$setOpacity = function(opacity) {
		this.$bg.setOpacity(opacity)
		this.$label.setOpacity(opacity)
	}

	function ALU(x, y, w, h) {
		VObj.call(this)
		this.$alu=new Polygon($g[0], 0, ABSOLUTE, $g[1], $g[40], x, y, 0, 0, w, h/4, w, 3*h/4, 0, h, 0, 5*h/8, w/2, h/2, 0, 3*h/8)
		new Rectangle2($g[0], 0, 0, 0, 0, x, y-10, w, 10, 0, $g[41], "ALU")
		this.$op=""
		this.$txtOp=new Rectangle($g[0], $g[16], 0, 0, $g[8], x, y+h/2, 0, -h/12, 2*w/3, h/6, $g[4], $g[41], this.$op)
		this.$txtOp.setOpacity(0)
		this.$txtOp.setRounded(2, 2)
		this.$txtResult=new Rectangle($g[0], $g[18], 0, $g[1], $g[11], x+3*w/4, y+h/2, 0, -h/12, w/2, h/6, $g[1], $g[41])
		this.$txtResult.setOpacity(0)
		this.$txtResult.setRounded(2, 2)
	}
	ALU.prototype = Object.create(VObj.prototype)

	ALU.prototype.$setTxtOp = function(vIns) {
		this.$op=""
		if (vIns==ADD||vIns==ADDi)
		this.$op="ADD"
		else 
		if (vIns==SUB||vIns==SUBi)
		this.$op="SUB"
		else 
		if (vIns==AND||vIns==ANDi)
		this.$op="AND"
		else 
		if (vIns==OR||vIns==ORi)
		this.$op="OR"
		else 
		if (vIns==XOR||vIns==XORi)
		this.$op="XOR"
		else 
		if (vIns==SLL||vIns==SLLi)
		this.$op="SLL"
		else 
		if (vIns==SRL||vIns==SRLi)
		this.$op="SRL"
		else 
		if (vIns==SLT||vIns==SLTi)
		this.$op="LT"
		else 
		if (vIns==SGT||vIns==SGTi)
		this.$op="GT"
		else 
		if (vIns==SLE||vIns==SLEi)
		this.$op="LE"
		else 
		if (vIns==SGE||vIns==SGEi)
		this.$op="GE"
		else 
		if (vIns==LD||vIns==ST)
		this.$op="ADD"
		else 
		if (vIns==JAL||vIns==JALR)
		this.$op="ADD"
		this.$txtOp.setTxt(this.$op)
		this.$txtOp.setOpacity(1)
	}

	function AnimPipe() {
		VObj.call(this)
		this.$n=0
		this.$px=newArray(0)
		this.$py=newArray(0)
		this.$ls=newArray(0)
		this.$ll=0
		this.$head=1
		this.$bgLine=new Line($g[0], $g[17], 0, $g[43], 0, 0)
		this.$fgLine=new Line($g[0], $g[18], 0, $g[44], 0, 0)
	}
	AnimPipe.prototype = Object.create(VObj.prototype)

	AnimPipe.prototype.$setOpacity = function(opacity) {
		this.$bgLine.setOpacity(opacity)
		this.$fgLine.setOpacity(opacity)
	}

	AnimPipe.prototype.$setHead = function(h) {
		this.$head=h ? 1 : 0
		this.$bgLine.setPen(this.$head ? $g[43] : $g[42])
		this.$fgLine.setPen($g[44])
	}

	AnimPipe.prototype.$addPoint = function(x, y) {
		this.$px[this.$n]=x
		this.$py[this.$n]=y
		this.$bgLine.setPt(this.$n, x, y)
		this.$n++
	}

	AnimPipe.prototype.$calcLength = function() {
		let dx, dy
		this.$ll=0
		for (let i=0; i<this.$n-1; i++) {
			dx=this.$px[i+1]-this.$px[i]
			dy=this.$py[i+1]-this.$py[i]
			this.$ll+=this.$ls[i]=sqrt(dx*dx+dy*dy)
		}
	}

	AnimPipe.prototype.$setPoint = function(n, x, y) {
		this.$px[n]=x
		this.$py[n]=y
		this.$bgLine.setPt(n, x, y)
	}

	AnimPipe.prototype.$reset = function() {
		this.$fgLine.setNPt(0)
		this.$fgLine.setPen($g[44])
	}

	function AnimatedClock($grp, x, y, w, h) {
		Group.call(this, $grp, 0, ((0) | EXTENDEDGOBJ), x, y, 0, 0, w, h)
		this.$cw=w
		this.$chw=this.$cw/2
		this.$ch=h-6
		this.$stall=0, this.$type=0
		this.setClipPath(R$(0, 0, w, h))
		this.$clkDisplay=new Rectangle2(this, 0, 0, $g[1], $g[10], 0, 0, w, h)
		this.$clkDisplay.setRounded(2, 2)
		this.$prev_clock=new Line(this, $g[18], 0, $g[46], -this.$chw+this.$chw/5, 3+this.$ch, 0, 0, 0, -this.$ch, this.$chw, 0, 0, this.$ch, this.$chw, 0)
		this.$next_clock=new Line(this, $g[18], 0, $g[47], this.$chw+this.$chw/5, 3+this.$ch, 0, 0, 0, -this.$ch, this.$chw, 0, 0, this.$ch, this.$chw, 0)
		this.$dot=new Rectangle2(this, $g[18], 0, 0, $g[5], w/2-3, h-6, 6, 6)
		this.$canUpdate
	}
	AnimatedClock.prototype = Object.create(Group.prototype)

	AnimatedClock.prototype.$setStall = function(s, t) {
		this.$stall=s
		this.$type=t
		if (this.$canUpdate)
		this.$prev_clock.setPen(this.$stall ? (this.$type ? $g[48] : $g[46]) : $g[47])
	}

	function Button(x, y, w, h, caption) {
		VObj.call(this)
		this.$label=new Rectangle2($g[0], 0, 0, $g[1], $g[49], x, y, w, h, $g[1], $g[13], caption)
		this.$label.setRounded(5, 5)
		this.$label.addEventHandler("eventEE", this, this.$eh11)
	}
	Button.prototype = Object.create(VObj.prototype)

	Button.prototype.$eh11 = function(enter, x, y) {
		this.$label.setBrush(enter ? $g[50] : $g[49])
		return 0
	}

	Button.prototype.$setCaption = function(caption) {
		this.$label.setTxt(caption)
	}

	Button.prototype.$showLocked = function(locked) {
		this.$label.setFont(locked ? $g[14] : $g[13])
	}

	function VivioLogo(x, y, w, h) {
		VObj.call(this)
		this.$label=new Rectangle2($g[0], 0, 0, 0, $g[51], x, y, w, h, $g[4], $g[53], "v")
		this.$label.setRounded(5, 5)
		this.$label.addEventHandler("eventEE", this, this.$eh12)
		this.$label.addEventHandler("eventMB", this, this.$eh13)
	}
	VivioLogo.prototype = Object.create(VObj.prototype)

	VivioLogo.prototype.$eh12 = function(enter, x, y) {
		this.$label.setPen(enter ? $g[52] : 0)
		return PROPAGATE
	}

	VivioLogo.prototype.$eh13 = function(down, $1, $2, $3) {
		if (down) {
			this.$label.setPen(0)
		} else {
			this.$label.setPen($g[52])
		}
		this.$label.setFont(down ? $g[54] : $g[53])
		return PROPAGATE
	}

	function setTitle(name) {
		$g[58].setTxt(name=="" ? "DLX/MIPS Animation" : sprintf("DLX/MIPS: %s", name))
		$g[58].setPt(1, $g[58].getTxtW()+16, 30)
		$g[59].setPt(1, $g[58].getMbb(1).getW()+10, 40)
	}

	function resetWires() {
		$g[91].$reset()
		$g[89].$reset()
		$g[90].setOpacity(0)
		$g[92].$reset()
		$g[93].$reset()
		$g[94].$reset()
		$g[95].$reset()
		$g[96].$reset()
		$g[97].$reset()
		$g[98].$reset()
		$g[99].$reset()
		$g[100].$reset()
		$g[101].$reset()
		$g[120].$reset()
		$g[121].$reset()
		$g[122].$reset()
		$g[123].$reset()
		$g[124].$reset()
		$g[125].$reset()
		$g[126].setOpacity(0)
		$g[127].$reset()
		$g[128].setOpacity(0)
		$g[129].$reset()
		$g[130].setOpacity(0)
		$g[131].$reset()
		$g[132].setOpacity(0)
		$g[134].$reset()
		$g[133].$reset()
		$g[136].$reset()
		$g[137].$reset()
		$g[138].setOpacity(0)
		$g[139].$reset()
		$g[140].setOpacity(0)
		$g[135].setOpacity(0)
		$g[113].setPen($g[110])
		$g[114].setPen($g[110])
		$g[115].setPen($g[110])
		$g[116].setPen($g[110])
		$g[117].setPen($g[110])
		$g[148].$reset()
		$g[149].$reset()
		$g[150].$reset()
		$g[151].$reset()
		$g[152].$reset()
		$g[153].$reset()
		$g[154].setOpacity(0)
		$g[155].$reset()
		$g[156].$reset()
		$g[157].$reset()
		$g[158].$reset()
		$g[159].$reset()
		$g[160].$reset()
		$g[161].$reset()
		$g[162].$reset()
		$g[147].$txtOp.setOpacity(0)
		$g[147].$txtResult.setOpacity(0)
		$g[168].$reset()
		$g[169].$reset()
		$g[170].$reset()
		$g[171].$reset()
		$g[172].$reset()
		$g[173].$reset()
		$g[176].$reset()
	}

	function resetRegisters() {
		$g[82].$reset()
		$g[82].$setValue(124)
		$g[103].$reset()
		$g[142].$reset()
		$g[143].$reset()
		$g[165].$reset()
		$g[164].$reset()
		$g[175].$reset()
		$g[84][0].$reset()
		$g[84][1].$reset()
		$g[85][0].$reset()
		$g[85][1].$reset()
		$g[102].$reset()
		$g[141].$reset()
		$g[163].$reset()
		$g[174].$reset()
		$g[80].$setActive(124)
		$g[164].$setInvalid(1)
		$g[164].$updateLabel()
		$g[175].$setInvalid(1)
		$g[175].$updateLabel()
		$g[84][0].$setValue(-1)
		$g[84][0].$setInvalid(1)
		$g[84][0].$updateLabel()
		$g[84][1].$setValue(-1)
		$g[84][1].$setInvalid(1)
		$g[84][1].$updateLabel()
		$g[31]=0
		$g[32]=0
		$g[77].setTxt("%4d", 0)
		$g[78].setTxt("%4d", 0)
	}

	function resetCircuit() {
		resetRegisters()
		resetWires()
	}

	function showBTB(opacity) {
		$g[83].setOpacity(opacity)
		$g[84][0].$setOpacity(opacity)
		$g[84][1].$setOpacity(opacity)
		$g[85][0].$setOpacity(opacity)
		$g[85][1].$setOpacity(opacity)
		$g[97].$setOpacity(opacity)
		$g[120].$setOpacity(opacity)
		$g[86].$setOpacity(opacity)
		$g[100].$setOpacity(opacity)
		$g[93].$setOpacity(opacity)
		$g[131].$setOpacity(opacity)
		$g[134].$setOpacity(opacity)
		$g[108].$setOpacity(opacity)
		$g[133].$setOpacity(opacity)
	}

	function showALUForwarding(opacity) {
		if (opacity==0) {
			$g[151].$setPoint(0, 420, 205)
			$g[151].$setPoint(1, 481, 205)
			$g[152].$setPoint(0, ($g[27]) ? 420 : 410, 250)
			$g[152].$setPoint(1, 470, 250)
			$g[153].$setPoint(2, 430, 260)
			$g[153].$setPoint(3, 470, 260)
			$g[151].$setHead(0)
		} else {
			$g[151].$setPoint(0, 420, 220)
			$g[151].$setPoint(1, 470, 220)
			$g[152].$setPoint(0, 420, 240)
			$g[152].$setPoint(1, 470, 240)
			$g[153].$setPoint(2, 430, 250)
			$g[153].$setPoint(3, 470, 250)
			$g[151].$setHead(1)
		}
		$g[144].$setOpacity(opacity)
		$g[149].$setOpacity(opacity)
		$g[150].$setOpacity(opacity)
		$g[156].$setOpacity(opacity)
		$g[155].$setOpacity(opacity)
	}

	function showSMDRForwarding(opacity) {
		if (opacity==0) {
			$g[159].$setPoint(1, 410, 330)
			$g[159].$setPoint(2, 480, 330)
			$g[159].$setHead(0)
		} else {
			$g[159].$setPoint(1, 410, 340)
			$g[159].$setPoint(2, 470, 340)
			$g[159].$setHead(1)
		}
		$g[146].$setOpacity(opacity)
		$g[157].$setOpacity(opacity)
		$g[158].$setOpacity(opacity)
	}

	function showZeroForwarding(opacity) {
		if (opacity==0) {
			$g[116].setPt(1, 355, 135)
			$g[116].setPt(2, 355, 160)
		} else {
			$g[116].setPt(1, 345, 135)
			$g[116].setPt(2, 345, 160)
		}
		$g[118].setOpacity(opacity)
		$g[119].setOpacity(opacity)
		$g[113].setOpacity(opacity)
		$g[114].setOpacity(opacity)
		$g[115].setOpacity(opacity)
	}

	function showPipeline(opacity) {
		if (opacity==0) {
			$g[99].$setPoint(1, 260, 230)
			$g[99].$setPoint(2, 260, 240)
			$g[122].$setPoint(0, 260, 230)
			$g[123].$setPoint(0, 260, 230)
			$g[101].$setPoint(1, 420, 390)
			$g[139].$setPoint(1, 370, 205)
			$g[139].$setPoint(2, 420, 205)
			$g[136].$setPoint(1, 410, 250)
			$g[159].$setPoint(0, 410, 250)
			$g[161].$setPoint(3, 580, 230)
			$g[162].$setPoint(3, 580, 230)
			$g[160].$setPoint(1, 590, 330)
			$g[170].$setPoint(1, 680, 230)
			$g[101].$setHead(0)
			$g[99].$setHead(0)
			$g[139].$setHead(0)
			$g[151].$setHead(0)
			$g[136].$setHead(0)
			$g[159].$setHead(0)
			$g[160].$setHead(0)
			$g[161].$setHead(0)
			$g[162].$setHead(0)
			$g[170].$setHead(0)
			showBTB(opacity)
			showALUForwarding(opacity)
			showSMDRForwarding(opacity)
			showZeroForwarding(opacity)
		} else {
			$g[99].$setPoint(1, 240, 230)
			$g[99].$setPoint(2, 250, 230)
			$g[122].$setPoint(0, 260, 250)
			$g[123].$setPoint(0, 260, 250)
			$g[101].$setPoint(1, 400, 390)
			$g[139].$setPoint(1, 370, 210)
			$g[139].$setPoint(2, 400, 210)
			$g[136].$setPoint(1, 400, 250)
			$g[159].$setPoint(0, 410, 270)
			$g[161].$setPoint(3, 560, 230)
			$g[162].$setPoint(3, 560, 230)
			$g[160].$setPoint(1, 550, 330)
			$g[170].$setPoint(1, 660, 230)
			$g[101].$setHead(1)
			$g[99].$setHead(1)
			$g[139].$setHead(1)
			$g[151].$setHead(1)
			$g[136].$setHead(1)
			$g[159].$setHead(1)
			$g[160].$setHead(1)
			$g[161].$setHead(1)
			$g[162].$setHead(1)
			$g[170].$setHead(1)
			showBTB($g[25]==BRANCH_PREDICTION ? 1 : 0)
			showALUForwarding($g[27]==ALU_FORWARDING ? 1 : 0)
			showSMDRForwarding($g[28]==FORWARDING_TO_SMDR ? 1 : 0)
			showZeroForwarding($g[29]==ZERO_FORWARDING ? 1 : 0)
		}
		$g[98].$setOpacity(opacity)
		$g[88].$setOpacity(opacity)
		$g[95].$setOpacity(opacity)
		$g[103].$setOpacity(opacity)
		$g[141].$setOpacity(opacity)
		$g[163].$setOpacity(opacity)
		$g[174].$setOpacity(opacity)
		$g[148].$setOpacity(opacity)
		$g[168].$setOpacity(opacity)
		$g[142].$setOpacity(opacity)
		$g[143].$setOpacity(opacity)
		$g[164].$setOpacity(opacity)
		$g[175].$setOpacity(opacity)
		$g[165].$setOpacity(opacity)
		$g[70].$label.setOpacity(opacity)
		$g[71].$label.setOpacity(opacity)
		$g[72].$label.setOpacity(opacity)
		$g[73].$label.setOpacity(opacity)
		$g[74].$label.setOpacity(opacity)
	}

	function setPEMode(mode) {
		$g[24]=mode
		if ($g[24]==0) {
			$g[69].$setCaption("Pipelining Enabled")
			showPipeline(1)
		} else
		if ($g[24]==1) {
			$g[69].$setCaption("Pipelining Disabled")
			showPipeline(0)
		}
		setArg("peMode", $g[24].toString())
	}

	function setBPMode(mode) {
		$g[25]=mode
		if ($g[25]==0) {
			$g[70].$setCaption("Branch Prediction")
			showBTB(1)
		} else
		if ($g[25]==1) {
			$g[70].$setCaption("Branch Interlock")
			showBTB(0)
		} else
		if ($g[25]==2) {
			$g[70].$setCaption("Delayed Branches")
			showBTB(0)
		}
		setArg("bpMode", $g[25].toString())
	}

	function setLIMode(mode) {
		$g[26]=mode
		if ($g[26]==0) {
			$g[71].$setCaption("Load Interlock")
		} else
		if ($g[26]==1) {
			$g[71].$setCaption("No Load Interlock")
		}
		setArg("liMode", $g[26].toString())
	}

	function setAFMode(mode) {
		$g[27]=mode
		if ($g[27]==0) {
			$g[72].$setCaption("ALU Forwarding")
			showALUForwarding(1)
		} else
		if ($g[27]==1) {
			$g[72].$setCaption("ALU Interlock")
			showALUForwarding(0)
		} else
		if ($g[27]==2) {
			$g[72].$setCaption("No ALU Interlock")
			showALUForwarding(0)
		}
		setArg("afMode", $g[27].toString())
	}

	function setSFMode(mode) {
		$g[28]=mode
		if ($g[28]==0) {
			$g[73].$setCaption("Store Operand\nForwarding")
			showSMDRForwarding(1)
		} else
		if ($g[28]==1) {
			$g[73].$setCaption("Store Interlock")
			showSMDRForwarding(0)
		} else
		if ($g[28]==2) {
			$g[73].$setCaption("No Store Interlock")
			showSMDRForwarding(0)
		}
		setArg("sfMode", $g[28].toString())
	}

	function setZFMode(mode) {
		$g[29]=mode
		if ($g[29]==0) {
			$g[74].$setCaption("Zero Forwarding")
			showZeroForwarding(1)
		} else
		if ($g[29]==1) {
			$g[74].$setCaption("Zero Interlock")
			showZeroForwarding(0)
		} else
		if ($g[29]==2) {
			$g[74].$setCaption("No Zero Interlock")
			showZeroForwarding(0)
		}
		setArg("zfMode", $g[29].toString())
	}

	function $eh14(enter, x, y) {
		$g[183].setBrush(enter ? $g[7] : $g[11])
	}

	function $eh15(down, flags, x, y) {
		if (down&&(flags&MB_LEFT)) {
			setArg("help", "0")
			$g[19].setOpacity(0)
		}
		return 0
	}

	function btbIndex(pc) {
		for (let lp1=0; lp1<2; lp1++)
		if ($g[84][lp1].$value==pc)
		return lp1
		return -1
	}

	function updBTB() {
		if ($g[188]!=$g[82].$value) {
			$g[82].$setNewValue($g[188])
			$g[184]=$g[189]
			if ($g[25]==BRANCH_PREDICTION) {
				if ($g[188]==$g[103].$value+4) {
					if (btbIndex($g[103].$value)>=0)
					$g[84][btbIndex($g[103].$value)].$setInvalid(1)
				} else {
					if (btbIndex($g[103].$value)>=0)
					$g[22]=btbIndex($g[103].$value)
					else 
					$g[22]=($g[22]) ? 0 : 1
					$g[84][$g[22]].$setNewValue($g[103].$value)
					$g[84][$g[22]].$setInvalid(0)
					$g[84][$g[22]].$useTag=0
					$g[85][$g[22]].$setNewValue($g[188])
				}
			}
		}
	}

	function detectStall() {
		$g[21]=NO_STALL
		$g[23]=0
		if ($g[27]==ALU_INTERLOCK) {
			if (instrOpTypeRdt($g[141].$vIns)==OP_TYPE_REG) {
				if ((instrOpTypeRs1($g[102].$vIns)==OP_TYPE_REG)&&($g[102].$vRs1==$g[141].$vRdt))
				$g[21]=DATA_STALL
				if ((instrOpTypeRs2($g[102].$vIns)==OP_TYPE_REG)&&($g[102].$vRs2==$g[141].$vRdt))
				$g[21]=DATA_STALL
			}
			if (instrOpTypeRdt($g[163].$vIns)==OP_TYPE_REG) {
				if ((instrOpTypeRs1($g[102].$vIns)==OP_TYPE_REG)&&($g[102].$vRs1==$g[163].$vRdt))
				$g[21]=DATA_STALL
				if ((instrOpTypeRs2($g[102].$vIns)==OP_TYPE_REG)&&($g[102].$vRs2==$g[163].$vRdt))
				$g[21]=DATA_STALL
			}
		}
		if (($g[28]==STORE_INTERLOCK)&&($g[102].$vIns==ST)) {
			if ((instrOpTypeRdt($g[141].$vIns)==OP_TYPE_REG)&&($g[141].$vRdt==$g[102].$vRdt))
			$g[21]=DATA_STALL
			if ((instrOpTypeRdt($g[163].$vIns)==OP_TYPE_REG)&&($g[163].$vRdt==$g[102].$vRdt))
			$g[21]=DATA_STALL
		}
		if (($g[29]==ZERO_INTERLOCK)&&instrIsBranch($g[102].$vIns)) {
			if ((instrOpTypeRdt($g[141].$vIns)==OP_TYPE_REG)&&($g[141].$vRdt==$g[102].$vRs1))
			$g[21]=DATA_STALL
			if ((instrOpTypeRdt($g[163].$vIns)==OP_TYPE_REG)&&($g[163].$vRdt==$g[102].$vRs1))
			$g[21]=DATA_STALL
		}
		if (instrIsJumpR($g[102].$vIns)) {
			if ((instrOpTypeRdt($g[141].$vIns)==OP_TYPE_REG)&&($g[141].$vRdt==$g[102].$vRs2))
			$g[21]=DATA_STALL
			if ((instrOpTypeRdt($g[163].$vIns)==OP_TYPE_REG)&&($g[163].$vRdt==$g[102].$vRs2))
			$g[21]=DATA_STALL
		}
		if (($g[26]==LOAD_INTERLOCK)&&($g[141].$vIns==LD)) {
			if ((instrOpTypeRs1($g[102].$vIns)==OP_TYPE_REG)&&($g[102].$vRs1==$g[141].$vRdt))
			$g[21]=DATA_STALL
			if ((instrOpTypeRs2($g[102].$vIns)==OP_TYPE_REG)&&($g[102].$vRs2==$g[141].$vRdt))
			$g[21]=DATA_STALL
		}
		if (($g[21]==NO_STALL)&&($g[25]!=DELAYED_BRANCHES)&&instrIsBranchOrJump($g[102].$vIns)&&($g[188]!=$g[82].$value)) {
			$g[23]=1
			$g[21]=CTRL_STALL
		}
		if ($g[21]==DATA_STALL) {
			$g[81].$setStall(1, 0)
		} else
		if ($g[21]==CTRL_STALL) {
			$g[81].$setStall(1, 1)
		}
	}

	function lockButtons() {
		$g[69].$showLocked($g[30])
		$g[70].$showLocked($g[30])
		$g[71].$showLocked($g[30])
		$g[72].$showLocked($g[30])
		$g[73].$showLocked($g[30])
		$g[74].$showLocked($g[30])
	}

	function $eh16(down, flags, x, y) {
		if (down&&(flags&MB_LEFT)&&((!$g[30])|0)) {
			setPEMode(($g[24]+1)%2)
			resetCircuit()
		}
		return 0
	}

	function $eh17(down, flags, x, y) {
		if (down&&(flags&MB_LEFT)&&((!$g[30])|0)) {
			setBPMode(($g[25]+1)%3)
			resetCircuit()
		}
		return 0
	}

	function $eh18(down, flags, x, y) {
		if (down&&(flags&MB_LEFT)&&((!$g[30])|0)) {
			setLIMode(($g[26]+1)%2)
			resetCircuit()
		}
		return 0
	}

	function $eh19(down, flags, x, y) {
		if (down&&(flags&MB_LEFT)&&((!$g[30])|0)) {
			setAFMode(($g[27]+1)%3)
			resetCircuit()
		}
		return 0
	}

	function $eh20(down, flags, $2, $3) {
		if (down&&(flags&MB_LEFT)&&((!$g[30])|0)) {
			setSFMode(($g[28]+1)%3)
			resetCircuit()
		}
		return 0
	}

	function $eh21(down, flags, $2, $3) {
		if (down&&(flags&MB_LEFT)&&((!$g[30])|0)) {
			setZFMode(($g[29]+1)%3)
			resetCircuit()
		}
		return 0
	}

	function $eh22(down, flags, x, y) {
		if (down&&(flags&MB_LEFT)) {
			let lp1, opcode, reg
			let instr
			let s="dlx.php?config="
			for (lp1=0; lp1<32; lp1++) {
				instr=$g[80].$instruction[lp1]
				opcode=(instr.$vIns<<24)|(instr.$vRdt<<16)|(instr.$vRs1<<8)|(instr.$vRs2)
				s=sprintf("%si%d=0x%08X ", s, lp1, opcode)
			}
			for (lp1=0; lp1<4; lp1++) {
				reg=$g[104][lp1].$value
				s=sprintf("%sr%d=0x%02X ", s, lp1, reg)
			}
			for (lp1=0; lp1<4; lp1++) {
				reg=$g[166][lp1].$value
				s=sprintf("%sm%d=0x%02X ", s, lp1, reg)
			}
			s=sprintf("%speMode=%d bpMode=%d liMode=%d afMode=%d sfMode=%d zfMode=%d", s, $g[24], $g[25], $g[26], $g[27], $g[28], $g[29])
			debug("%s", s)
			getURL(s)
		}
		return 0
	}

	function $eh23(down, flags, x, y) {
		if (down&&(flags&MB_LEFT)) {
			getURL("dlx.php")
		}
		return 0
	}

	function $eh24(down, flags, x, y) {
		if (down&&(flags&MB_LEFT))
		getURL("../vivio.htm")
		return 0
	}

	function $eh25(enter, x, y) {
		$g[58].setTxtPen(enter ? $g[3] : $g[4])
		return 0
	}

	function $eh26(down, flags, $2, $3) {
		if (down&&(flags&MB_LEFT))
		getURL("selectTutorial.php")
	}

	function $eh27(enter, x, y) {
		$g[79].setTxtPen(enter ? $g[3] : $g[1])
		return 0
	}

	function $execute(thread) {

		$switchToThread(thread);

		while (1) {
			switch ($pc) {
			case -1:
				return;		// catch thread termination
			case 0:
				$enter(0)	// start with a function call
				$g[1]=new SolidPen(0, 1, BLACK)
				$g[2]=new SolidPen(0, 0, GRAY64)
				$g[3]=new SolidPen(0, 0, RED)
				$g[4]=new SolidPen(0, 0, WHITE)
				$g[5]=new SolidBrush(BLACK)
				$g[6]=new SolidBrush(GRAY192)
				$g[7]=new SolidBrush(GRAY224)
				$g[8]=new SolidBrush(RED)
				$g[9]=new SolidBrush(IRISHGREEN)
				$g[10]=new SolidBrush(WHITE)
				$g[11]=new SolidBrush(YELLOW)
				$g[12]=0
				setVirtualWindow(0, 0, WIDTH, HEIGHT, 1)
				setBgBrush($g[10])
				$g[13]=new Font("Open Sans", 8)
				$g[14]=new Font("Open Sans", 8, STRIKETHROUGH)
				$g[15]=new Font("Open Sans", 14)
				$g[16]=new Layer(10)
				$g[17]=new Layer(20)
				$g[18]=new Layer(30)
				$g[19]=new Layer(40)
				$g[20]=new SolidBrush(RED)
				$g[21]=NO_STALL
				$g[22]=1
				$g[23]=0
				$g[24]=0
				$g[25]=0
				$g[26]=0
				$g[27]=0
				$g[28]=0
				$g[29]=0
				$g[30]=0
				$g[31]=0
				$g[32]=0
				$g[33]=newArray(34)
				$g[33][NOP]="NOP"
				$g[33][ADD]="ADD"
				$g[33][SUB]="SUB"
				$g[33][AND]="AND"
				$g[33][OR]="OR"
				$g[33][XOR]="XOR"
				$g[33][SLL]="SLL"
				$g[33][SRL]="SRL"
				$g[33][SLT]="SLT"
				$g[33][SGT]="SGT"
				$g[33][SLE]="SLE"
				$g[33][SGE]="SGE"
				$g[33][ADDi]="ADDi"
				$g[33][SUBi]="SUBi"
				$g[33][ANDi]="ANDi"
				$g[33][ORi]="ORi"
				$g[33][XORi]="XORi"
				$g[33][SLLi]="SLLi"
				$g[33][SRLi]="SRLi"
				$g[33][SLTi]="SLTi"
				$g[33][SGTi]="SGTi"
				$g[33][SLEi]="SLEi"
				$g[33][SGEi]="SGEi"
				$g[33][LD]="LD"
				$g[33][ST]="ST"
				$g[33][BEQZ]="BEQZ"
				$g[33][BNEZ]="BNEZ"
				$g[33][J]="J"
				$g[33][JAL]="JAL"
				$g[33][JR]="JR"
				$g[33][JALR]="JALR"
				$g[33][HALT]="HALT"
				$g[33][STALL]="STALL"
				$g[33][EMPTY]="EMPTY"
				$g[34]=new SolidPen(DOT, 1, rgba(0.75, 0.75, 0.75))
				$g[35]=new SolidPen(SOLID, 1, RED, ARROW60_END)
				$g[36]=new Menu(GRAY192, WHITE, $g[15])
				$g[36].addItem("NOP", NOP)
				$g[36].addItem("ADD", ADD)
				$g[36].addItem("SUB", SUB)
				$g[36].addItem("AND", AND)
				$g[36].addItem("OR", OR)
				$g[36].addItem("XOR", XOR)
				$g[36].addItem("SLL", SLL)
				$g[36].addItem("SRL", SRL)
				$g[36].addItem("SLT", SLT)
				$g[36].addItem("SGT", SGT)
				$g[36].addItem("SLE", SLE)
				$g[36].addItem("SGE", SGE)
				$g[36].addItem("ADDi", ADDi)
				$g[36].addItem("SUBi", SUBi)
				$g[36].addItem("ANDi", ANDi)
				$g[36].addItem("ORi", ORi)
				$g[36].addItem("XORi", XORi)
				$g[36].addItem("SLLi", SLLi)
				$g[36].addItem("SRLi", SRLi)
				$g[36].addItem("SLTi", SLTi)
				$g[36].addItem("SGTi", SGTi)
				$g[36].addItem("SLEi", SLEi)
				$g[36].addItem("SGEi", SGEi)
				$g[36].addItem("LD", LD)
				$g[36].addItem("ST", ST)
				$g[36].addItem("BEQZ", BEQZ)
				$g[36].addItem("BNEZ", BNEZ)
				$g[36].addItem("J", J)
				$g[36].addItem("JAL", JAL)
				$g[36].addItem("JR", JR)
				$g[36].addItem("JALR", JALR)
				$g[36].addItem("HALT", HALT)
				$g[37]=new Menu(GRAY192, WHITE, $g[15])
				$g[37].addItem("R0", 0)
				$g[37].addItem("R1", 1)
				$g[37].addItem("R2", 2)
				$g[37].addItem("R3", 3)
				$g[38]=new SolidBrush(PURPLE)
				$g[39]=new SolidBrush(WHITE)
				$g[40]=new SolidBrush(LIGHTBLUE)
				$g[41]=new Font("Open Sans", 9)
				$g[42]=new SolidPen(SOLID, PENW, GRAY192, BEVEL_JOIN|BUTT_END)
				$g[43]=new SolidPen(SOLID, PENW, GRAY192, BEVEL_JOIN|ARROW60_END)
				$g[44]=new SolidPen(SOLID, PENW, RED, BEVEL_JOIN|BUTT_END)
				$g[45]=new SolidPen(SOLID, PENW, RED, BEVEL_JOIN|ARROW60_END)
				$g[46]=new SolidPen(SOLID, 1, RED, ROUND_START|ROUND_JOIN|ROUND_END)
				$g[47]=new SolidPen(SOLID, 1, GREEN, ROUND_START|ROUND_JOIN|ROUND_END)
				$g[48]=new SolidPen(SOLID, 1, ORANGE, ROUND_START|ROUND_JOIN|ROUND_END)
				$g[49]=new SolidBrush(WHITE)
				$g[50]=new SolidBrush(GRAY224)
				$g[51]=new SolidBrush(IRISHGREEN)
				$g[52]=new SolidPen(0, 2, rgba(0, 0, 0.40000000000000002))
				$g[53]=new Font("Open Sans", 18, 0)
				$g[54]=new Font("Open Sans", 16, 0)
				$g[55]=new SolidPen(SOLID, 2, RED, ROUND_START|ROUND_JOIN|ROUND_END)
				$g[56]=new Font("Open Sans", 12, BOLD)
				$g[57]=new Font("Open Sans", 20, 0)
				$g[58]=new Rectangle2($g[0], 0, HCENTRE, 0, $g[9], 10, 10, 300, 30, $g[4], $g[57])
				$g[58].setRounded(5, 5)
				$g[58].setTxtOff(0, 1)
				$g[59]=new Rectangle2($g[0], $g[19], 0, $g[55], 0, 5, 5, 220, 40)
				$g[59].setRounded(5, 5)
				setTitle(getArg("name", ""))
				$g[60]=new SolidPen(DASH, 1, DARKBLUE, ROUND_START|ROUND_JOIN|ROUND_END)
				new Line2($g[0], 0, ABSOLUTE, $g[60], 120, 80, 700, 80)
				new Line2($g[0], 0, ABSOLUTE, $g[60], 120, 440, 700, 440)
				new Line2($g[0], 0, ABSOLUTE, $g[60], 120, 80, 120, 440)
				$g[61]=new Line2($g[0], 0, ABSOLUTE, $g[60], 240, 80, 240, 440)
				$g[62]=new Line2($g[0], 0, ABSOLUTE, $g[60], 390, 80, 390, 440)
				$g[63]=new Line2($g[0], 0, ABSOLUTE, $g[60], 540, 80, 540, 440)
				$g[64]=new Line2($g[0], 0, ABSOLUTE, $g[60], 650, 80, 650, 440)
				new Line2($g[0], 0, ABSOLUTE, $g[60], 700, 80, 700, 440)
				$g[65]=new SolidPen(DOT, THIN, BLACK)
				new Line2($g[0], 0, ABSOLUTE, $g[65], 10, 450, 700, 450)
				$g[66]=new Font("Open Sans", 10, BOLD)
				$g[67]=new Button(10, 460, 60, 20, "Save\nConfiguration")
				$g[68]=new Button(75, 460, 60, 20, "Load\nConfiguration")
				$g[69]=new Button(140, 460, 85, 20, "Pipelining Enabled")
				$g[70]=new Button(230, 460, 85, 20, "Branch Prediction")
				$g[71]=new Button(320, 460, 85, 20, "Load Interlock")
				$g[72]=new Button(410, 460, 85, 20, "ALU Forwarding")
				$g[73]=new Button(500, 460, 85, 20, "Store Operand\nForwarding")
				$g[74]=new Button(590, 460, 85, 20, "Zero Forwarding")
				$g[75]=new VivioLogo(WIDTH-30, 460, 20, 20)
				new Txt($g[0], 0, HLEFT|VTOP, 10, 46, $g[2], $g[13], "instructions executed:")
				$g[76]=new Txt($g[0], 0, HLEFT|VTOP, 10, 56, $g[2], $g[13], "clock cycles:")
				$g[77]=new Txt($g[0], 0, HLEFT|VTOP, 90, 46, $g[3], $g[13], "0")
				$g[78]=new Txt($g[0], 0, HLEFT|VTOP, 90, 56, $g[3], $g[13], "0")
				$g[79]=new Rectangle2($g[0], 0, 0, 0, 0, 10, 68, 100, 10, 0, $g[13], "Instruction Cache")
				$g[80]=new InstructionMemory(10, 80, 100, 320)
				$g[81]=new AnimatedClock($g[0], 20, 410, 80, 30)
				$g[82]=new Register(200, 210, 20, 40, TOP, "PC", 0)
				$g[83]=new Rectangle2($g[0], 0, 0, 0, 0, 150, 85, 80, 10, 0, $g[13], "Branch Target Buffer")
				$g[84]=newArray(2)
				$g[84][0]=new Register(150, 100, 40, 20, LEFT, "PC", 0)
				$g[84][1]=new Register(150, 120, 40, 20, LEFT, "PC", 0)
				$g[85]=newArray(2)
				$g[85][0]=new Register(190, 100, 40, 20, RIGHT, "PPC", 0)
				$g[85][1]=new Register(190, 120, 40, 20, RIGHT, "PPC", 0)
				$g[86]=new Component(200, 170, 30, 10, "mux 2")
				$g[87]=new Component(170, 205, 10, 50, "mux 1")
				$g[88]=new Component(160, 270, 20, 10, "+4")
				$g[89]=new AnimPipe()
				$g[89].$addPoint(110, 390)
				$g[89].$addPoint(250, 390)
				$g[90]=new Rectangle($g[0], $g[18], 0, 0, $g[8], 180, 390, -30, -6, 60, 12, $g[4], $g[13])
				$g[90].setRounded(2, 2)
				$g[91]=new AnimPipe()
				$g[91].$addPoint(210, 250)
				$g[91].$addPoint(210, 320)
				$g[91].$addPoint(110, 320)
				$g[92]=new AnimPipe()
				$g[92].$addPoint(300, 170)
				$g[92].$addPoint(300, 160)
				$g[92].$addPoint(150, 160)
				$g[92].$addPoint(150, 215)
				$g[92].$addPoint(170, 215)
				$g[93]=new AnimPipe()
				$g[93].$addPoint(150, 120)
				$g[93].$addPoint(140, 120)
				$g[93].$addPoint(140, 225)
				$g[93].$addPoint(170, 225)
				$g[94]=new AnimPipe()
				$g[94].$addPoint(315, 50)
				$g[94].$addPoint(130, 50)
				$g[94].$addPoint(130, 235)
				$g[94].$addPoint(170, 235)
				$g[95]=new AnimPipe()
				$g[95].$addPoint(160, 275)
				$g[95].$addPoint(150, 275)
				$g[95].$addPoint(150, 245)
				$g[95].$addPoint(170, 245)
				$g[96]=new AnimPipe()
				$g[96].$addPoint(180, 230)
				$g[96].$addPoint(200, 230)
				$g[97]=new AnimPipe()
				$g[97].$addPoint(210, 210)
				$g[97].$addPoint(210, 180)
				$g[98]=new AnimPipe()
				$g[98].$addPoint(210, 250)
				$g[98].$addPoint(210, 275)
				$g[98].$addPoint(180, 275)
				$g[99]=new AnimPipe()
				$g[99].$addPoint(220, 230)
				$g[99].$addPoint(240, 230)
				$g[99].$addPoint(250, 230)
				$g[100]=new AnimPipe()
				$g[100].$addPoint(215, 170)
				$g[100].$addPoint(215, 140)
				$g[101]=new AnimPipe()
				$g[101].$addPoint(270, 390)
				$g[101].$addPoint(400, 390)
				$g[102]=new InstructionRegister(250, 350, 20, 85, "ID")
				$g[103]=new Register(250, 210, 20, 40, TOP, "PC1", 0)
				new Txt($g[0], 0, HLEFT|VTOP, 400, 40, 0, $g[13], "Register\nFile")
				$g[104]=newArray(4)
				$g[104][0]=new Register(315, 30, 40, 20, LEFT, "R0", 0)
				$g[104][1]=new Register(315, 50, 40, 20, LEFT, "R1", 1)
				$g[104][2]=new Register(355, 30, 40, 20, RIGHT, "R2", 1)
				$g[104][3]=new Register(355, 50, 40, 20, RIGHT, "R3", 1)
				$g[105]=new Component(275, 170, 50, 10, "mux 3")
				$g[106]=new Component(270, 270, 30, 10, "ADD4")
				$g[107]=new Component(300, 270, 30, 10, "ADDi")
				$g[108]=new Component(250, 100, 10, 40, "mux 4")
				$g[109]=new Component(370, 235, 10, 30, "mux 5")
				new Rectangle2($g[0], 0, 0, 0, 0, 280, 300, 20, 10, 0, $g[13], "4")
				$g[110]=new SolidPen(SOLID, 0, PURPLE, ARROW60_END)
				$g[111]=new SolidPen(SOLID, 2, RED, ARROW60_END)
				$g[112]=new SolidPen(SOLID, MEDIUM, BLACK)
				$g[113]=new Line2($g[0], $g[16], ABSOLUTE, $g[110], 548, 230, 548, 150, 365, 150, 365, 160)
				$g[114]=new Line2($g[0], $g[16], ABSOLUTE, $g[110], 646, 230, 646, 145, 360, 145, 360, 160)
				$g[115]=new Line2($g[0], $g[16], ABSOLUTE, $g[110], 690, 140, 355, 140, 355, 160)
				$g[116]=new Line($g[0], $g[16], ABSOLUTE, $g[110], 0, 0, 370, 135, 345, 135, 345, 160)
				$g[117]=new Line2($g[0], $g[16], ABSOLUTE, $g[110], 355, 160, 355, 175, 325, 175)
				$g[118]=new Line2($g[0], $g[16], ABSOLUTE, $g[112], 344, 160, 366, 160)
				$g[119]=new Txt($g[0], $g[16], HLEFT|VTOP, 346, 162, 0, $g[13], "zero")
				$g[120]=new AnimPipe()
				$g[120].$addPoint(260, 210)
				$g[120].$addPoint(260, 200)
				$g[120].$addPoint(220, 200)
				$g[120].$addPoint(220, 180)
				$g[121]=new AnimPipe()
				$g[121].$addPoint(285, 270)
				$g[121].$addPoint(285, 255)
				$g[121].$addPoint(370, 255)
				$g[122]=new AnimPipe()
				$g[122].$addPoint(260, 250)
				$g[122].$addPoint(260, 320)
				$g[122].$addPoint(280, 320)
				$g[122].$addPoint(280, 280)
				$g[123]=new AnimPipe()
				$g[123].$addPoint(260, 250)
				$g[123].$addPoint(260, 320)
				$g[123].$addPoint(310, 320)
				$g[123].$addPoint(310, 280)
				$g[124]=new AnimPipe()
				$g[124].$addPoint(290, 300)
				$g[124].$addPoint(290, 280)
				$g[125]=new AnimPipe()
				$g[125].$addPoint(270, 390)
				$g[125].$addPoint(320, 390)
				$g[125].$addPoint(320, 280)
				$g[126]=new Rectangle($g[0], $g[18], 0, 0, $g[8], 320, 376, -12, -6, 24, 12, $g[4], $g[13])
				$g[126].setRounded(2, 2)
				$g[127]=new AnimPipe()
				$g[127].$addPoint(285, 270)
				$g[127].$addPoint(285, 180)
				$g[128]=new Rectangle($g[0], $g[18], 0, 0, $g[8], 285, 200, -12, -6, 24, 12, $g[4], $g[13])
				$g[128].setRounded(2, 2)
				$g[129]=new AnimPipe()
				$g[129].$addPoint(315, 270)
				$g[129].$addPoint(315, 180)
				$g[130]=new Rectangle($g[0], $g[18], 0, 0, $g[8], 315, 200, -12, -6, 24, 12, $g[4], $g[13])
				$g[130].setRounded(2, 2)
				$g[131]=new AnimPipe()
				$g[131].$addPoint(300, 170)
				$g[131].$addPoint(300, 130)
				$g[131].$addPoint(260, 130)
				$g[132]=new Rectangle($g[0], $g[18], 0, 0, $g[8], 300, 160, -12, -6, 24, 12, $g[4], $g[13])
				$g[132].setRounded(2, 2)
				$g[133]=new AnimPipe()
				$g[133].$addPoint(250, 120)
				$g[133].$addPoint(230, 120)
				$g[134]=new AnimPipe()
				$g[134].$addPoint(315, 50)
				$g[134].$addPoint(300, 50)
				$g[134].$addPoint(300, 110)
				$g[134].$addPoint(260, 110)
				$g[135]=new Rectangle($g[0], $g[18], 0, 0, $g[8], 300, 44, -12, 0, 24, 12, $g[4], $g[13])
				$g[136]=new AnimPipe()
				$g[136].$addPoint(380, 250)
				$g[136].$addPoint(400, 250)
				$g[137]=new AnimPipe()
				$g[137].$addPoint(340, 70)
				$g[137].$addPoint(340, 245)
				$g[137].$addPoint(370, 245)
				$g[138]=new Rectangle($g[0], $g[18], 0, 0, $g[8], 340, 82, -12, 0, 24, 12, $g[4], $g[13], "R0:0")
				$g[138].setRounded(2, 2)
				$g[139]=new AnimPipe()
				$g[139].$addPoint(370, 70)
				$g[139].$addPoint(370, 210)
				$g[139].$addPoint(400, 210)
				$g[140]=new Rectangle($g[0], $g[18], 0, 0, $g[8], 370, 82, -12, 0, 24, 12, $g[4], $g[13], "R0:0")
				$g[140].setRounded(2, 2)
				$g[141]=new InstructionRegister(400, 350, 20, 85, "EX")
				$g[142]=new Register(400, 190, 20, 40, TOP, "A", 0)
				$g[143]=new Register(400, 230, 20, 40, BOTTOM, "B", 0)
				$g[144]=new Component(470, 180, 10, 50, "mux 6")
				$g[145]=new Component(470, 230, 10, 50, "mux 7")
				$g[146]=new Component(470, 310, 10, 40, "mux 8")
				$g[147]=new ALU(490, 190, 40, 80)
				$g[148]=new AnimPipe()
				$g[148].$addPoint(420, 390)
				$g[148].$addPoint(560, 390)
				$g[149]=new AnimPipe()
				$g[149].$addPoint(570, 210)
				$g[149].$addPoint(570, 170)
				$g[149].$addPoint(450, 170)
				$g[149].$addPoint(450, 190)
				$g[149].$addPoint(470, 190)
				$g[150]=new AnimPipe()
				$g[150].$addPoint(670, 210)
				$g[150].$addPoint(670, 160)
				$g[150].$addPoint(440, 160)
				$g[150].$addPoint(440, 200)
				$g[150].$addPoint(470, 200)
				$g[151]=new AnimPipe()
				$g[151].$addPoint(420, 220)
				$g[151].$addPoint(470, 220)
				$g[152]=new AnimPipe()
				$g[152].$addPoint(420, 240)
				$g[152].$addPoint(470, 240)
				$g[153]=new AnimPipe()
				$g[153].$addPoint(420, 390)
				$g[153].$addPoint(430, 390)
				$g[153].$addPoint(430, 250)
				$g[153].$addPoint(470, 250)
				$g[154]=new Rectangle($g[0], $g[18], 0, 0, $g[8], 432, 370, -10, 0, 20, 12, $g[4], $g[13], "IMM")
				$g[154].setRounded(2, 2)
				$g[155]=new AnimPipe()
				$g[155].$addPoint(670, 250)
				$g[155].$addPoint(670, 300)
				$g[155].$addPoint(440, 300)
				$g[155].$addPoint(440, 260)
				$g[155].$addPoint(470, 260)
				$g[156]=new AnimPipe()
				$g[156].$addPoint(570, 250)
				$g[156].$addPoint(570, 290)
				$g[156].$addPoint(450, 290)
				$g[156].$addPoint(450, 270)
				$g[156].$addPoint(470, 270)
				$g[157]=new AnimPipe()
				$g[157].$addPoint(570, 250)
				$g[157].$addPoint(570, 290)
				$g[157].$addPoint(450, 290)
				$g[157].$addPoint(450, 320)
				$g[157].$addPoint(470, 320)
				$g[158]=new AnimPipe()
				$g[158].$addPoint(670, 250)
				$g[158].$addPoint(670, 300)
				$g[158].$addPoint(440, 300)
				$g[158].$addPoint(440, 330)
				$g[158].$addPoint(470, 330)
				$g[159]=new AnimPipe()
				$g[159].$addPoint(410, 270)
				$g[159].$addPoint(410, 340)
				$g[159].$addPoint(470, 340)
				$g[160]=new AnimPipe()
				$g[160].$addPoint(480, 330)
				$g[160].$addPoint(550, 330)
				$g[161]=new AnimPipe()
				$g[161].$addPoint(480, 205)
				$g[161].$addPoint(490, 205)
				$g[161].$addPoint(540, 230)
				$g[161].$addPoint(560, 230)
				$g[162]=new AnimPipe()
				$g[162].$addPoint(480, 255)
				$g[162].$addPoint(490, 255)
				$g[162].$addPoint(540, 230)
				$g[162].$addPoint(560, 230)
				$g[163]=new InstructionRegister(560, 350, 20, 85, "MA")
				$g[164]=new Register(560, 210, 20, 40, TOP, "O0", 0)
				$g[165]=new Register(550, 320, 40, 20, RIGHT, "SMR", 0)
				new Txt($g[0], $g[16], HLEFT|VTOP, 553, 100, 0, $g[13], "memory\naddress")
				new Txt($g[0], $g[16], HLEFT|VTOP, 605, 320, 0, $g[13], "memory\ndata-in")
				new Txt($g[0], $g[16], HLEFT|VTOP, 615, 100, 0, $g[13], "memory\ndata-out")
				new Txt($g[0], 0, HLEFT|VTOP, 645, 35, 0, $g[13], "Data\nCache\n(memory)")
				$g[166]=newArray(4)
				$g[166][0]=new Register(560, 30, 40, 20, LEFT, "M0", 1)
				$g[166][1]=new Register(560, 50, 40, 20, LEFT, "M1", 1)
				$g[166][2]=new Register(600, 30, 40, 20, RIGHT, "M2", 1)
				$g[166][3]=new Register(600, 50, 40, 20, RIGHT, "M3", 1)
				$g[167]=new Component(630, 210, 10, 40, "mux 9")
				$g[168]=new AnimPipe()
				$g[168].$addPoint(580, 390)
				$g[168].$addPoint(660, 390)
				$g[169]=new AnimPipe()
				$g[169].$addPoint(580, 230)
				$g[169].$addPoint(630, 230)
				$g[170]=new AnimPipe()
				$g[170].$addPoint(640, 230)
				$g[170].$addPoint(660, 230)
				$g[171]=new AnimPipe()
				$g[171].$addPoint(580, 230)
				$g[171].$addPoint(590, 230)
				$g[171].$addPoint(590, 70)
				$g[172]=new AnimPipe()
				$g[172].$addPoint(590, 330)
				$g[172].$addPoint(600, 330)
				$g[172].$addPoint(600, 70)
				$g[173]=new AnimPipe()
				$g[173].$addPoint(610, 70)
				$g[173].$addPoint(610, 220)
				$g[173].$addPoint(630, 220)
				$g[174]=new InstructionRegister(660, 350, 20, 85, "WB")
				$g[175]=new Register(660, 210, 20, 40, TOP, "O1", 0)
				$g[176]=new AnimPipe()
				$g[176].$addPoint(680, 230)
				$g[176].$addPoint(690, 230)
				$g[176].$addPoint(690, 10)
				$g[176].$addPoint(355, 10)
				$g[176].$addPoint(355, 30)
				$g[147].$txtResult.moveToFront()
				resetCircuit()
				$g[179]=""
				$g[177]=0
				$pc = 1
			case 1:
				if (!($g[177]<32)) {
					$pc = 3
					continue
				}
				$g[80].$setOpcode(4*$g[177], 0)
				$pc = 2
			case 2:
				$g[177]++
				$pc = 1
				continue
			case 3:
				$g[177]=0
				$pc = 4
			case 4:
				if (!($g[177]<4)) {
					$pc = 6
					continue
				}
				$g[179]=sprintf("r%d", $g[177])
				$g[104][$g[177]].$setValue(getArgAsNum($g[179], 0))
				$pc = 5
			case 5:
				$g[177]++
				$pc = 4
				continue
			case 6:
				$g[177]=0
				$pc = 7
			case 7:
				if (!($g[177]<4)) {
					$pc = 9
					continue
				}
				$g[179]=sprintf("m%d", $g[177])
				$g[166][$g[177]].$setValue(getArgAsNum($g[179], 0))
				$pc = 8
			case 8:
				$g[177]++
				$pc = 7
				continue
			case 9:
				setTPS(20)
				$g[12]=getArgAsNum("example", 0)
				if (!($g[12]==0)) {
					$pc = 13
					continue
				}
				$g[177]=0
				$pc = 10
			case 10:
				if (!($g[177]<32)) {
					$pc = 12
					continue
				}
				$g[179]=sprintf("i%d", $g[177])
				$g[80].$setOpcode(4*$g[177], getArgAsNum($g[179], 0))
				$pc = 11
			case 11:
				$g[177]++
				$pc = 10
				continue
			case 12:
				$pc = 27
				continue
			case 13:
				if (!($g[12]==1)) {
					$pc = 14
					continue
				}
				setTitle("Multiplication")
				$g[80].$setValue(0, XOR, 1, 1, 1)
				$g[80].$setValue(4, BEQZ, 0, 2, 36)
				$g[80].$setValue(8, ST, 2, 0, 0)
				$g[80].$setValue(12, ANDi, 2, 2, 1)
				$g[80].$setValue(16, BEQZ, 0, 2, 8)
				$g[80].$setValue(20, ADD, 1, 1, 3)
				$g[80].$setValue(24, LD, 2, 0, 0)
				$g[80].$setValue(28, SRLi, 2, 2, 1)
				$g[80].$setValue(32, SLLi, 3, 3, 1)
				$g[80].$setValue(36, J, 0, 0, 4-36)
				$g[80].$setValue(40, ST, 1, 0, 0)
				$g[80].$setValue(44, HALT, 0, 0, 0)
				$g[104][2].$setValue(11)
				$g[104][3].$setValue(8)
				setTPS(100)
				$pc = 26
				continue
			case 14:
				if (!($g[12]==2)) {
					$pc = 15
					continue
				}
				setTitle("Tutorial 4 Q2")
				$g[80].$setValue(0, ADD, 1, 1, 2)
				$g[80].$setValue(4, ADD, 2, 1, 2)
				$g[80].$setValue(8, ADD, 1, 1, 2)
				$g[80].$setValue(12, ADD, 2, 1, 2)
				$g[80].$setValue(16, ADD, 1, 1, 2)
				$g[80].$setValue(20, HALT, 0, 0, 0)
				$g[104][1].$setValue(1)
				$g[104][2].$setValue(2)
				setTPS(50)
				$pc = 25
				continue
			case 15:
				if (!($g[12]==3)) {
					$pc = 16
					continue
				}
				$g[80].$setValue(0, ADD, 1, 2, 3)
				$g[80].$setValue(4, SUB, 3, 1, 2)
				$g[80].$setValue(8, AND, 2, 1, 3)
				$g[80].$setValue(12, XOR, 2, 1, 3)
				$g[80].$setValue(16, ADD, 2, 1, 0)
				$g[80].$setValue(20, HALT, 0, 0, 0)
				$g[104][1].$setValue(1)
				$g[104][2].$setValue(2)
				setTPS(50)
				$pc = 24
				continue
			case 16:
				if (!($g[12]==4)) {
					$pc = 17
					continue
				}
				$g[80].$setValue(0, ADDi, 1, 0, 3)
				$g[80].$setValue(4, ADD, 0, 0, 0)
				$g[80].$setValue(8, ADD, 0, 0, 0)
				$g[80].$setValue(12, SUBi, 1, 1, 1)
				$g[80].$setValue(16, BNEZ, 0, 1, -12&255)
				$g[80].$setValue(20, HALT, 0, 0, 0)
				setTPS(50)
				$pc = 23
				continue
			case 17:
				if (!($g[12]==5)) {
					$pc = 18
					continue
				}
				$g[80].$setValue(0, JR, 0, 0, 1)
				$g[80].$setValue(32, ADD, 0, 0, 0)
				$g[104][1].$setValue(32)
				$pc = 22
				continue
			case 18:
				if (!($g[12]==6)) {
					$pc = 19
					continue
				}
				$g[80].$setValue(0, LD, 1, 0, 1)
				$g[80].$setValue(4, LD, 2, 0, 2)
				$g[80].$setValue(8, LD, 3, 0, 3)
				$g[80].$setValue(12, ADD, 1, 1, 2)
				$g[80].$setValue(16, ST, 1, 0, 0)
				$g[80].$setValue(20, SUB, 1, 1, 3)
				$g[80].$setValue(24, ST, 1, 0, 1)
				$g[80].$setValue(28, HALT, 0, 0, 0)
				$g[166][0].$setValue(0)
				$g[166][1].$setValue(1)
				$g[166][2].$setValue(2)
				$g[166][3].$setValue(3)
				$pc = 21
				continue
			case 19:
				if (!($g[12]==7)) {
					$pc = 20
					continue
				}
				setTitle("j test")
				$g[80].$setValue(0, XOR, 0, 0, 0)
				$g[80].$setValue(4, XOR, 3, 3, 3)
				$g[80].$setValue(8, J, 0, 0, 24)
				$g[80].$setValue(12, HALT, 0, 0, 0)
				$g[80].$setValue(16, NOP, 0, 0, 0)
				$g[80].$setValue(32, LD, 1, 0, 0)
				$g[80].$setValue(36, LD, 2, 0, 1)
				$g[80].$setValue(40, ADD, 3, 1, 2)
				$g[80].$setValue(44, HALT, 0, 0, 0)
				$g[166][0].$setValue(2)
				$g[166][1].$setValue(3)
				$pc = 20
			case 20:
				$pc = 21
			case 21:
				$pc = 22
			case 22:
				$pc = 23
			case 23:
				$pc = 24
			case 24:
				$pc = 25
			case 25:
				$pc = 26
			case 26:
				$pc = 27
			case 27:
				if (!($g[12]>0)) {
					$pc = 31
					continue
				}
				$g[177]=0
				$pc = 28
			case 28:
				if (!($g[177]<32)) {
					$pc = 30
					continue
				}
				$g[179]=sprintf("i%d", $g[177])
				setArg($g[179], $g[80].$getOpcode($g[177]*4).toString())
				$pc = 29
			case 29:
				$g[177]++
				$pc = 28
				continue
			case 30:
				$g[12]=($g[12]>maxexample) ? 0 : $g[12]
				$pc = 31
			case 31:
				$g[180]=getArgAsNum("haltOnHalt", 1)
				$g[25]=getArgAsNum("bpMode", 0)
				setBPMode($g[25])
				$g[26]=getArgAsNum("liMode", 0)
				setLIMode($g[26])
				$g[27]=getArgAsNum("afMode", 0)
				setAFMode($g[27])
				$g[28]=getArgAsNum("sfMode", 0)
				setSFMode($g[28])
				$g[29]=getArgAsNum("zfMode", 0)
				setZFMode($g[29])
				$g[24]=getArgAsNum("peMode", 0)
				setPEMode($g[24])
				$g[181]=getArgAsNum("help", 0)
				$g[182]=new Rectangle2($g[0], $g[19], 0, 0, $g[10], 0, 0, WIDTH, HEIGHT)
				$g[182].setOpacity(0.5)
				$g[182].setRounded(10, 10)
				new Txt($g[0], $g[19], HLEFT, 185, 12, $g[55], $g[56], "CLICK to select Tutorial configuration")
				new Txt($g[0], $g[19], HLEFT|VTOP, 12, 290, $g[55], $g[56], "CLICK on background to start and stop animation")
				$g[182]=new Rectangle2($g[0], $g[19], 0, $g[55], 0, 20, 66, 80, 12)
				$g[182].setRounded(5, 5)
				new Txt($g[0], $g[19], HLEFT|VTOP, 110, 60, $g[55], $g[56], "CLICK to cycle through\nexample programs")
				$g[182]=new Rectangle2($g[0], $g[19], 0, $g[55], 0, 25, 120, 30, 10)
				$g[182].setRounded(5, 5)
				$g[182]=new Rectangle2($g[0], $g[19], 0, $g[55], 0, 60, 120, 14, 10)
				$g[182].setRounded(5, 5)
				$g[182]=new Rectangle2($g[0], $g[19], 0, $g[55], 0, 76, 120, 14, 10)
				$g[182].setRounded(5, 5)
				$g[182]=new Rectangle2($g[0], $g[19], 0, $g[55], 0, 92, 120, 14, 10)
				$g[182].setRounded(5, 5)
				new Txt($g[0], $g[19], HLEFT|VTOP, 110, 115, $g[55], $g[56], "CLICK to set opcode, registers\nand immediate operand")
				$g[182]=new Rectangle2($g[0], $g[19], 0, $g[55], 0, 310, 25, 90, 50)
				$g[182].setRounded(5, 5)
				$g[182]=new Rectangle2($g[0], $g[19], 0, $g[55], 0, 555, 25, 90, 50)
				$g[182].setRounded(5, 5)
				new Txt($g[0], $g[19], 0, 478, 110, $g[55], $g[56], "LEFT CLICK to increment LSD by 1\nRIGHT CLICK to decrement LSD by 1\nSHIFT LEFT CLICK to increment MSD by 1\nSHIFT RIGHT CLICK to decrememt MSD by 1")
				$g[182]=new Rectangle2($g[0], $g[19], 0, $g[55], 0, 5, 455, 675, 30)
				$g[182].setRounded(10, 10)
				new Rectangle2($g[0], $g[19], HCENTRE, 0, 0, 5, 432, 675, 30, $g[55], $g[56], "CLICK on buttons to save, load or change circuit configuration")
				$g[183]=new Rectangle2($g[0], $g[19], 0, $g[55], $g[11], 305, 230, 100, 30, $g[55], $g[56], "CLOSE HELP")
				$g[183].setRounded(5, 5)
				$g[183].addEventHandler("eventEE", $obj, $eh14)
				$g[183].addEventHandler("eventMB", $obj, $eh15)
				if (!($g[181]==0)) {
					$pc = 32
					continue
				}
				$g[19].setOpacity(0)
				$pc = 32
			case 32:
				$g[69].$label.addEventHandler("eventMB", $obj, $eh16)
				$g[70].$label.addEventHandler("eventMB", $obj, $eh17)
				$g[71].$label.addEventHandler("eventMB", $obj, $eh18)
				$g[72].$label.addEventHandler("eventMB", $obj, $eh19)
				$g[73].$label.addEventHandler("eventMB", $obj, $eh20)
				$g[74].$label.addEventHandler("eventMB", $obj, $eh21)
				$g[67].$label.addEventHandler("eventMB", $obj, $eh22)
				$g[68].$label.addEventHandler("eventMB", $obj, $eh23)
				$g[75].$label.addEventHandler("eventMB", $obj, $eh24)
				$g[58].addEventHandler("eventEE", $obj, $eh25)
				$g[58].addEventHandler("eventMB", $obj, $eh26)
				$g[79].addEventHandler("eventEE", $obj, $eh27)
				$g[79].addEventHandler("eventMB", $obj, 314)
				$call(306, $obj)
				continue
			case 33:
				debug("FINISHED tick=%d", getTick())
				$return(0)
				continue
			case 34:
				$enter(1);	// $eh5
				if (!(((!$g[30])|0))) {
					$pc = 37
					continue
				}
				if (!($stack[$fp-3])) {
					$pc = 36
					continue
				}
				$pc = 35
				$g[36].show($stack[$fp-5], $stack[$fp-6])
				return
			case 35:
				$stack[$fp+1] = $acc
				$obj.$vIns=($stack[$fp+1]==-1) ? $obj.$vIns : $stack[$fp+1]
				$obj.$ins.setTxtPen($g[1])
				$pc = 36
			case 36:
				$obj.$initRegs(1)
				$pc = 37
			case 37:
				$acc = 0
				$return(4)
				continue
			case 38:
				$enter(1);	// $eh6
				if (!(((!$g[30])|0)&&$stack[$fp-3]&&$obj.$opTypeRdt==OP_TYPE_REG)) {
					$pc = 40
					continue
				}
				$pc = 39
				$g[37].show($stack[$fp-5], $stack[$fp-6])
				return
			case 39:
				$stack[$fp+1] = $acc
				$obj.$vRdt=($stack[$fp+1]==-1) ? $obj.$vRdt : $stack[$fp+1]
				$obj.$rdt.setTxtPen($g[1])
				$obj.$initRegs(1)
				$pc = 40
			case 40:
				$acc = 0
				$return(4)
				continue
			case 41:
				$enter(1);	// $eh7
				if (!(((!$g[30])|0)&&$stack[$fp-3]&&$obj.$opTypeRs1==OP_TYPE_REG)) {
					$pc = 43
					continue
				}
				$pc = 42
				$g[37].show($stack[$fp-5], $stack[$fp-6])
				return
			case 42:
				$stack[$fp+1] = $acc
				$obj.$vRs1=($stack[$fp+1]==-1) ? $obj.$vRs1 : $stack[$fp+1]
				$obj.$rs1.setTxtPen($g[1])
				$obj.$initRegs(1)
				$pc = 43
			case 43:
				$acc = 0
				$return(4)
				continue
			case 44:
				$enter(1);	// $eh8
				if (!(((!$g[30])|0)&&$stack[$fp-3])) {
					$pc = 57
					continue
				}
				if (!($stack[$fp-4]&MB_LEFT)) {
					$pc = 51
					continue
				}
				if (!($obj.$opTypeRs2==OP_TYPE_REG)) {
					$pc = 46
					continue
				}
				$pc = 45
				$g[37].show($stack[$fp-5], $stack[$fp-6])
				return
			case 45:
				$obj.$vRs2 = $acc
				$pc = 50
				continue
			case 46:
				if (!($obj.$opTypeRs2==OP_TYPE_IMM)) {
					$pc = 49
					continue
				}
				if (!($stack[$fp-4]&MB_SHIFT)) {
					$pc = 47
					continue
				}
				$obj.$vRs2=($obj.$vRs2+16)&255
				$pc = 48
				continue
			case 47:
				$stack[$fp+1]=(($obj.$vRs2&15)+1)&15
				$obj.$vRs2=($obj.$vRs2&~15)|$stack[$fp+1]
				$pc = 48
			case 48:
				$pc = 49
			case 49:
				$pc = 50
			case 50:
				$pc = 56
				continue
			case 51:
				if (!($stack[$fp-4]&MB_RIGHT)) {
					$pc = 55
					continue
				}
				if (!($obj.$opTypeRs2==OP_TYPE_IMM)) {
					$pc = 54
					continue
				}
				$obj.$clk=timeMS()
				if (!($stack[$fp-4]&MB_SHIFT)) {
					$pc = 52
					continue
				}
				$stack[$fp+1]=((($obj.$vRs2>>4)-1)&15)<<4
				$obj.$vRs2=($obj.$vRs2&~240)|$stack[$fp+1]
				$pc = 53
				continue
			case 52:
				$stack[$fp+1]=(($obj.$vRs2&15)-1)&15
				$obj.$vRs2=($obj.$vRs2&~15)|$stack[$fp+1]
				$pc = 53
			case 53:
				$pc = 54
			case 54:
				$pc = 55
			case 55:
				$pc = 56
			case 56:
				$obj.$initRegs(1)
				$pc = 57
			case 57:
				$return(4)
				continue
			case 58:
				$enter(0);	// update
				$obj.$vIns=$obj.$nIns
				$obj.$vRdt=$obj.$nRdt
				$obj.$vRs1=$obj.$nRs1
				$obj.$vRs2=$obj.$nRs2
				$obj.$txt=instrText($obj.$vIns, $obj.$vRdt, $obj.$vRs1, $obj.$vRs2)
				$obj.$label.setTxt($obj.$txt)
				$obj.$r2.setBrush($g[11])
				$pc = 59
				if (wait(16)) {
					return
				}
			case 59:
				$obj.$r2.setBrush($g[10])
				$return(0)
				continue
			case 60:
				$enter(0);	// update
				$obj.$value=$obj.$newValue
				$obj.$tag=$obj.$newTag
				$obj.$updateLabel()
				$obj.$bg1.setBrush($g[11])
				$obj.$bg2.setBrush($g[11])
				$pc = 61
				if (wait(16)) {
					return
				}
			case 61:
				$obj.$bg1.setBrush($g[10])
				$obj.$bg2.setBrush($g[10])
				$return(0)
				continue
			case 62:
				$enter(5);	// animate
				$stack[$fp+1]=0, $stack[$fp+3]=0
				$stack[$fp+4]=0
				$obj.$calcLength()
				$obj.$fgLine.setPt(0, $obj.$px[0], $obj.$py[0])
				$obj.$fgLine.setPen($g[44])
				$stack[$fp+5]=1
				$pc = 63
			case 63:
				if (!($stack[$fp+5]<$obj.$n)) {
					$pc = 66
					continue
				}
				$obj.$fgLine.setPt($stack[$fp+5], $obj.$px[$stack[$fp+5]-1], $obj.$py[$stack[$fp+5]-1])
				$stack[$fp+1]+=$obj.$ls[$stack[$fp+5]-1]
				$stack[$fp+2]=round($stack[$fp+1]*$stack[$fp-3]/$obj.$ll)
				$pc = 64
				if ($obj.$fgLine.setPt($stack[$fp+5], $obj.$px[$stack[$fp+5]], $obj.$py[$stack[$fp+5]], $stack[$fp+2]-$stack[$fp+3], 1)) {
					return
				}
			case 64:
				$stack[$fp+3]=$stack[$fp+2]
				$pc = 65
			case 65:
				$stack[$fp+5]++
				$pc = 63
				continue
			case 66:
				if (!($obj.$head)) {
					$pc = 67
					continue
				}
				$obj.$fgLine.setPen($g[45])
				$pc = 67
			case 67:
				$return(1)
				continue
			case 68:
				$enter(4);	// clockCycle
				$stack[$fp+1]=$stack[$fp-3]/2
				$stack[$fp+2]=$stack[$fp-3]/5
				$stack[$fp+3]=$stack[$fp-3]/10
				$obj.$canUpdate=0
				$obj.$prev_clock.translate(-$obj.$chw, 0, $stack[$fp+1], 0)
				$obj.$next_clock.translate(-$obj.$chw, 0, $stack[$fp+1], 0)
				$obj.$dot.translate(0, -$obj.$ch, $stack[$fp+2], 0)
				$pc = 69
				if (wait($stack[$fp+1])) {
					return
				}
			case 69:
				$obj.$prev_clock.translate(-$obj.$chw, 0, $stack[$fp+1], 0)
				$obj.$next_clock.translate(-$obj.$chw, 0, $stack[$fp+1], 0)
				$obj.$dot.translate(0, $obj.$ch, $stack[$fp+2], 0)
				$pc = 70
				if (wait($stack[$fp+3])) {
					return
				}
			case 70:
				$obj.$canUpdate=1
				$obj.$prev_clock.translate(2*$obj.$cw, 0)
				$obj.$prev_clock.setPen($obj.$stall ? ($obj.$type ? $g[48] : $g[46]) : $g[47])
				$pc = 71
				if (wait($stack[$fp+2]*2)) {
					return
				}
			case 71:
				$stack[$fp+4]=$obj.$next_clock
				$obj.$next_clock=$obj.$prev_clock
				$obj.$prev_clock=$stack[$fp+4]
				if (!($obj.$stall)) {
					$pc = 72
					continue
				}
				$obj.$stall--
				$pc = 72
			case 72:
				$return(1)
				continue
			case 73:
				$enter(0);	// ifExec
				if (!(($g[21]==NO_STALL)||($g[21]==CTRL_STALL))) {
					$pc = 74
					continue
				}
				fork(60, $g[82])
				$g[80].$setActive($g[82].$newValue)
				$pc = 74
			case 74:
				$pc = 75
				if (wait(8)) {
					return
				}
			case 75:
				if (!(($g[25]==BRANCH_PREDICTION)&&(btbIndex($g[82].$value)!=-1))) {
					$pc = 76
					continue
				}
				$g[22]=btbIndex($g[82].$value)
				$g[82].$setNewValue($g[85][$g[22]].$value)
				$g[184]=$g[93]
				$pc = 77
				continue
			case 76:
				$g[82].$setNewValue(($g[82].$value+4)&127)
				$g[184]=$g[95]
				$pc = 77
			case 77:
				$g[103].$setNewValue($g[82].$value)
				$g[102].$setNewInstruction($g[80].$instruction[$g[82].$value/4])
				$pc = 78
				if (wait(8)) {
					return
				}
			case 78:
				fork(62, $g[99], 64)
				fork(62, $g[91], 24)
				fork(62, $g[98], 24)
				if (!(($g[25]==BRANCH_PREDICTION)&&(instrIsBranchOrJump($g[102].$vIns)))) {
					$pc = 84
					continue
				}
				if (!($g[21]==CTRL_STALL)) {
					$pc = 80
					continue
				}
				$call(62, $g[97], 12)
				continue
			case 79:
				$pc = 82
				continue
			case 80:
				$call(62, $g[120], 12)
				continue
			case 81:
				$pc = 82
			case 82:
				$call(62, $g[100], 12)
				continue
			case 83:
				$pc = 86
				continue
			case 84:
				$pc = 85
				if (wait(24)) {
					return
				}
			case 85:
				$pc = 86
			case 86:
				fork(62, $g[89], 40)
				if (!(($g[25]==BRANCH_PREDICTION)&&(btbIndex($g[82].$value)!=-1))) {
					$pc = 87
					continue
				}
				$g[84][btbIndex($g[82].$value)].$highlight($g[20])
				$g[85][btbIndex($g[82].$value)].$highlight($g[20])
				$pc = 87
			case 87:
				$g[90].setTxt($g[102].$getNewInstrTxt())
				$pc = 88
				if ($g[90].setOpacity(1, 16, 1)) {
					return
				}
			case 88:
				$call(62, $g[184], 16)
				continue
			case 89:
				$call(62, $g[96], 8)
				continue
			case 90:
				$return(0)
				continue
			case 91:
				$enter(1);	// calcNewPC
				if (!(instrIsBranch($g[102].$vIns))) {
					$pc = 100
					continue
				}
				$stack[$fp+1]=$g[111]
				if (!($g[29]==ZERO_FORWARDING)) {
					$pc = 96
					continue
				}
				if (!(($g[141].$vRdt==$g[102].$vRs1)&&(instrOpTypeRdt($g[141].$vIns)==OP_TYPE_REG)&&instrIsLoadOrStore($g[141].$vIns)==0)) {
					$pc = 92
					continue
				}
				$g[113].setPen($stack[$fp+1])
				$g[187]=$g[164].$newValue
				$pc = 95
				continue
			case 92:
				if (!($g[164].$tagMatches($g[102].$vRs1))) {
					$pc = 93
					continue
				}
				$g[114].setPen($stack[$fp+1])
				$g[187]=$g[164].$value
				$pc = 94
				continue
			case 93:
				$g[184]=$g[92]
				$g[116].setPen($stack[$fp+1])
				$g[187]=$g[104][$g[102].$vRs1].$value
				$g[140].setTxt("R%d:%02X", $g[102].$vRs1, $g[187])
				$g[140].setOpacity(1)
				fork(62, $g[139], 24)
				$pc = 94
			case 94:
				$pc = 95
			case 95:
				$pc = 97
				continue
			case 96:
				$g[116].setPen($stack[$fp+1])
				$g[187]=$g[104][$g[102].$vRs1].$value
				$pc = 97
			case 97:
				$g[117].setPen($stack[$fp+1])
				if (!(($g[102].$vIns==BEQZ)==($g[187]==0))) {
					$pc = 98
					continue
				}
				$g[185]=$g[129]
				$g[188]=($g[103].$value+$g[102].$vRs2)&127
				$pc = 99
				continue
			case 98:
				$g[185]=$g[127]
				$g[188]=($g[103].$value+4)&127
				$pc = 99
			case 99:
				$g[189]=$g[92]
				$g[186]=$g[131]
				$pc = 104
				continue
			case 100:
				if (!(isJorJAL($g[102].$vIns))) {
					$pc = 101
					continue
				}
				$g[185]=$g[129]
				$g[186]=$g[131]
				$g[188]=($g[103].$value+$g[102].$vRs2)&127
				$g[189]=$g[92]
				$pc = 103
				continue
			case 101:
				if (!(instrIsJumpR($g[102].$vIns))) {
					$pc = 102
					continue
				}
				$g[188]=($g[104][$g[102].$vRs2].$value)&127
				$g[189]=$g[94]
				$g[186]=$g[134]
				$pc = 102
			case 102:
				$pc = 103
			case 103:
				$pc = 104
			case 104:
				$return(0)
				continue
			case 105:
				$enter(0);	// sendBTBOperands
				$call(62, $g[186], 18)
				continue
			case 106:
				$call(62, $g[133], 6)
				continue
			case 107:
				$return(0)
				continue
			case 108:
				$enter(1);	// idExec
				if (!($g[21]==NO_STALL)) {
					$pc = 109
					continue
				}
				fork(60, $g[103])
				fork(58, $g[102])
				$pc = 109
			case 109:
				if (!($g[23]&&($g[25]==BRANCH_PREDICTION))) {
					$pc = 110
					continue
				}
				fork(60, $g[84][$g[22]])
				fork(60, $g[85][$g[22]])
				$pc = 110
			case 110:
				$pc = 111
				if (wait(16)) {
					return
				}
			case 111:
				fork(62, $g[101], 64)
				if (!(instrIsBranch($g[102].$vIns))) {
					$pc = 114
					continue
				}
				fork(62, $g[122], 16)
				fork(62, $g[124], 16)
				fork(62, $g[123], 16)
				fork(62, $g[125], 16)
				$pc = 112
				if (wait(12)) {
					return
				}
			case 112:
				$g[126].setTxt("%02X", $g[102].$vRs2)
				$g[126].setOpacity(1)
				$pc = 113
				if (wait(4)) {
					return
				}
			case 113:
				fork(62, $g[127], 8)
				fork(62, $g[129], 8)
				$g[128].setTxt("%02X", ($g[103].$value+4)&255)
				$g[128].setOpacity(1, 8, 0)
				$g[130].setTxt("%02X", ($g[103].$value+$g[102].$vRs2)&255)
				$g[130].setOpacity(1, 8, 0)
				$pc = 127
				continue
			case 114:
				if (!(isJorJAL($g[102].$vIns))) {
					$pc = 121
					continue
				}
				if (!($g[102].$vIns==JAL)) {
					$pc = 115
					continue
				}
				fork(62, $g[122], 16)
				fork(62, $g[124], 16)
				$pc = 115
			case 115:
				if (!($g[21]==NO_STALL)) {
					$pc = 118
					continue
				}
				fork(62, $g[123], 16)
				fork(62, $g[125], 16)
				$pc = 116
				if (wait(12)) {
					return
				}
			case 116:
				$g[126].setTxt("%02X", $g[102].$vRs2)
				$g[126].setOpacity(1)
				$pc = 117
				if (wait(4)) {
					return
				}
			case 117:
				fork(62, $g[129], 8)
				$g[130].setTxt("%02X", ($g[103].$value+$g[102].$vRs2)&255)
				$g[130].setOpacity(1, 8, 0)
				$pc = 120
				continue
			case 118:
				$pc = 119
				if (wait(24)) {
					return
				}
			case 119:
				$pc = 120
			case 120:
				$pc = 126
				continue
			case 121:
				if (!($g[102].$vIns==JALR)) {
					$pc = 123
					continue
				}
				fork(62, $g[122], 32)
				fork(62, $g[124], 32)
				$pc = 122
				if (wait(24)) {
					return
				}
			case 122:
				$pc = 125
				continue
			case 123:
				$pc = 124
				if (wait(24)) {
					return
				}
			case 124:
				$pc = 125
			case 125:
				$pc = 126
			case 126:
				$pc = 127
			case 127:
				$pc = 128
				if (wait(9)) {
					return
				}
			case 128:
				if (!(instrIsBranchOrJump($g[102].$vIns))) {
					$pc = 130
					continue
				}
				$call(91, $obj)
				continue
			case 129:
				$pc = 130
			case 130:
				if (!(instrIsBranch($g[102].$vIns))) {
					$pc = 131
					continue
				}
				$g[132].setTxt("%02X", $g[188])
				$g[132].setOpacity(1, 8, 0)
				$pc = 131
			case 131:
				if (!(instrIsJumpR($g[102].$vIns)&&($g[21]==NO_STALL))) {
					$pc = 132
					continue
				}
				$g[135].setTxt("%02X", $g[188])
				$g[135].setOpacity(1, 8, 0)
				$pc = 132
			case 132:
				if (!(instrIsBranchOrJump($g[102].$vIns))) {
					$pc = 133
					continue
				}
				fork(105, $obj)
				$pc = 133
			case 133:
				detectStall()
				if (!(instrIsBranchOrJump($g[102].$vIns)&&($g[21]!=DATA_STALL))) {
					$pc = 134
					continue
				}
				updBTB()
				$pc = 134
			case 134:
				if (!($g[21]==NO_STALL)) {
					$pc = 135
					continue
				}
				$g[141].$setNewValue($g[102].$vIns, $g[102].$vRdt, $g[102].$vRs1, $g[102].$vRs2)
				$pc = 136
				continue
			case 135:
				$g[141].$setNewValue(STALL, 0, 0, 0)
				$pc = 136
			case 136:
				$pc = 137
				if (wait(7)) {
					return
				}
			case 137:
				if (!(instrOpTypeRdt($g[102].$vIns)==OP_TYPE_REG)) {
					$pc = 147
					continue
				}
				if (!(instrIsJumpAndLink($g[102].$vIns))) {
					$pc = 140
					continue
				}
				$g[142].$setNewValue(0)
				$g[143].$setNewValue(($g[103].$value+4)&127)
				$call(62, $g[121], 18)
				continue
			case 138:
				$call(62, $g[136], 6)
				continue
			case 139:
				$pc = 146
				continue
			case 140:
				$g[104][$g[102].$vRs1].$highlight($g[20])
				$g[142].$setNewValue($g[104][$g[102].$vRs1].$value)
				if (!(instrOpTypeRs2($g[102].$vIns)==OP_TYPE_REG)) {
					$pc = 141
					continue
				}
				$g[104][$g[102].$vRs2].$highlight($g[20])
				$g[143].$setNewValue($g[104][$g[102].$vRs2].$value)
				$pc = 142
				continue
			case 141:
				$g[104][$g[102].$vRdt].$highlight($g[20])
				$g[143].$setNewValue($g[104][$g[102].$vRdt].$value)
				$pc = 142
			case 142:
				$g[140].setTxt("R%d:%02X", $g[102].$vRs1, $g[104][$g[102].$vRs1].$value)
				$g[140].setOpacity(1)
				fork(62, $g[139], 24)
				if (!((((!instrIsArRI($g[102].$vIns))|0))&&($g[102].$vIns!=LD))) {
					$pc = 145
					continue
				}
				$stack[$fp+1]=($g[102].$vIns==ST) ? $g[102].$vRdt : $g[102].$vRs2
				$g[138].setTxt("R%d:%02X", $stack[$fp+1], $g[104][$stack[$fp+1]].$value)
				$g[138].setOpacity(1)
				$call(62, $g[137], 18)
				continue
			case 143:
				$call(62, $g[136], 6)
				continue
			case 144:
				$pc = 145
			case 145:
				$pc = 146
			case 146:
				$pc = 147
			case 147:
				$return(0)
				continue
			case 148:
				$enter(6);	// exExec
				fork(58, $g[141])
				if (!(((!instrIsNop($g[141].$nIns))|0))) {
					$pc = 149
					continue
				}
				fork(60, $g[142])
				fork(60, $g[143])
				$pc = 149
			case 149:
				$pc = 150
				if (wait(8)) {
					return
				}
			case 150:
				$g[163].$setNewValue($g[141].$vIns, $g[141].$vRdt, $g[141].$vRs1, $g[141].$vRs2)
				if (!(instrOpTypeRdt($g[141].$vIns)==OP_TYPE_REG)) {
					$pc = 172
					continue
				}
				if (!(instrIsJumpAndLink($g[141].$vIns))) {
					$pc = 151
					continue
				}
				$stack[$fp+1]=0
				$stack[$fp+4]=0
				$pc = 158
				continue
			case 151:
				if (!($g[27]==ALU_FORWARDING)) {
					$pc = 156
					continue
				}
				if (!($g[164].$tagMatches($g[141].$vRs1))) {
					$pc = 152
					continue
				}
				$stack[$fp+1]=$g[149]
				$stack[$fp+4]=$g[164].$value
				$pc = 155
				continue
			case 152:
				if (!($g[175].$tagMatches($g[141].$vRs1))) {
					$pc = 153
					continue
				}
				$stack[$fp+1]=$g[150]
				$stack[$fp+4]=$g[175].$value
				$pc = 154
				continue
			case 153:
				$stack[$fp+1]=$g[151]
				$stack[$fp+4]=$g[142].$value
				$pc = 154
			case 154:
				$pc = 155
			case 155:
				$pc = 157
				continue
			case 156:
				$stack[$fp+1]=$g[151]
				$stack[$fp+4]=$g[142].$value
				$pc = 157
			case 157:
				$pc = 158
			case 158:
				if (!(instrIsJumpAndLink($g[141].$vIns))) {
					$pc = 159
					continue
				}
				$stack[$fp+2]=$g[152]
				$stack[$fp+5]=$g[143].$value
				$pc = 168
				continue
			case 159:
				if (!(instrOpTypeRs2($g[141].$vIns)==OP_TYPE_IMM)) {
					$pc = 160
					continue
				}
				$stack[$fp+2]=$g[153]
				$stack[$fp+5]=$g[141].$vRs2
				$pc = 167
				continue
			case 160:
				if (!($g[27]==ALU_FORWARDING)) {
					$pc = 165
					continue
				}
				if (!($g[164].$tagMatches($g[141].$vRs2))) {
					$pc = 161
					continue
				}
				$stack[$fp+2]=$g[156]
				$stack[$fp+5]=$g[164].$value
				$pc = 164
				continue
			case 161:
				if (!($g[175].$tagMatches($g[141].$vRs2))) {
					$pc = 162
					continue
				}
				$stack[$fp+2]=$g[155]
				$stack[$fp+5]=$g[175].$value
				$pc = 163
				continue
			case 162:
				$stack[$fp+2]=$g[152]
				$stack[$fp+5]=$g[143].$value
				$pc = 163
			case 163:
				$pc = 164
			case 164:
				$pc = 166
				continue
			case 165:
				$stack[$fp+2]=$g[152]
				$stack[$fp+5]=$g[143].$value
				$pc = 166
			case 166:
				$pc = 167
			case 167:
				$pc = 168
			case 168:
				$stack[$fp+6]=instrExecute($g[141].$vIns, $stack[$fp+4], $stack[$fp+5])
				if (!($g[141].$vRdt==0)) {
					$pc = 169
					continue
				}
				$stack[$fp+6]=0
				$pc = 169
			case 169:
				$g[164].$setNewValue($stack[$fp+6])
				if (!(instrIsLoadOrStore($g[141].$vIns))) {
					$pc = 170
					continue
				}
				$g[164].$setNewTag(-1)
				$pc = 171
				continue
			case 170:
				$g[164].$setNewTag($g[141].$vRdt)
				$pc = 171
			case 171:
				$g[164].$setInvalid(0)
				$pc = 174
				continue
			case 172:
				if (!($g[141].$vIns==NOP)) {
					$pc = 173
					continue
				}
				$g[164].$setInvalid(1)
				$g[164].$updateLabel()
				$pc = 173
			case 173:
				$pc = 174
			case 174:
				if (!($g[141].$vIns==ST)) {
					$pc = 181
					continue
				}
				if (!($g[28]==FORWARDING_TO_SMDR)) {
					$pc = 179
					continue
				}
				if (!($g[164].$tagMatches($g[141].$vRdt))) {
					$pc = 175
					continue
				}
				$stack[$fp+3]=$g[157]
				$g[165].$setNewValue($g[164].$value)
				$pc = 178
				continue
			case 175:
				if (!($g[175].$tagMatches($g[141].$vRdt))) {
					$pc = 176
					continue
				}
				$stack[$fp+3]=$g[158]
				$g[165].$setNewValue($g[175].$value)
				$pc = 177
				continue
			case 176:
				$stack[$fp+3]=$g[159]
				$g[165].$setNewValue($g[143].$value)
				$pc = 177
			case 177:
				$pc = 178
			case 178:
				$pc = 180
				continue
			case 179:
				$stack[$fp+3]=$g[159]
				$g[165].$setNewValue($g[143].$value)
				$pc = 180
			case 180:
				$pc = 181
			case 181:
				$pc = 182
				if (wait(8)) {
					return
				}
			case 182:
				fork(62, $g[148], 64)
				if (!($g[141].$vIns==ST)) {
					$pc = 183
					continue
				}
				fork(62, $stack[$fp+3], 24)
				$pc = 183
			case 183:
				if (!(instrOpTypeRdt($g[141].$vIns)==OP_TYPE_REG)) {
					$pc = 186
					continue
				}
				if (!($stack[$fp+1]!=0)) {
					$pc = 184
					continue
				}
				fork(62, $stack[$fp+1], 24)
				$pc = 184
			case 184:
				if (!($stack[$fp+2]==$g[153])) {
					$pc = 185
					continue
				}
				$g[154].setTxt("%02X", $stack[$fp+5])
				$g[154].setOpacity(1)
				$pc = 185
			case 185:
				fork(62, $stack[$fp+2], 24)
				$pc = 186
			case 186:
				$pc = 187
				if (wait(24)) {
					return
				}
			case 187:
				if (!($g[141].$vIns==ST)) {
					$pc = 188
					continue
				}
				fork(62, $g[160], 40)
				$pc = 188
			case 188:
				if (!(instrOpTypeRdt($g[141].$vIns)==OP_TYPE_REG)) {
					$pc = 191
					continue
				}
				$g[147].$setTxtOp($g[141].$vIns)
				if (!($stack[$fp+1]!=0)) {
					$pc = 189
					continue
				}
				fork(62, $g[161], 40)
				$pc = 189
			case 189:
				fork(62, $g[162], 40)
				$pc = 190
				if (wait(20)) {
					return
				}
			case 190:
				$g[147].$txtResult.setTxt("%02X", $stack[$fp+6])
				$g[147].$txtResult.setOpacity(1, 20, 0)
				$pc = 191
			case 191:
				$return(0)
				continue
			case 192:
				$enter(0);	// maExec
				fork(58, $g[163])
				if (!(instrOpTypeRdt($g[163].$nIns)==OP_TYPE_REG)) {
					$pc = 193
					continue
				}
				fork(60, $g[164])
				$pc = 193
			case 193:
				if (!($g[163].$nIns==ST)) {
					$pc = 194
					continue
				}
				fork(60, $g[165])
				$pc = 194
			case 194:
				$pc = 195
				if (wait(8)) {
					return
				}
			case 195:
				$g[174].$setNewValue($g[163].$vIns, $g[163].$vRdt, $g[163].$vRs1, $g[163].$vRs2)
				if (!((instrOpTypeRdt($g[163].$vIns)==OP_TYPE_REG)&&($g[163].$vIns!=ST))) {
					$pc = 198
					continue
				}
				if (!($g[163].$vIns==LD)) {
					$pc = 196
					continue
				}
				$g[175].$setNewValue($g[166][$g[164].$value%4].$value)
				$g[175].$setNewTag($g[163].$vRdt)
				$pc = 197
				continue
			case 196:
				$g[175].$setNewValue($g[164].$value)
				$g[175].$setNewTag($g[164].$tag)
				$pc = 197
			case 197:
				$g[175].$setInvalid(0)
				$pc = 198
			case 198:
				$pc = 199
				if (wait(8)) {
					return
				}
			case 199:
				fork(62, $g[168], 64)
				if (!($g[163].$vIns==ST)) {
					$pc = 202
					continue
				}
				$g[166][$g[164].$value%4].$setNewValue($g[165].$value)
				fork(62, $g[172], 24)
				$call(62, $g[171], 24)
				continue
			case 200:
				$call(60, $g[166][$g[164].$value%4])
				continue
			case 201:
				$pc = 210
				continue
			case 202:
				if (!(instrOpTypeRdt($g[163].$vIns)==OP_TYPE_REG)) {
					$pc = 209
					continue
				}
				if (!($g[163].$vIns==LD)) {
					$pc = 205
					continue
				}
				$call(62, $g[171], 24)
				continue
			case 203:
				$g[166][$g[164].$value%4].$highlight($g[20])
				$call(62, $g[173], 24)
				continue
			case 204:
				$pc = 207
				continue
			case 205:
				$call(62, $g[169], 48)
				continue
			case 206:
				$pc = 207
			case 207:
				$call(62, $g[170], 16)
				continue
			case 208:
				$pc = 209
			case 209:
				$pc = 210
			case 210:
				$return(0)
				continue
			case 211:
				$enter(0);	// wbExec
				fork(58, $g[174])
				if (!((instrOpTypeRdt($g[174].$nIns)==OP_TYPE_REG)&&($g[174].$nIns!=ST))) {
					$pc = 212
					continue
				}
				fork(60, $g[175])
				$pc = 212
			case 212:
				$pc = 213
				if (wait(8)) {
					return
				}
			case 213:
				if (!((instrOpTypeRdt($g[174].$vIns)==OP_TYPE_REG)&&($g[174].$vIns!=ST))) {
					$pc = 218
					continue
				}
				$g[104][$g[175].$tag].$setNewValue($g[175].$value)
				$pc = 214
				if (wait(8)) {
					return
				}
			case 214:
				$call(62, $g[176], 24)
				continue
			case 215:
				$call(60, $g[104][$g[175].$tag])
				continue
			case 216:
				$pc = 217
				if (wait(19)) {
					return
				}
			case 217:
				$pc = 220
				continue
			case 218:
				$pc = 219
				if (wait(67)) {
					return
				}
			case 219:
				$pc = 220
			case 220:
				if (!($g[174].$vIns!=STALL&&$g[174].$vIns!=EMPTY)) {
					$pc = 221
					continue
				}
				$g[31]++
				$g[77].setTxt("%4d", $g[31])
				$pc = 221
			case 221:
				$g[32]++
				$g[78].setTxt("%4d", $g[32])
				$return(0)
				continue
			case 222:
				$enter(0);	// nonPipelinedBranch
				fork(62, $g[124], 24)
				fork(62, $g[125], 24)
				$call(62, $g[99], 12)
				continue
			case 223:
				fork(62, $g[122], 12)
				fork(62, $g[123], 12)
				$pc = 224
				if (wait(12)) {
					return
				}
			case 224:
				if (!(instrIsJumpR($g[102].$vIns))) {
					$pc = 226
					continue
				}
				$g[82].$setNewValue(($g[104][$g[102].$vRs2].$value)&127)
				$call(62, $g[94], 34)
				continue
			case 225:
				$pc = 240
				continue
			case 226:
				if (!(instrIsBranch($g[102].$vIns))) {
					$pc = 232
					continue
				}
				if (!(($g[104][$g[102].$vRs1].$value==0)==($g[102].$vIns==BEQZ))) {
					$pc = 228
					continue
				}
				$call(62, $g[129], 20)
				continue
			case 227:
				$g[82].$setNewValue(($g[82].$value+$g[102].$vRs2)&127)
				$pc = 230
				continue
			case 228:
				$call(62, $g[127], 20)
				continue
			case 229:
				$g[82].$setNewValue(($g[82].$value+4)&127)
				$pc = 230
			case 230:
				$call(62, $g[92], 14)
				continue
			case 231:
				$pc = 239
				continue
			case 232:
				if (!(isJorJAL($g[102].$vIns))) {
					$pc = 235
					continue
				}
				$g[82].$setNewValue(($g[82].$value+$g[102].$vRs2)&127)
				$call(62, $g[129], 20)
				continue
			case 233:
				$call(62, $g[92], 14)
				continue
			case 234:
				$pc = 238
				continue
			case 235:
				$g[82].$setNewValue(($g[82].$value+4)&127)
				$call(62, $g[127], 20)
				continue
			case 236:
				$call(62, $g[92], 14)
				continue
			case 237:
				$pc = 238
			case 238:
				$pc = 239
			case 239:
				$pc = 240
			case 240:
				$call(62, $g[96], 6)
				continue
			case 241:
				$return(0)
				continue
			case 242:
				$enter(5);	// execNonPipelined
				$call(60, $g[82])
				continue
			case 243:
				$g[80].$setActive($g[82].$newValue)
				$call(62, $g[91], 24)
				continue
			case 244:
				$call(62, $g[89], 40)
				continue
			case 245:
				$g[102].$setNewInstruction($g[80].$instruction[$g[82].$value/4])
				$g[90].setTxt($g[102].$getNewInstrTxt())
				$g[90].translate(60/2+70, 0, 20, 0)
				$call(58, $g[102])
				continue
			case 246:
				if (!((instrOpTypeRs2($g[102].$vIns)==OP_TYPE_IMM)&&(instrOpTypeRdt($g[102].$vIns)==OP_TYPE_REG))) {
					$pc = 247
					continue
				}
				fork(62, $g[101], 64)
				$pc = 247
			case 247:
				fork(222, $obj)
				$pc = 248
				if (wait(24)) {
					return
				}
			case 248:
				if (!(instrIsJumpAndLink($g[102].$vIns))) {
					$pc = 251
					continue
				}
				$call(62, $g[121], 20)
				continue
			case 249:
				$call(62, $g[136], 20)
				continue
			case 250:
				$stack[$fp+1]=0
				$stack[$fp+2]=($g[82].$value+4)&127
				$pc = 263
				continue
			case 251:
				if (!(instrOpTypeRdt($g[102].$vIns)==OP_TYPE_REG)) {
					$pc = 260
					continue
				}
				$stack[$fp+1]=$g[104][$g[102].$vRs1].$value
				$g[104][$g[102].$vRs1].$highlight($g[20])
				$g[140].setTxt("R%d:%02X", $g[102].$vRs1, $g[104][$g[102].$vRs1].$value)
				$g[140].setOpacity(1)
				fork(62, $g[139], 40)
				if (!((instrOpTypeRs2($g[102].$vIns)==OP_TYPE_REG)||($g[102].$vIns==ST))) {
					$pc = 257
					continue
				}
				if (!(instrOpTypeRs2($g[102].$vIns)==OP_TYPE_IMM)) {
					$pc = 252
					continue
				}
				$stack[$fp+2]=$g[104][$g[102].$vRdt].$value
				$g[104][$g[102].$vRdt].$highlight($g[20])
				$pc = 253
				continue
			case 252:
				$stack[$fp+2]=$g[104][$g[102].$vRs2].$value
				$g[104][$g[102].$vRs2].$highlight($g[20])
				$pc = 253
			case 253:
				if (!((((!instrIsArRI($g[102].$vIns))|0))&&($g[102].$vIns!=LD))) {
					$pc = 256
					continue
				}
				$stack[$fp+5]=($g[102].$vIns==ST) ? $g[102].$vRdt : $g[102].$vRs2
				$g[138].setTxt("R%d:%02X", $stack[$fp+5], $g[104][$stack[$fp+5]].$value)
				$g[138].setOpacity(1)
				$call(62, $g[137], 20)
				continue
			case 254:
				$call(62, $g[136], 20)
				continue
			case 255:
				$pc = 256
			case 256:
				$pc = 259
				continue
			case 257:
				$pc = 258
				if (wait(40)) {
					return
				}
			case 258:
				$pc = 259
			case 259:
				$pc = 262
				continue
			case 260:
				$pc = 261
				if (wait(40)) {
					return
				}
			case 261:
				$pc = 262
			case 262:
				$pc = 263
			case 263:
				if (!(instrOpTypeRdt($g[102].$vIns)==OP_TYPE_REG)) {
					$pc = 264
					continue
				}
				$g[147].$setTxtOp($g[102].$vIns)
				$pc = 264
			case 264:
				if (!($g[102].$vIns==ST)) {
					$pc = 267
					continue
				}
				fork(62, $g[159], 40)
				fork(62, $g[151], 40)
				$g[154].setTxt("%02X", $g[102].$vRs2)
				$g[154].setOpacity(1)
				$call(62, $g[153], 40)
				continue
			case 265:
				fork(62, $g[160], 40)
				fork(62, $g[162], 40)
				$call(62, $g[161], 40)
				continue
			case 266:
				$stack[$fp+4]=$stack[$fp+2]
				$stack[$fp+3]=instrExecute($g[102].$vIns, $stack[$fp+1], $g[102].$vRs2)
				$pc = 280
				continue
			case 267:
				if (!(instrIsJumpAndLink($g[102].$vIns))) {
					$pc = 270
					continue
				}
				$call(62, $g[152], 40)
				continue
			case 268:
				$call(62, $g[162], 40)
				continue
			case 269:
				$stack[$fp+3]=instrExecute($g[102].$vIns, $stack[$fp+1], $stack[$fp+2])
				$pc = 279
				continue
			case 270:
				if (!(instrOpTypeRdt($g[102].$vIns)==OP_TYPE_REG)) {
					$pc = 276
					continue
				}
				fork(62, $g[151], 40)
				if (!(instrOpTypeRs2($g[102].$vIns)==OP_TYPE_IMM)) {
					$pc = 272
					continue
				}
				$g[154].setTxt("%02X", $g[102].$vRs2)
				$g[154].setOpacity(1)
				$call(62, $g[153], 40)
				continue
			case 271:
				$stack[$fp+3]=instrExecute($g[102].$vIns, $stack[$fp+1], $g[102].$vRs2)
				$pc = 274
				continue
			case 272:
				$call(62, $g[152], 40)
				continue
			case 273:
				$stack[$fp+3]=instrExecute($g[102].$vIns, $stack[$fp+1], $stack[$fp+2])
				$pc = 274
			case 274:
				fork(62, $g[162], 40)
				$call(62, $g[161], 40)
				continue
			case 275:
				$pc = 278
				continue
			case 276:
				$pc = 277
				if (wait(80)) {
					return
				}
			case 277:
				$pc = 278
			case 278:
				$pc = 279
			case 279:
				$pc = 280
			case 280:
				if (!($g[102].$vIns==LD)) {
					$pc = 284
					continue
				}
				$call(62, $g[171], 20)
				continue
			case 281:
				$g[166][($stack[$fp+3])%4].$highlight($g[20])
				$call(62, $g[173], 20)
				continue
			case 282:
				$call(62, $g[170], 40)
				continue
			case 283:
				$stack[$fp+3]=$g[166][($stack[$fp+3])%4].$value
				$pc = 294
				continue
			case 284:
				if (!($g[102].$vIns==ST)) {
					$pc = 287
					continue
				}
				fork(62, $g[172], 20)
				$call(62, $g[171], 20)
				continue
			case 285:
				$g[166][($stack[$fp+3])%4].$setNewValue($stack[$fp+4])
				$call(60, $g[166][($stack[$fp+3])%4])
				continue
			case 286:
				$pc = 293
				continue
			case 287:
				if (!(instrOpTypeRdt($g[102].$vIns)==OP_TYPE_REG)) {
					$pc = 290
					continue
				}
				$call(62, $g[169], 40)
				continue
			case 288:
				$call(62, $g[170], 40)
				continue
			case 289:
				$pc = 292
				continue
			case 290:
				$pc = 291
				if (wait(80)) {
					return
				}
			case 291:
				$pc = 292
			case 292:
				$pc = 293
			case 293:
				$pc = 294
			case 294:
				$g[104][0].$unHighlight()
				$g[104][1].$unHighlight()
				$g[104][2].$unHighlight()
				$g[104][3].$unHighlight()
				if (!((instrOpTypeRdt($g[102].$vIns)==OP_TYPE_REG)&&($g[102].$vIns!=ST))) {
					$pc = 298
					continue
				}
				$call(62, $g[176], 40)
				continue
			case 295:
				$g[104][$g[102].$vRdt].$setNewValue($stack[$fp+3])
				$call(60, $g[104][$g[102].$vRdt])
				continue
			case 296:
				$pc = 297
				if (wait(19)) {
					return
				}
			case 297:
				$pc = 300
				continue
			case 298:
				$pc = 299
				if (wait(75)) {
					return
				}
			case 299:
				$pc = 300
			case 300:
				$g[32]+=5
				$g[31]++
				$g[77].setTxt("%4d", $g[31])
				$g[78].setTxt("%4d", $g[32])
				$return(0)
				continue
			case 301:
				$enter(0);	// exec
				$g[104][0].$unHighlight()
				$g[104][1].$unHighlight()
				$g[104][2].$unHighlight()
				$g[104][3].$unHighlight()
				$g[166][0].$unHighlight()
				$g[166][1].$unHighlight()
				$g[166][2].$unHighlight()
				$g[166][3].$unHighlight()
				$g[84][0].$unHighlight()
				$g[84][1].$unHighlight()
				$g[85][0].$unHighlight()
				$g[85][1].$unHighlight()
				if (!($g[24]==PIPELINING_ENABLED)) {
					$pc = 302
					continue
				}
				fork(73, $obj)
				fork(108, $obj)
				fork(148, $obj)
				fork(192, $obj)
				fork(211, $obj)
				$pc = 303
				continue
			case 302:
				fork(242, $obj)
				$pc = 303
			case 303:
				$pc = 304
				if (wait(8)) {
					return
				}
			case 304:
				resetWires()
				$pc = 305
				if (wait(($g[24]==PIPELINING_ENABLED) ? 72 : 392)) {
					return
				}
			case 305:
				checkPoint()
				$return(0)
				continue
			case 306:
				$enter(0);	// run
				$pc = 307
				if (wait(1)) {
					return
				}
			case 307:
				$g[30]=1
				lockButtons()
				$pc = 308
			case 308:
				if (!(1)) {
					$pc = 313
					continue
				}
				fork(68, $g[81], ($g[24]==PIPELINING_ENABLED) ? 80 : 400)
				$call(301, $obj)
				continue
			case 309:
				if (!((($g[174].$vIns==HALT)&&($g[24]==PIPELINING_ENABLED))||(($g[102].$vIns==HALT)&&($g[24]==PIPELINING_DISABLED)))) {
					$pc = 311
					continue
				}
				stop()
				if (!($g[180])) {
					$pc = 310
					continue
				}
				$pc = 313
				continue
			case 310:
				$pc = 311
			case 311:
				$pc = 312
				if (wait(1)) {
					return
				}
			case 312:
				$pc = 308
				continue
			case 313:
				$return(0)
				continue
			case 314:
				$enter(0);	// $eh28
				if (!($stack[$fp-3]&&($stack[$fp-4]&MB_LEFT))) {
					$pc = 315
					continue
				}
				$g[12]=($g[12]==maxexample) ? 0 : $g[12]+1
				setArg("example", $g[12].toString())
				reset()
				return
			case 315:
				$acc = 0
				$return(4)
				continue
			}
		}
	}

	this.$getCurrentThread = $getCurrentThread
	this.$execute = $execute
	this.$resumeThread = $resumeThread
	this.$suspendThread = $suspendThread
	this.$switchToThread = $switchToThread
	this.$testFlag = $testFlag

}

// eof
