//
// buttonhandlers.vin
//
// Simulation of a DLX/MIPS CPU
// Edsko de Vries Summer Internship 2003
//
// Copyright (C) 2003 - 2022 Edsko de Vries and jones@scss.tcd.ie
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software Foundation;
// either version 2 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//

//
// lockButtons
//
// lock buttons while animation is runnung
//
function lockButtons() {					// {joj 09/06/21}
	buttonPE.showLocked(locked);
	buttonBP.showLocked(locked);
	buttonLI.showLocked(locked);
	buttonAF.showLocked(locked);
	buttonSF.showLocked(locked);
	buttonZF.showLocked(locked);
}

//
// run animation
//
// run until HALT instruction executed
//
function run() {
	wait(1);                                                                // {joj 25/10/06)
	locked = 1;                                                             // {joj 25/10/06)
	lockButtons();                                                            // {joj 25/10/06)
	while(1) {
		//debug("clock cycle");
		fork(animClock.clockCycle((peMode == PIPELINING_ENABLED)  ? 80 : 400));
		exec();
		if (((regWB.vIns == HALT) && (peMode == PIPELINING_ENABLED)) ||     // {joj 30/20/06}
			((regID.vIns == HALT) && (peMode == PIPELINING_DISABLED))) {
			stop();                                                         // {joj 30/20/06}
			if (haltOnHalt)													// {joj 29/07/08
				break;                                                      // {joj 29/07/08}
		}                                                                   // {joj 30/20/06}
		wait(1);                                                           	// {joj 30/10/06}
	}
}

//when animClock.clkDisplay.eventLB(int down, real x, real y) {
//  if (down) {
//      if (!locked) {
//          locked = 1;
//          lockButtons();    // joj
//          if (peMode == PIPELINING_ENABLED)
//              fork(animClock.clockCycle(80));
//          else
//              fork(animClock.clockCycle(400));
//          exec();
//          locked = 0;
//          lockButtons();    // joj
//      }
//  }
//}

//
// {joj 21/10/06}
//
//when startStopEvent(int startStop)
//  if (startStop)
//      fork(run());
//  end;
//end;

//when animClock.clkDisplay.eventRB(int flags, real x, real y)
//  if (flags & EB_RIGHT)
//      if (!running)
//          if (!locked)
//              running = 1;
//              locked = 1;
//              lockButtons();    // joj
//              fork(run());
//              start();
//          end;
//      else
//          running = 0;
//      end;
//  end;
//end;

//
// pipeline enable
//
when buttonPE.label ~> eventMB(num down, num flags, num x, num y) {		// {joj 24/09/17}
	if (down && (flags & MB_LEFT) && !locked) {							// {joj 09/06/21}
		setPEMode((peMode + 1)% 2);
		//et.setTxt(peMode == 0 ? "ticks:" : "elapsed time:");          // {joj 4/10/16}
		resetCircuit();
	}
	return 0;
}

//
// branch prediction
//
when buttonBP.label ~> eventMB(num down, num flags, num x, num y) {		// {joj 24/09/17}
	if (down && (flags & MB_LEFT) && !locked) {							// {joj 09/06/21}
		setBPMode((bpMode + 1) % 3);
		resetCircuit();
	}
	return 0;
}

//
// load interlocked
//
when buttonLI.label ~> eventMB(num down, num flags, num x, num y) {		// {joj 24/09/17}
	if (down && (flags & MB_LEFT) && !locked) {							// {joj 09/06/21}
		setLIMode((liMode + 1) % 2);
		resetCircuit();
	}
	return 0;
}

//
// ALU forwarding
//
when buttonAF.label ~> eventMB(num down, num flags, num x, num y) {		// {joj 24/09/17}
	if (down && (flags & MB_LEFT) && !locked) {							// {joj 09/06/21}
		setAFMode((afMode + 1) % 3);
		resetCircuit();
	}
	return 0;
}

//
// store forwarding
//
when buttonSF.label ~> eventMB(num down, num flags, num, num) {			// {joj 24/09/17}
	if (down && (flags & MB_LEFT) && !locked) {							// {joj 09/06/21}
		setSFMode((sfMode + 1) % 3);
		resetCircuit();
	}
	return 0;
}

//
// zero forwarding
//
when buttonZF.label ~> eventMB(num down, num flags, num, num) {			// {joj 04/10/16}
	if (down && (flags & MB_LEFT) && !locked) {							// {joj 09/06/21}
		setZFMode((zfMode + 1) % 3);
		resetCircuit();
	}
	return 0;
}

//
// save or load configuration
//
// NB: config data is numeric AND contain no ampersands or quotes
//	   config=i0=0x123 i1=3456 ...
//
when buttonSC.label ~> eventMB(num down, num flags, num x, num y) {		// {joj 31/05/21}
	if (down && (flags & MB_LEFT)) {
		
		//debug("save configuration");

		num lp1, opcode, reg;
		Instruction instr;

        string s = "dlx.php?config=";								// {joj 16/06/21}

        for (lp1 = 0; lp1 < 32; lp1++) {
            instr = im.instruction[lp1];
            opcode = (instr.vIns << 24) | (instr.vRdt << 16) | (instr.vRs1 << 8) | (instr.vRs2);
            s = sprintf("%si%d=0x%08X ", s, lp1, opcode);	// {joj 31/05/21}
        }

        for (lp1 = 0; lp1 < 4; lp1++) {
            reg = regFile[lp1].value;
            s = sprintf("%sr%d=0x%02X ", s, lp1, reg); 		// {joj 31/05/21}
        }

        for (lp1 = 0; lp1 < 4; lp1++) {
            reg = memory[lp1].value;
            s = sprintf("%sm%d=0x%02X ", s, lp1, reg); 		// {joj 31/05/21}
        }

        s = sprintf("%speMode=%d bpMode=%d liMode=%d afMode=%d sfMode=%d zfMode=%d", s, peMode, bpMode, liMode, afMode, sfMode, zfMode); // {joj 31/10/10}
		debug("%s", s);
		getURL(s);

	}
	return 0;
}

//
// load configuration(web ONLY)
//
when buttonLC.label ~> eventMB(num down, num flags, num x, num y) {		// {joj 31/05/21}
	if (down && (flags & MB_LEFT)) {
		getURL("dlx.php");
	}
	return 0;
}

//
// Vivio logo (web ONLY)
//
when vivioLogo.label ~> eventMB(num down, num flags, num x, num y) {	// {joj 09/06/21}
     if (down && (flags & MB_LEFT))
         getURL("../vivio.htm");
     return 0;
}

//
// load tutorial from database (web ONLY)
//
when title ~> eventEE(num enter, num x, num y) {						// {joj 11/06/21}
	title.setTxtPen(enter ? redPen : whitePen);
	return 0;
}

when title ~> eventMB(num down, num flags, num, num) {              	// {joj 08/06/21}
    if (down && (flags & MB_LEFT))
        getURL("selectTutorial.php");
}

//
// change initial builtin program and reset
//
when imLabel ~> eventEE(num enter, num x, num y) {						// {joj 24/09/17}
	//imLabel.setBrush(enter? gray192Brush : whiteBrush);				// {joj 11/06/21}
	imLabel.setTxtPen(enter ? redPen : blackPen);
	return 0;
}

when imLabel ~> eventMB(num down, num flags, num x, num y) {			// {joj 24/09/17}
	if (down && (flags & MB_LEFT)) {
		example = (example == maxexample) ? 0 : example + 1;
		setArg("example", example.toString());							// {joj 06/11/16}
		reset();
	}
	return 0;
}

run();																	// {joj 25/10/06}

debug("FINISHED tick=%d", getTick());									// {joj 12/09/20}

// eof