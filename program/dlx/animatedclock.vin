//
// animatedclock.vin
//
// Simulation of a DLX/MIPS CPU
// Edsko de Vries Summer Internship 2003
//
// Copyright (C) 2003 - 2022 Edsko de Vries and jones@scss.tcd.ie
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software Foundation;
// either version 2 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//

Pen redClockPen = SolidPen(SOLID, 1, RED, ROUND_START | ROUND_JOIN | ROUND_END);
Pen greenClockPen = SolidPen(SOLID, 1, GREEN, ROUND_START | ROUND_JOIN | ROUND_END);
Pen orangeClockPen = SolidPen(SOLID, 1, ORANGE, ROUND_START | ROUND_JOIN | ROUND_END);

//
// AnimatedClock
//
class AnimatedClock(num x, num y, num w, num h) extends Group(0, 0, x, y, 0, 0, w, h) {								// {joj 15/7/17}

    num cw = w;
    num chw = cw / 2;
    num ch = h - 6;

    num stall = 0, type = 0;

	setClipPath(R$(0, 0, w, h));																					// {joj 15/07/17}

    Rectangle clkDisplay = Rectangle2(0, 0, blackPen, whiteBrush, 0, 0, w, h);										// {joj 15/07/17}
	clkDisplay.setRounded(2, 2);																					// {joj 16/10/16}

    Line prev_clock = Line(activePipesLayer, 0, redClockPen, -chw+chw/5,3+ch, 0,0, 0,-ch, chw,0, 0,ch, chw,0);		// {joj 15/07/17}
    Line next_clock = Line(activePipesLayer, 0, greenClockPen, chw+chw/5,3+ch, 0,0, 0,-ch, chw,0, 0,ch, chw,0);		// {joj 15/07/17}

    Rectangle dot = Rectangle2(activePipesLayer, 0, 0, blackBrush, w/2-3, h-6, 6, 6);    							// {joj 15/07/17}

    num canUpdate;

	//setTxt("AnimatedClock Group");
	//clkDisplay.setTxt("clkDisplay");
	//prev_clock.setTxt("prev_clock");
	//next_clock.setTxt("next_clock");
	//dot.setTxt("dot");

    function clockCycle(num length) {																				// {joj 14/11/17}

        num l2 = length / 2;
        num l5 = length / 5;
        num l10 = length / 10;

        canUpdate = 0;

       	prev_clock.translate(-chw, 0, l2, 0);	// {joj 02/09/20}
        next_clock.translate(-chw, 0, l2, 0);	// {joj 02/09/20}
        dot.translate(0, -ch, l5, 0);			// {joj 02/09/20}

        wait(l2);

        prev_clock.translate(-chw, 0, l2, 0);	// {joj 02/09/20}
        next_clock.translate(-chw, 0, l2, 0);	// {joj 02/09/20}
        dot.translate(0, ch, l5, 0);			// {joj 02/09/20}

        wait(l10);
        canUpdate = 1;
        prev_clock.translate(2*cw, 0);
        prev_clock.setPen(stall ? (type ? orangeClockPen : redClockPen) : greenClockPen)							// {joj 15/7/17}
        wait(l5*2);

        Line t = next_clock;
        next_clock = prev_clock;
        prev_clock = t;

        if (stall)
            stall--;

    }

    //
    // Indicate that the next s clock cycles are extra ("stalled") cycles
    //
    function setStall(num s, num t) {
		stall = s;
		type = t;
		if (canUpdate)
			prev_clock.setPen(stall ? (type ? orangeClockPen : redClockPen) : greenClockPen);						// {joj 15/7/17}
   }

}

// eof