//
// MESI.viv
//
// Vivio MESI cache coherency protocol animation
//
// Copyright (C) 2002 - 2022 jones@scss.tcd.ie
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software Foundation;
// either version 2 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//

//
// 27/08/02 first version [based on Vivio Write-Once and Firefly animations]
// 04/12/02 read cache line from memory on a write miss
// 03/06/05 corrected URL link to MESIHelp.htm
// 23/01/06 Vivio 4.0
// 20/02/06 real x,y event parameters
// 07/11/06 added extra wait(1) after getting bus lock
// 13/03/07 return EV_FORGET in event handlers which call getURL
// 30/01/10 Vivio 6.0
// 14/07/10 pen now used to draw text
// 16/10/10 used arrow capped Line for Bus and BusArrow
// 02/02/15 syntax update (constructors + declarations)
// 11/02/15	now able to initiate multiple transactions simultaneously using CTRL key
// 11/02/15 cosmetic changes
// 25/02/15 16:10 (1024 x 640) window
// 25/02/15 added layout constants
// 17/03/15 improved code for multiple concurrent transactions
// 19/03/15 added busCycles counter
// 11/06/16 improved bus cycle animation sequencing
// 04/09/16 VivioJS
// 12/11/20 added self-test
// 09/05/21 preload fonts
//

#include "standard.vin"
#include "simpleButton.vin"

//
// demos require font directory copied to demos directory (from www)
//
#preloadfont "Open Sans", "../fonts/open-sans-v18-latin-regular.woff", "{weight:400}"
#preloadfont "Open Sans", "../fonts/open-sans-v18-latin-700.woff", "{weight:700}"
#preloadfont "Open Sans", "../fonts/open-sans-v18-latin-italic.woff", "{style:'italic', weight:400}"

const num W 		= 1024;			// 16:10
const num H			=  640+600;

const num TITLEX	= 10;			// title
const num TITLEY	= 10;
const num TITLEH	= 40;

const num BY		= 10;			// buttons
const num BW		= 100;
const num BH		= 30;

const num INFOX		= TITLEX;		// info
const num INFOY		= 60;
const num INFOW		= 350;
const num INFOH		= 150;

const num MEMY		= 80;			// memory
const num MEMW		= 180;
const num MEMH		= 100 * 4; // 300

const num ABUSY		= 290 + 300;			// address bus
const num ABUSW		= 12;			// width of pen used to draw address bus
const num DBUSY		= 250 + 300;			// data bus
const num DBUSW		= 12;			// width of pen used to draw data bus
const num SBUSY		= 330 + 300;			// SHARED signal
const num SBUSW		= 8;			// width of pen used to draw shared bus

const num CACHEY	= 380 + 300;			// caches
const num CACHEW	= MEMW;
const num CACHEH	= 60;

const num CPUY		= 500 + 300;			// CPUs
const num CPUW		= CACHEW;
const num CPUH		= MEMH;

const num BUSOPY	= 208;			// bus operation

//
// setVirtualWindow
//
setVirtualWindow(0, 0, W, H, 1);

//
// set ticks per second
//
setTPS(20);

//setPin(W/2, H/2);					// set pin
//setAngle(180);					// upside down!!
//setSize(W/2, H/2);				// quarter size...
//translate(3*W/4, 3*H/4);			// in middle of window
//setPen(redPen);

//
// pens
//
Pen darkGreenPen2 = SolidPen(0, 3, rgba(0, 0.6, 0), ROUND_END);
Pen gray64Pen2 = SolidPen(0, 2, GRAY64, 0, ROUND_END);
Pen orangePen2 = SolidPen(0, 2, rgba(1.0, 0.65, 0), ROUND_END);
Pen redPen2 = SolidPen(0, 2, RED, ROUND_END);

//
// brushes
//
Brush titleBrush = SolidBrush(rgba(0, 0.56, 0.16));	// Irish Green {joj 08/06/21}

//
// fonts
//
Font bf0 = Font("Open Sans", 14, 0);
Font bf1 = Font("Open Sans", 13, 0);
Font infoFont = Font("Open Sans", 16, 0);
Font labelFont = Font("Open Sans", 16, SMALLCAPS);
Font lastModifiedFont = Font("Open Sans", 10, ITALIC);
Font titleFont = Font("Open Sans", 28, 0);

//
// set background
//
setBgBrush(gray224Brush);

//
// title
//
Rectangle title = Rectangle2(0, 0, 0, titleBrush, TITLEX, TITLEY, W/2, TITLEH, whitePen, titleFont, "Xerox Gragon Protocol (LRU)");
title.setRounded(5, 5);
title.setTxtOff(0, 2);
title.setPt(1, title.getTxtW() + 16, TITLEH);

//
// help info
//
//string infoStr =  "Research work #2\n";

//Rectangle2(0, HLEFT | VCENTRE | JUSTIFY, 0, 0, INFOX, INFOY, INFOW, INFOH, blackPen, infoFont, infoStr);

//
// lastModified
//

Txt(0, HRIGHT | VBOTTOM, W - 20, H - 10, gray192Pen, lastModifiedFont, timeToString(getLastModifiedMS(), "last modified %e-%b-%y"));

const num NCPU 			= 4;		// number of CPUs
const num NADDR			= 16;	// number of addresses
const num NSET			= 4;		// number of sets in cache
const num ASS 			= 2;
const num TICKS 		    = 20;		// animation speed

const num INVALID 		= -1;		// MESI cache line states
const num SHARED 		= 1;
const num EXCLUSIVE 	    = 2;
const num MODIFIED 		= 3;

const num D = 0;
const num VE = 1;
const num SD = 2;
const num SC = 3;

num wValue				= 0;		// value written into cache
//num buglevel			= 0;		// buglevel [0 = bugfree]

num dirtyCPU			= -1;		// indicates CPU supplies dirty data
num isshared			= 0;		// indicates a shared read

num busLock				= -1;		// -1 or number of CPU with bus lock

num busCycles 			= 0;		// bus cycles counter

//
// Bus
//
// horizontal bus
//
class Bus(num x, num y, num w, num l, num fgColour) {

	Pen busPen = SolidPen(0, w, fgColour, ARROW60_START | ARROW60_END);
	Line arrow = Line2(0, 0, busPen, x, y, l, 0);

	function setColour(num colour) {
		busPen.setRGBA(colour);
	}

}

//
// BusArrow
//
// vertical double headed bus arrow
//
class BusArrow(num x, num y, num w, num _l, num bgColour, num fgColour) {

	num l = _l;
	Pen bgPen = SolidPen(0, w, bgColour, ARROW60_START | ARROW60_END);
	Line bgArrow = Line2(0, 0, bgPen, x, y, 0, l);
	Pen fgPen = SolidPen(0, w, fgColour, ARROW60_END);
	Line fgArrow = Line2(0, 0, fgPen, x, y, 0, 0);
	fgArrow.setOpacity(0);

	function reset() {
		bgArrow.setOpacity(1);
		fgArrow.setOpacity(0);
	}

	//
	// animates up movement on vertical bus arrow
	//
	// may be called with ticks = 0
	//
	function moveUp(num ticks, num wait) {
		fgArrow.setPt(0, 0, l);
		fgArrow.setPt(1, 0, l);
		fgArrow.setPt(1, 0, 0, ticks, 0);	// {joj 03/09/20}
		fgArrow.setOpacity(1, ticks/4, 0);	// {joj 02/09/20}
		bgArrow.setOpacity(0, ticks, wait);	// {joj 02/09/20}
	}

	//
	// animates down movement on vertical bus arrow
	//
	// may be called with ticks = 0
	//
	function moveDown(num ticks, num wait) {
		fgArrow.setPt(0, 0, 0);
		fgArrow.setPt(1, 0, 0);
		fgArrow.setPt(1, 0, l, ticks, 0);	// {joj 03/09/20}
		fgArrow.setOpacity(1, ticks/4, 0);	// {joj 02/09/20}
		bgArrow.setOpacity(0, ticks, wait);	// {joj 02/09/20}
	}

}

//
// Memory
//
// contains 4 memory locations a0, a1, a2 and a3
//
class Memory(num _x, num _y) {

	num mem[NADDR];
	num stale[NADDR];
	Rectangle memR[NADDR];

	num x = _x;
	num y = _y;

	const num bgap = 3;
	const num bw = MEMW-2*bgap;
	const num bh = (MEMH-(NADDR+1)*bgap)/NADDR;

	Rectangle r = Rectangle2(0, 0, blackPen, gray192Brush, x, y, MEMW, MEMH);
	r.setRounded(4, 4);
	Rectangle2(0, 0, 0, 0, x, y-30, MEMW, 25, redPen, labelFont, "MEMORY");

	BusArrow abus = BusArrow(x+MEMW/4, y+MEMH, ABUSW, ABUSY-y-MEMH-ABUSW/2, GRAY32, BLUE);
	BusArrow dbus = BusArrow(x+3*MEMW/4, y+MEMH, DBUSW, DBUSY-y-MEMH-DBUSW/2, GRAY32, RED);

	for (num i = 0; i < NADDR; i++) {
 		mem[i] = 0;
 		stale[i] = 0;
 		memR[i] = Rectangle2(0, 0, blackPen, whiteBrush, x+bgap, y+(i+1)*bgap+i*bh, bw, bh, blackPen, bf0, "address: a%d data: %d", i, mem[i]);
 		memR[i].setRounded(2, 2);
	}

	function highlight(num addr, num flag) {
		memR[addr].setBrush((flag) ? greenBrush : (stale[addr]) ? gray192Brush : whiteBrush);
	}

	function reset() {
		for (num i = 0; i < NADDR; i++)
			highlight(i, 0);
	}

}

//
// data, address and shared horizontal busses
//
Bus ddbus = Bus(10, DBUSY, DBUSW, W-40, GRAY32);
Txt(0, HLEFT | VTOP, 60, DBUSY-30, redPen, labelFont, "data bus");
Bus aabus = Bus(20, ABUSY, ABUSW, W-40, GRAY32);
Txt(0, HLEFT | VTOP, 70, ABUSY-30, bluePen, labelFont, "address bus");
Bus sharedBus = Bus(30, SBUSY, SBUSW, W-40, GRAY32);
Txt(0, HLEFT | VTOP, 220, SBUSY-25, magentaPen, labelFont, "shared");

Memory memory = Memory((W-MEMW)/2, MEMY);

//
// busOp
//
Rectangle busOp = Rectangle(0, 0, blackPen, whiteBrush, W/2, BUSOPY, 0, 0, 0, 0, 0, infoFont);
busOp.setOpacity(0);
busOp.setRounded(4, 4);

function showBusOp(string s) {
	busOp.setTxt(s);
	num w = busOp.getTxtW() + 16;
	busOp.setPt(0, -w/2, -10);
	busOp.setPt(1, w/2, 10);
	busOp.setOpacity(1, TICKS, 0);	// {joj 02/09/20}
}

//
// bus cycles counter
//
Rectangle busCyclesT = Txt(0, HLEFT, 2*W/3 + 30, (ABUSY+DBUSY)/2, 0, labelFont, "bus cycles: %d", busCycles);

Cache cache[NCPU];				// caches
CPU cpu[NCPU];					// CPUs

//
// Cache
//
class Cache(num x, num y, num _cpuN) {

	Rectangle aR[NSET], dR[NSET], stateR[NSET];
	num a[NSET], d[NSET], state[NSET];
	num lru[NADDR]; // lru

	const num cpuN = _cpuN;

	const num bgap = 3;
	const num bw0 = 20;
	const num bw1 = (CACHEW-4*bgap-bw0)/2;
	const num bh = (CACHEH-(NSET+1)*bgap)/NSET;
	

	BusArrow sharedbus = BusArrow(x+bgap+bw0/2, SBUSY+SBUSW/2, SBUSW, y-SBUSY-SBUSW/2, GRAY32, MAGENTA);
	BusArrow abus = BusArrow(x+2*bgap+bw0+bw1/2, ABUSY+ABUSW/2, ABUSW, y-ABUSY-ABUSW/2, GRAY32, BLUE);
	BusArrow dbus = BusArrow(x+3*bgap+bw0+3*bw1/2, DBUSY+DBUSW/2, DBUSW, y-DBUSY-DBUSW/2, GRAY32, RED);
	BusArrow cpuabus = BusArrow(x+CACHEW/4, y+CACHEH, ABUSW, CPUY-CACHEY-CACHEH, GRAY32, BLUE);
	BusArrow cpudbus = BusArrow(x+3*CACHEW/4, y+CACHEH, DBUSW, CPUY-CACHEY-CACHEH, GRAY32, RED);

	Rectangle r = Rectangle2(0, 0, blackPen, gray192Brush, x, y, CACHEW, CACHEH);
	r.setRounded(4, 4);
	Txt(0, HLEFT | VTOP, x+CACHEW-20, y-30, redPen, labelFont, "CACHE %d", cpuN);

	busOp.moveToFront();

	for (num i = 0; i < NSET; i++) {
		state[i] = INVALID;
		stateR[i] = Rectangle2(0, 0, blackPen, whiteBrush, x+bgap, y+(i+1)*bgap+i*bh, bw0, bh, blackPen, bf0);
		stateR[i].setRounded(2,2);
		a[i] = 0;
		aR[i] = Rectangle2(0, 0, blackPen, whiteBrush, x+2*bgap+bw0, y+(i+1)*bgap+i*bh, bw1, bh, blackPen, bf0);
		aR[i].setRounded(2, 2);
		d[i] = 0;
		dR[i] = Rectangle2(0, 0, blackPen, whiteBrush, x+3*bgap+bw0+bw1, y+(i+1)*bgap+i*bh, bw1, bh, blackPen, bf0);
		dR[i].setRounded(2, 2);
	}
	
	for (i = 0; i < NADDR; i++) {
		lru[i] = 0;
	}
	//
	// helper function to set values
	//
	function setValues(num set, num addr, num data) {
		a[set] = addr;
		aR[set].setTxt("a%d", addr);
		d[set] = data;
		dR[set].setTxt("%d", data);
	}

	//
	// highlight cache line
	//
	function highlight(num set, num flag) {
		Brush brush = flag ? greenBrush : whiteBrush;
		stateR[set].setBrush(brush);
		aR[set].setBrush(brush);
		dR[set].setBrush(brush);
	}

	//
	// reset CPU address and data busses
	//
	function reset() {
		cpuabus.reset();
		cpudbus.reset();
		for (num i = 0; i < NSET; i++) {
			highlight(i, 0);
		}
	}

	//
	// reset ALL busses
	//
	function resetBus() {
		memory.abus.reset();
		memory.dbus.reset();
		aabus.setColour(GRAY32);
		ddbus.setColour(GRAY32);
		sharedBus.setColour(GRAY32);;
		memory.reset();
		for (num i = 0; i < NCPU; i++) {
			cache[i].abus.reset();
			cache[i].dbus.reset();
			cache[i].sharedbus.reset();
		}
		busOp.setOpacity(0, TICKS, 0);	// {joj 02/09/20}
	}

	//
	// flush data from cache line to memory
	// flash
	// 
	function flush(num addr) { // TODO 
		num set_number = addr % ASS;
		for (num set = set_number; set < NSET; set += ASS){
			// num set = addr % NSET; // 
			num flushaddr = a[set];
			if (addr == flushaddr) {
				abus.moveUp(TICKS, 0);
				dbus.moveUp(TICKS, 1);
				aabus.setColour(BLUE);
				ddbus.setColour(RED);
				memory.abus.moveUp(TICKS, 0);
				memory.dbus.moveUp(TICKS, 1);
				state[set] = INVALID;
				stateR[set].setTxt("");
				memory.stale[flushaddr] = 0;
				memory.memR[flushaddr].setBrush(whiteBrush);
				memory.mem[flushaddr] = d[set];
				memory.memR[flushaddr].setTxt("address: a%d data: %d", flushaddr, memory.mem[flushaddr]);
				resetBus();
			}
		}
	}

	//
	// busWatchHelper
	//
	// each cache must watch the bus and update its state according to the protocol
	//
	// if addr NOT in cache then no action need be taken
	// 
	// FOR GRAGON: ...
	// 
	// FOR MESI:
	// bus read: must assert shared line & update state to SHARED
	//		  	 if cache line MODIFIED must intervene and place data on bus
	// bus write: must set state to INVALID
	// 
	function busWatchHelper(num addr, num rw) { // TODO rw == 0: read, rw != 0: write
		num set = addr % NSET;
		//
		// test if address in cache
		//
		num hit = (a[set] == addr) && (state[set] != INVALID);

		//
		// calculate isshared & dirtyCPU here
		//
		if (hit && rw == 0) {
			isshared = 1;
			if (state[set] == MODIFIED)
				dirtyCPU = cpuN;
		}

		abus.moveDown(TICKS, 1);

		//
		// return if address not in cache
		//
		if (hit == 0)
			return;											// {joj 23/09/17}

		if (rw == 0) { // rw == 0 - read, rw != 0 - write

			//
			// read
			//
			if ((state[set] == EXCLUSIVE) || (state[set] == MODIFIED)) {
				if (state[set] == MODIFIED) {
					cache[cpuN].highlight(set, 1);
					cache[cpuN].dbus.moveUp(TICKS, 0);		// {joj 11/06/16}
				
				state[set] = SHARED;
				stateR[set].setTxt("S");
				highlight(set, 1);
			}
			sharedbus.moveUp(TICKS, 1);						// {joj 11/06/16}
			sharedBus.setColour(MAGENTA);					// {joj 11/06/16}
			
			} else {

			//
			// write
			//
				//if (buglevel != 1) {
					state[set] = INVALID;
					stateR[set].setTxt("I");
					highlight(set, 1);
				//}

			}
		}
	}
	// 
	// initiate bus watching by other CPUs
	// 
	function busWatch(num addr, num cpu, num rw) { // TODO
		dirtyCPU = -1;
		isshared = 0; 
		for (num i = 0; i < NCPU; i++) {
			if (i != cpu)
				fork(cache[i].busWatchHelper(addr, rw)); // 
		}
		if (rw == 0) {										// {joj 11/06/16}
			wait(2*TICKS);									// {joj 11/06/16}
			cache[cpu].sharedbus.moveDown(TICKS, 0);		// {joj 11/06/16}
		}
	}

	//
	// getBusLock ()
	//
	// NB: cpu may already have lock
	//
	function getBusLock() { // TODO
 		if (busLock == cpuN)
 			return;
 		while (busLock >= 0)
 			wait(1);
 		busLock = cpuN;
	}

	//
	// releaseBusLock
	//
	function releaseBusLock() { // TODO
 		busLock = -1;
 		wait(1);		// allow other CPUs get busLock
	}	

	//
	// read
	//
	// miss: read data from memory (or another cache if it intervenes)
	//
	// hit:  read from cache
	//
	function read(num addr, num animateCPUBus) { // TODO

		//debug("read");

		busOp.setOpacity(0);

		num set = addr % NSET;

		if (animateCPUBus)
			cpuabus.moveUp(TICKS, 1);

		//
		// handle read hit
		//
		if ((a[set] == addr) && (state[set] != INVALID)) {
			highlight(set, 1); // read hit
			if (animateCPUBus)
				cpudbus.moveDown(TICKS, 1);
			return;
		}

		//
		// handle read miss
		//
		// may need to flush MODIFIED cache line
		// read data from memory
		// act fairly, release bus between flush and read cycles
		//
		getBusLock();
		resetBus();

		//
		// flush cache line if MODIFIED
		//
		if ((state[set] == MODIFIED)){// && (buglevel != 2)) 
			showBusOp(sprintf("CPU %d flushes a%d from its cache to memory", cpuN, addr));
			flush(addr);
			busCycles++;
			busCyclesT.setTxt("bus cycles: %d", busCycles);
			releaseBusLock();	// allows other CPUs get bus between flush and read cycles
			getBusLock();		// get bus again
			resetBus();
		}

		showBusOp(sprintf("CPU %d reads a%d from memory", cpuN, addr));
		busCycles++;
		busCyclesT.setTxt("bus cycles: %d", busCycles);
		highlight(set, 1);
		abus.moveUp(TICKS, 1);
		aabus.setColour(BLUE);
		memory.abus.moveUp(TICKS, 0);
 		fork(busWatch(addr, cpuN, 0));				// {joj 11/06/16}
 		wait(TICKS);								// {joj 11/06/16}

		if (dirtyCPU >= 0) { 
		
			//
			// read data from another cache
			//
			wait(TICKS);							// {joj 11/06/16}
			showBusOp(sprintf("CPU %d reads a%d from memory - CPU %d intervenes and supplies data from its cache", cpuN, addr, dirtyCPU));
			ddbus.setColour(RED);
			memory.dbus.moveUp(TICKS, 0);
			dbus.moveDown(TICKS, 1);
			memory.mem[addr] = cache[dirtyCPU].d[set];
			memory.stale[addr] = 0;
			memory.memR[addr].setBrush(whiteBrush);
			memory.memR[addr].setTxt("address: a%d data: %d", addr, memory.mem[addr]);
			memory.highlight(addr, 1);

		} else {

			//
			// read data from memory
			//
			memory.highlight(addr, 1);
			memory.dbus.moveDown(TICKS, 1);
			ddbus.setColour(RED);
			dbus.moveDown(TICKS, 1);

 		}

		a[set] = addr;
		aR[set].setTxt("a%d", addr);
		d[set] = memory.mem[addr];
		dR[set].setTxt("%d", d[set]);
		state[set] = isshared ? SHARED : EXCLUSIVE;
		stateR[set].setTxt(isshared ? "S" : "E");
		releaseBusLock();				// can release bus before...
		if (animateCPUBus)				// returning data to CPU
			cpudbus.moveDown(TICKS, 1);

	}
	


	//
	// CPU cache write
	//
	// miss: read data from memory (or another cache if it intervenes)
	//		 write data
	//
	// hit:  if EXCLUSIVE or MODIFIED write to cache
	//		 if SHARED write through to memory and ...
	//		 enter EXCLUSIVE state (other caches will INVALIDTE their copies)
	//
	function write(num addr) { // TODO

		busOp.setOpacity(0);

		num set = addr % NSET;

		cpudbus.moveUp(TICKS, 0);
		cpuabus.moveUp(TICKS, 1);
		highlight(set, 1);

		wValue++;

		// 
		// write hit and bus NOT needed
		// 
		if ((a[set] == addr) && ((state[set] == EXCLUSIVE) || (state[set] == MODIFIED))) {
			setValues(set, addr, wValue);
			state[set] = MODIFIED;
			stateR[set].setTxt("M");
			memory.stale[addr] = 1;
			memory.memR[addr].setBrush(gray192Brush);
			return;
		}

		while (1) {

			//
			// write miss 
			// read data from memory (may need to flush MODIFIED cache line)
			//
			if ((state[set] == INVALID) || (a[set] != addr))
				read(addr, 0); 

			if (state[set] == SHARED) {

				//
				// write through
				// get bus and check that data has not been invalidated in the mean time
				//
				getBusLock();
				if (state[set] == INVALID)
					continue;		// need to read data again

				resetBus();

				showBusOp(sprintf("CPU %d writes %d to a%d in memory", cpuN, wValue, addr));
				busCycles++;
				busCyclesT.setTxt("bus cycles: %d", busCycles);
				setValues(set, addr, wValue);
				abus.moveUp(TICKS, 0);
				dbus.moveUp(TICKS, 1);
				aabus.setColour(BLUE);
				ddbus.setColour(RED);
				memory.abus.moveUp(TICKS, 0);
				memory.dbus.moveUp(TICKS, 0);
				fork(busWatch(addr, cpuN, 1));
				state[set] = EXCLUSIVE;
				stateR[set].setTxt("E");
				memory.mem[addr] = d[set];
				memory.memR[addr].setTxt("address: a%d data: %d", addr, memory.mem[addr]);
				memory.highlight(addr, 1);
				releaseBusLock();
				break;

			} else if ((state[set] == EXCLUSIVE) || (state[set] == MODIFIED)) {

				//
				// write to cache
				//
				setValues(set, addr, wValue);
				state[set] = MODIFIED;
				stateR[set].setTxt("M");
				memory.stale[addr] = 1;
				memory.memR[addr].setBrush(gray192Brush);
				busOp.setOpacity(0);
				break;

			}

			// need to read data again if state[set] == INVALID

		}
	}
}



//
// caches
//
cache[0] = Cache((W-5*CACHEW)/2, CACHEY, 0);
cache[1] = Cache((W-5*CACHEW)/2+1.3*CACHEW, CACHEY, 1);
cache[2] = Cache((W-5*CACHEW)/2+2.7*CACHEW, CACHEY, 2);
cache[3] = Cache((W-5*CACHEW)/2+4*CACHEW, CACHEY, 3);

const num bgap = 3;
const num bw = (CPUW-3*bgap)/2;
const num bh = (CPUH-(NADDR+1)*bgap)/NADDR;

//
// CPU
//
class CPU(num x, num y, num _cpuN) {

	const num cpuN = _cpuN;		// already have a global variable cpu[NCPU]
	num buttonLock = 0;			// button lock 
	CPUButton selected;			// last button pressed

	//
	// CPUButton
	//
	class CPUButton(num _rw, num x, num y, num _addr)

		extends SimpleButton(x, y, bw, bh, whiteBrush, gray224Brush, gray64Pen2, gray128Pen, blackPen, bf0, bf1, "") {

		num rw = _rw;
		num addr = _addr;

		setTxt(rw ? "write a%d" : "read a%d", addr);

		//
		// select
		//
		function select() {
			if (selected == this) {
 				selected.setPen(gray64Pen2);
 				selected = 0;
			} else {
				if (selected)
					selected.setPen(gray64Pen2);
				selected = this;
 				selected.setPen(orangePen2);
			}
		}

		//
		// resetCPUs
		//
		function resetCPUs(num cpuN) {
 			for (num i = 0; i < NCPU; i++) {
				if (cpu[i].selected == 0) {
					//debug("cache[%d].reset()", i);
					cache[i].reset();
					cpu[i].r.setPen(blackPen);
					cpu[i].resetButtons();
				}
 			}
		}

		//
		// cpuButtonAction
		//
		function cpuButtonAction() {
			//debug("cpuButtonAction cpuN=%d", cpuN);
			resetCPUs(cpuN);
			if (busLock == -1)					// {joj 09/12/15}
				cache[cpuN].resetBus();			// {joj 09/12/15}
			buttonLock = 1;						// {joj 13/07/17}
 			cache[cpuN].reset();
			r.setPen(darkGreenPen2);
			setPen(redPen2);
			if (rw) {
				cache[cpuN].write(addr);
			} else {
				cache[cpuN].read(addr, 1);
			}
 			resetCPUs(cpuN);
 			selected = 0;						// NB: after resetCPUs()
 			checkPoint();
 			buttonLock = 0;
		}

		//
		// eventMB handler
		//
 		when ~> eventMB(num down, num flags, num, num) {
 			//debug("eventMB down=%08x flags=%08x", down | 0, flags | 0);
			num r = 0;
			if (down && (flags & MB_LEFT)) {
 				r |= REMEMBER;
 				if (buttonLock)
 					return r;
				for (num i = 0; i < NCPU; i++)
					cpu[i].resetButtons();
				if (flags & MB_CTRL) {
					select();
				} else {
					selected = this;
					startTransactions();
				}
			}
			return r;
 		}
	
	}

	CPUButton rb[NADDR];		// read buttons
	CPUButton wb[NADDR];		// write buttons
	
	Rectangle r = Rectangle2(0, 0, blackPen, gray192Brush, x, y, CPUW, CPUH, 0, 0, "CPUXXX%d", cpuN);
	r.setRounded(4, 4);
	Txt(0, HLEFT | VTOP, x+CPUW-20, y-30, redPen, labelFont, "CPU %d", cpuN);
	
	//
	//resetButtons
	//
	function resetButtons() {
		for (num i = 0; i < NADDR; i++) {
			if (selected != rb[i])
				rb[i].setPen(gray64Pen2);
			if (selected != wb[i])
				wb[i].setPen(gray64Pen2);
		}
	}

	//
	// cpuAction
	//
	function cpuAction() {
		//debug("cpuAction");
		if (selected && buttonLock == 0)
			selected.cpuButtonAction();
	}
	
	//
	// create read and write buttons
	//
 	for (num i = 0; i < NADDR; i++) {
 		rb[i] = CPUButton(0, x+bgap, y+(i+1)*bgap+i*bh, i);
 		wb[i] = CPUButton(1, x+bgap+bw+bgap, y+(i+1)*bgap+i*bh, i);
 	}

}

//
// CPUs
//
cpu[0] = CPU((W-5*CPUW)/2,        CPUY, 0);
cpu[1] = CPU((W-5*CPUW)/2+1.3*CPUW, CPUY, 1);
cpu[2] = CPU((W-5*CPUW)/2+2.7*CPUW, CPUY, 2);
cpu[3] = CPU((W-5*CPUW)/2+4*CPUW, CPUY, 3);

//
// startTransactions
//
function startTransactions() {
	start();
 	for (num i = 0; i < NCPU; i++)
		fork(cpu[i].cpuAction());
}

//
// buttons
//
SimpleButton resetButton = SimpleButton(W-2*BW-2*BW/8, BY, BW, BH, whiteBrush, gray224Brush, gray64Pen2, gray128Pen, blackPen, bf0, bf1, "reset");
//SimpleButton bugButton = SimpleButton(W-BW-BW/8, BY, BW, BH, whiteBrush, gray224Brush, gray64Pen2, gray128Pen, blackPen, bf0, bf1, "bug free!");
//SimpleButton helpButton = SimpleButton(W-2*BW-2*BW/8, BY+BH+BH/4, BW, BH, whiteBrush, gray224Brush,gray64Pen2, gray128Pen, blackPen, bf0, bf1, "help");
//SimpleButton vivioButton = SimpleButton(W-BW-BW/8, BY+BH+BH/4, BW, BH, whiteBrush, gray224Brush,gray64Pen2, gray128Pen, blackPen, bf0, bf1, "VivioJS help");

//
// resetButton eventMB handler
//
when resetButton ~> eventMB(num down, num flags, num, num) {
	if (down && (flags & MB_LEFT)) {
		//arg["arg1"] = 0;
		reset();
	}
	return 0;
}

//
// bugButton eventMB handler
//
//when bugButton ~> eventMB(num down, num flags, num, num) {
//	if (down && (flags & MB_LEFT)) {
//		if (buglevel == 2) {
//			buglevel = 0;
//			bugButton.setTxt("bug free!");
//		} else {
//			buglevel++;
//			bugButton.setTxt("bug %d", buglevel-1);
//		}
//	}
//	return 0;
//}

//
// helpButton eventMB handler
//
//when helpButton ~> eventMB(num down, num flags, num, num) {
//	if (down && (flags & MB_LEFT))
//		getURL("MESIHelp.htm");
//	return 0;
//}

//
// vivioButton eventMB handler
//
//when vivioButton ~> eventMB(num down, num flags, num, num) {
//	if (down && (flags & MB_LEFT))
//		getURL("../vivio.htm");
//	return 0;
//}

//
// self test
//
//if (getArgAsNum("selfTest", 0)) {

//	debug("selfTest");

	// see MESIHelp.htm

//	cpu[0].rb[0].cpuButtonAction();	// 1
//	cpu[0].rb[0].cpuButtonAction();	// 2
//	cpu[0].wb[0].cpuButtonAction();	// 3
//	cpu[0].wb[0].cpuButtonAction();	// 4
//	cpu[1].rb[0].cpuButtonAction();	// 5
//	cpu[1].wb[0].cpuButtonAction();	// 6
//	cpu[1].wb[0].cpuButtonAction();	// 7
//	cpu[0].wb[0].cpuButtonAction();	// 8
//	cpu[0].wb[2].cpuButtonAction();	// 9
//	cpu[0].wb[0].cpuButtonAction();	// 10
	
//	debug("FINISHED tick=%d", getTick());

//}

// eof